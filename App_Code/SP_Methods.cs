using ClosedXML.Excel;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Net.Mail;
using System.Security.Cryptography;
using System.Text;
using System.Web;
  
public static class DBConnectionStrings
{
    //this is Default Connection string for HRMS Database
    public static string HRMS_SqlConnection = Convert.ToString(ConfigurationManager.ConnectionStrings["sqlconnection"].ConnectionString).Trim();

    //this is  Connection string for Appraisal Database
    public static string AppraisalConnection = Convert.ToString(ConfigurationManager.ConnectionStrings["AppraisalConnection"].ConnectionString).Trim();

    //this is  Connection string for HRMS_ADMIN Database
    public static string HRMSADMIN_SqlConnection = Convert.ToString(ConfigurationManager.ConnectionStrings["LocalSqlServer"].ConnectionString).Trim();
}

public static class SendFrom_MailsDetails
{
    //this is Default Connection string for HRMS Database
    public static string noreply = Convert.ToString(ConfigurationManager.ConnectionStrings["sqlconnection"].ConnectionString).Trim();

    //this is  Connection string for Appraisal Database
    public static string AppraisalConnection = Convert.ToString(ConfigurationManager.ConnectionStrings["AppraisalConnection"].ConnectionString).Trim();

    //this is  Connection string for HRMS_ADMIN Database
    public static string HRMSADMIN_SqlConnection = Convert.ToString(ConfigurationManager.ConnectionStrings["LocalSqlServer"].ConnectionString).Trim();
}
public class SP_Methods
{
    public bool IsLastWorkingDate(string strlastworkingdate)
    { 
        if (Convert.ToString(strlastworkingdate).Trim() == "NULL")
            return false;
        else
            return true; 

    }
    #region Global_variables
    // public string connection = ConfigurationManager.ConnectionStrings["sqlconnection"].ConnectionString;
    //SqlConnect sql = new SqlConnect();

    string loginUserid = "1";

    //String strexp = "";
    //Leave_Request_Parameters lpm = new Leave_Request_Parameters ();

    // public DataTable  dtLeaveType, dtApproverEmailId, dtRequestId, dtApproverName, dtIntermediateName, dtLeaveCalculate, dtHolidaydate, dtLeaveRequest, dtLeaveDetails;

    //SqlConnection scon = null;
    //SqlCommand sCommand = null;
    //SqlDataReader sReader = null;
    //SqlDataAdapter sadp = null;
    #endregion


    #region Helper Methods sqlconnection HRMS
    private DataTable ExecuteDataTable(string MethodName, string storedProcedure, string sptype, SqlParameter[] parameters = null, string connectionString = null)
    {
        connectionString = string.IsNullOrWhiteSpace(connectionString) ? DBConnectionStrings.HRMS_SqlConnection : connectionString;
        DataTable dataTable = new DataTable();
        try
        {
            if (Convert.ToString(sptype).Trim() == "")
            {
                if (parameters != null)
                {
                    sptype = getSptypeName(parameters);
                }
            }

            using (SqlConnection connection = new SqlConnection(connectionString))
            using (SqlCommand command = new SqlCommand(storedProcedure, connection))
            {
                command.CommandType = CommandType.StoredProcedure;
                command.CommandTimeout = 0;
                if (parameters != null)
                {
                    //command.Parameters.AddRange(parameters);
                    foreach (SqlParameter p in parameters)
                    {
                        if (p != null)
                        {
                            command.Parameters.Add(p);
                        }
                    }
                }

                using (SqlDataAdapter adapter = new SqlDataAdapter(command))
                {
                    adapter.Fill(dataTable);
                }
            }
        }
        catch (Exception ex)
        {
            SendExceptionMail(MethodName, storedProcedure, sptype, ex);
        }
        return dataTable;
    }

    private DataSet ExecuteDataSet(string MethodName, string storedProcedure, string sptype, SqlParameter[] parameters = null, string connectionString = null)
    {
        connectionString = string.IsNullOrWhiteSpace(connectionString) ? DBConnectionStrings.HRMS_SqlConnection : connectionString;

        DataSet dataSet = new DataSet();
        try
        {
            if (Convert.ToString(sptype).Trim() == "")
            {
                if (parameters != null)
                {
                    sptype = getSptypeName(parameters);
                }
            }

            using (SqlConnection connection = new SqlConnection(connectionString))
            using (SqlCommand command = new SqlCommand(storedProcedure, connection))
            {
                command.CommandType = CommandType.StoredProcedure;
                command.CommandTimeout = 0;
                if (parameters != null)
                {
                    //command.Parameters.AddRange(parameters);
                    foreach (SqlParameter p in parameters)
                    {
                        if (p != null)
                        {
                            command.Parameters.Add(p);
                        }
                    }
                }

                using (SqlDataAdapter adapter = new SqlDataAdapter(command))
                {
                    adapter.Fill(dataSet);
                }
            }
        }
        catch (Exception ex)
        {
            SendExceptionMail(MethodName, storedProcedure, sptype, ex);
        }
        return dataSet;
    }

    private int ExecuteNonQuery(string MethodName, string storedProcedure, string sptype, SqlParameter[] parameters, string connectionString = null)
    {
        connectionString = string.IsNullOrWhiteSpace(connectionString) ? DBConnectionStrings.HRMS_SqlConnection : connectionString;

        int irecordCnt = 0;


        try
        {
            if (Convert.ToString(sptype).Trim() == "")
            {
                if (parameters != null)
                {
                    sptype = getSptypeName(parameters);
                }
            }

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open(); // Explicit open for ExecuteNonQuery
                using (SqlCommand command = new SqlCommand(storedProcedure, connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.CommandTimeout = 0;
                    if (parameters != null)
                    {
                        //command.Parameters.AddRange(parameters);
                        foreach (SqlParameter p in parameters)
                        {
                            if (p != null)
                            {
                                command.Parameters.Add(p);
                            }
                        }
                    }
                    irecordCnt = command.ExecuteNonQuery();
                }
            }
        }
        catch (Exception ex)
        {
            SendExceptionMail(MethodName, storedProcedure, sptype, ex);
        }
        return irecordCnt;
    }

    private object ExecuteScalar(string MethodName, string storedProcedure, string sptype, SqlParameter[] parameters = null, string connectionString = null)
    {
        connectionString = string.IsNullOrWhiteSpace(connectionString) ? DBConnectionStrings.HRMS_SqlConnection : connectionString;

        object result = null;
        try
        {
            if (Convert.ToString(sptype).Trim() == "")
            {
                if (parameters != null)
                {
                    sptype = getSptypeName(parameters);
                }
            }

            using (SqlConnection connection = new SqlConnection(connectionString))
            using (SqlCommand command = new SqlCommand(storedProcedure, connection))
            {
                command.CommandType = CommandType.StoredProcedure;
                command.CommandTimeout = 0;
                if (parameters != null)
                {
                    //command.Parameters.AddRange(parameters);
                    foreach (SqlParameter p in parameters)
                    {
                        if (p != null)
                        {
                            command.Parameters.Add(p);
                        }
                    }
                }

                connection.Open();
                result = command.ExecuteScalar();
            }
        }
        catch (Exception ex)
        {
            SendExceptionMail(MethodName, storedProcedure, sptype, ex);
        }
        return result ?? 0; // Return 0 if null, similar to your original method
    }

    private DataTable ExecuteRawSql_DataTable(string MethodName, string sqlQuery, string connectionString = null)
    {
        connectionString = string.IsNullOrWhiteSpace(connectionString) ? DBConnectionStrings.HRMS_SqlConnection : connectionString;
        DataTable dataTable = new DataTable();
        try
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            using (SqlCommand command = new SqlCommand(sqlQuery, connection))
            {
                command.CommandType = CommandType.Text;  // For raw SQL, CommandType is Text
                command.CommandTimeout = 0;  // Set timeout (0 for unlimited)
                using (SqlDataAdapter adapter = new SqlDataAdapter(command))
                {
                    adapter.Fill(dataTable);  // Fill the DataTable with the result of the query
                }
            }
        }
        catch (Exception ex)
        {
            //sendMail("sanjay.patil@highbartech.com", "Error in SQL Query Execution", ex.Message + "<br/> <br/>" + sqlQuery +"<br/><br/><br/>" + ex.StackTrace, "", "");
            //throw; // Optionally rethrow if you want the caller to handle the error
            SendExceptionMail(MethodName, "Raw SQL Execution", "", ex, sqlQuery);
        }
        return dataTable;
    }

    private int ExecuteRawSql_ExecuteNonQuery(string MethodName, string sqlQuery, string connectionString = null)
    {
        connectionString = string.IsNullOrWhiteSpace(connectionString) ? DBConnectionStrings.HRMS_SqlConnection : connectionString;

        int irecordCnt = 0;
        try
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open(); // Explicit open for ExecuteNonQuery
                using (SqlCommand command = new SqlCommand(sqlQuery, connection))
                {
                    command.CommandType = CommandType.Text;
                    command.CommandTimeout = 0;

                    irecordCnt = command.ExecuteNonQuery();
                }
            }
        }
        catch (Exception ex)
        {
            SendExceptionMail(MethodName, "Raw SQL Execution", "", ex, sqlQuery);
        }
        return irecordCnt;
    }
    private string GetLoggedInEmpCode()
    {
        if (HttpContext.Current != null && HttpContext.Current.Session != null)
        {
            var empcode = HttpContext.Current.Session["Empcode"];
            if (empcode != null)
                return empcode.ToString();
        }
        return "Unknown";
    }

    private void SendExceptionMail(string methodName, string storedProcedure, string sptype, Exception ex, string optionalSql = "")
    {
        string empCode = GetLoggedInEmpCode();

        string subject = !string.IsNullOrWhiteSpace(sptype)
            ? string.Format("{0} encountered an error in SP: {1} | Type: {2}", empCode, storedProcedure, sptype)
            : string.Format("{0} encountered an error in {1}", empCode, storedProcedure);

        StringBuilder body = new StringBuilder();

        body.Append("<html><body style='font-family:Trebuchet MS;font-size:12pt;color:#333;'>");

        body.Append("<h3 style='color:#b30000;'>⚠️ Exception Alert</h3>");
        body.Append("<table style='border-collapse:collapse;width:100%;font-size:11pt;'>");

        body.AppendFormat("<tr><td style='padding:5px;font-weight:bold;width:150px;'>Employee Code:</td><td style='padding:5px;'>{0}</td></tr>", empCode);
        body.AppendFormat("<tr><td style='padding:5px;font-weight:bold;'>Method/ Function Name:</td><td style='padding:5px;'>{0}</td></tr>", methodName);
        body.AppendFormat("<tr><td style='padding:5px;font-weight:bold;'>Stored Procedure:</td><td style='padding:5px;'>{0}</td></tr>", storedProcedure);
        if (!string.IsNullOrWhiteSpace(sptype))
            body.AppendFormat("<tr><td style='padding:5px;font-weight:bold;'>SP Type:</td><td style='padding:5px;'>{0}</td></tr>", sptype);

        body.AppendFormat("<tr><td style='padding:5px;font-weight:bold;'>Exception Message:</td><td style='padding:5px;color:#b30000;'>{0}</td></tr>", ex.Message);

        if (!string.IsNullOrWhiteSpace(optionalSql))
        {
            body.Append("<tr><td style='padding:5px;font-weight:bold;'>SQL Query:</td>");
            body.AppendFormat("<td style='padding:5px;'><pre style='background:#f4f4f4;border:1px solid #ccc;padding:8px;'>{0}</pre></td></tr>", optionalSql);
        }

        body.Append("<tr><td style='padding:5px;font-weight:bold;'>Stack Trace:</td>");
        body.AppendFormat("<td style='padding:5px;'><pre style='background:#f9f9f9;border:1px dashed #999;padding:8px;white-space:pre-wrap;'>{0}</pre></td></tr>", ex.StackTrace);

        body.Append("</table>");
        body.Append("<br/><div style='color:#777;font-size:10pt;'>This is an automated exception notification from OneHR.</div>");
        body.Append("</body></html>");

        sendMail("sanjay.patil@highbartech.com", subject, body.ToString(), "", "");
    }

    private string getSptypeName(SqlParameter[] parameters)
    {
        string sptype = "";
        if (parameters != null)
        {
            foreach (SqlParameter p in parameters)
            {
                if (p != null && p.ParameterName != null)
                {
                    string paramName = p.ParameterName.ToLower();
                    
                    if ((paramName == "@sptype" || paramName == "@qtype" || paramName == "@app_type" || paramName == "@stype" || paramName == "@type" 
                        || paramName == "@querymode" || paramName == "@empstatus" || paramName == "@strinterviewertype" || paramName == "@chkupdate"
                        || paramName == "@mode" || paramName == "@queuetype" || paramName == "@status" || paramName == "@query_mode" || paramName == "@escalated" 
                        || paramName == "@project_dept_name" || paramName == "@from_duration" || paramName == "@p_delete" 
                        || paramName == "@filetype"  || paramName == "@delete" || paramName == "@appr_type") && p.Value != null && p.Value != DBNull.Value)
                    {
                        sptype = Convert.ToString(p.Value);
                    }
                }
            }
        }
        return sptype;
    }

    #endregion


    #region Send mails    

    public void sendMail(string toMailIDs, string strsubject, string strbody, String strattchfilepath, string ccMailIDs)
    {

        try
        {
            string stoemailid = "";
            string sccemailid = "";

            MailMessage mail = new MailMessage();

            HashSet<string> uniqueEmails = new HashSet<string>(StringComparer.OrdinalIgnoreCase);


            string[] strtoEmail = Convert.ToString(toMailIDs).Trim().Split(';');
            foreach (string email in strtoEmail)
            {
                if (!string.IsNullOrWhiteSpace(email))
                {
                    if (Convert.ToString(email).Trim() != "")
                    {
                        uniqueEmails.Add(email.Trim());
                    }
                }
            }

            string[] strCCEmail = Convert.ToString(ccMailIDs).Trim().Split(';');
            foreach (string email in strCCEmail)
            {
                if (!string.IsNullOrWhiteSpace(email))
                {
                    if (Convert.ToString(email).Trim() != "")
                        uniqueEmails.Add(email.Trim());
                }
            }

            foreach (string email in strtoEmail)
            {
                if (uniqueEmails.Contains(email))
                {
                  // mail.To.Add(email);
                    uniqueEmails.Remove(email); // Remove it from uniqueEmails after adding to To
                    stoemailid = stoemailid + email + ";";
                }
            }

            foreach (string email in strCCEmail)
            {
                if (uniqueEmails.Contains(email))
                {
                  // mail.CC.Add(email); 
                    sccemailid = sccemailid + email + ";";
                }
            }           

            mail.To.Add("sanjay.patil@highbartech.com");

            StringBuilder strsignature = new StringBuilder();

            mail.From = new MailAddress("noreply@highbartech.com", "OneHR");

            mail.Subject = strsubject;
            //mail.Body = Convert.ToString(strbody) + Convert.ToString(strsignature);
            mail.Body = "TO Mail ID :-" + stoemailid + "<br>  CC Mail id :"  + sccemailid  + "<br> <br> <br> " + Convert.ToString(strbody) + Convert.ToString(strsignature);
            mail.IsBodyHtml = true;
            mail.Priority = MailPriority.Low;

            if (Convert.ToString(strattchfilepath).Trim() != "")
            {
                Attachment attch = new Attachment(strattchfilepath);
                mail.Attachments.Add(attch);
            }

            using (SmtpClient smtp = new SmtpClient())
            {
                smtp.Host = "smtp.office365.com"; //Highbar SMTP

                smtp.Port = 587;
                smtp.TargetName = "STARTTLS/smtp.office365.com";
                smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                System.Net.NetworkCredential SMTPUserInfo = new System.Net.NetworkCredential("noreply@highbartech.com", "HBT@2019");
                smtp.UseDefaultCredentials = false;
                smtp.Credentials = SMTPUserInfo;
                smtp.EnableSsl = true;

                System.Net.ServicePointManager.SecurityProtocol |= System.Net.SecurityProtocolType.Tls | System.Net.SecurityProtocolType.Tls11 | System.Net.SecurityProtocolType.Tls12;
                smtp.Send(mail);
            }
            mail.Dispose();
        }
        catch (Exception)
        {

            throw;
        } 
    }  

    public static void sendMailServiceRequest(string toMailIDs, string strsubject, string strbody, string strattchfilepath, string ccMailIDs)
    {  

        try
        {
            string stoemailid = "";
            string sccemailid = "";

            MailMessage mail = new MailMessage();

            HashSet<string> uniqueEmails = new HashSet<string>(StringComparer.OrdinalIgnoreCase);


            string[] strtoEmail = Convert.ToString(toMailIDs).Trim().Split(';');
            foreach (string email in strtoEmail)
            {
                if (!string.IsNullOrWhiteSpace(email))
                {
                    if (Convert.ToString(email).Trim() != "")
                        uniqueEmails.Add(email.Trim());
                }
            }

            string[] strCCEmail = Convert.ToString(ccMailIDs).Trim().Split(';');
            foreach (string email in strCCEmail)
            {
                if (!string.IsNullOrWhiteSpace(email))
                {
                    if (Convert.ToString(email).Trim() != "")
                        uniqueEmails.Add(email.Trim());
                }
            }


            foreach (string email in strtoEmail)
            {
                if (uniqueEmails.Contains(email))
                {
                    //mail.To.Add(email);
                    uniqueEmails.Remove(email); // Remove it from uniqueEmails after adding to To
                    stoemailid = stoemailid + email + ";";
                }
            }

            foreach (string email in strCCEmail)
            {
                if (uniqueEmails.Contains(email))
                {
                   // mail.CC.Add(email); 
                    sccemailid = sccemailid + email + ";";
                }
            }

            mail.To.Add("sanjay.patil@highbartech.com");

            StringBuilder strsignature = new StringBuilder();
            mail.From = new MailAddress("noreply@highbartech.com", "OneHR");
            mail.Subject = strsubject;
           // mail.Body = Convert.ToString(strbody) + Convert.ToString(strsignature);
           mail.Body = "toMailIDs =" + stoemailid + "<br> ccMailIDs =" + sccemailid + "<br><br>" + Convert.ToString(strbody) + Convert.ToString(strsignature);
            mail.IsBodyHtml = true;
            mail.Priority = MailPriority.Low;

            // Add attachment if present
            if (!string.IsNullOrWhiteSpace(strattchfilepath))
            {
                Attachment attch = new Attachment(strattchfilepath);
                mail.Attachments.Add(attch);
            }

            // Send mail using SMTP
            using (SmtpClient smtp = new SmtpClient())
            {
                smtp.Host = "smtp.office365.com"; // Highbar SMTP
                smtp.Port = 587;
                smtp.TargetName = "STARTTLS/smtp.office365.com";
                smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                System.Net.NetworkCredential SMTPUserInfo = new System.Net.NetworkCredential("noreply@highbartech.com", "HBT@2019");
                smtp.UseDefaultCredentials = false;
                smtp.Credentials = SMTPUserInfo;
                smtp.EnableSsl = true;

                System.Net.ServicePointManager.SecurityProtocol |= System.Net.SecurityProtocolType.Tls | System.Net.SecurityProtocolType.Tls11 | System.Net.SecurityProtocolType.Tls12;
                smtp.Send(mail);
            }
            mail.Dispose();
        }
        catch (Exception)
        {
            throw;
        }
    }

    public static void sendMailCustEscalation(string toMailIDs, string strsubject, string strbody, String strattchfilepath, string ccMailIDs)
    {
        try
        {
            string stoemailid = "";
            string sccemailid = "";

            MailMessage mail = new MailMessage();

            HashSet<string> uniqueEmails = new HashSet<string>(StringComparer.OrdinalIgnoreCase);


            string[] strtoEmail = Convert.ToString(toMailIDs).Trim().Split(';');
            foreach (string email in strtoEmail)
            {
                if (!string.IsNullOrWhiteSpace(email))
                {
                    if(Convert.ToString(email).Trim()!="")
                    uniqueEmails.Add(email.Trim());
                }
            }

            string[] strCCEmail = Convert.ToString(ccMailIDs).Trim().Split(';');
            foreach (string email in strCCEmail)
            {
                if (!string.IsNullOrWhiteSpace(email))
                {
                    if (Convert.ToString(email).Trim() != "")
                        uniqueEmails.Add(email.Trim());
                }
            }


            foreach (string email in strtoEmail)
            {
                if (uniqueEmails.Contains(email))
                {
                     // mail.To.Add(email);
                    uniqueEmails.Remove(email); // Remove it from uniqueEmails after adding to To
                    stoemailid = stoemailid + email + ";";
                }
            }

            foreach (string email in strCCEmail)
            {
                if (uniqueEmails.Contains(email))
                {
                   //  mail.CC.Add(email); 
                    sccemailid = sccemailid + email + ";";
                }
            }

            mail.To.Add("sanjay.patil@highbartech.com");
            StringBuilder strsignature = new StringBuilder();
            mail.From = new MailAddress("noreply@highbartech.com", "OneHR");

            mail.Subject = strsubject;
            //mail.Body = Convert.ToString(strbody) + Convert.ToString(strsignature);
            mail.Body = " toMailIDs:- " + Convert.ToString(toMailIDs) + "  ccMailIDs:- " + Convert.ToString(ccMailIDs) + " " + Convert.ToString(strbody) + Convert.ToString(strsignature);
            mail.IsBodyHtml = true;
            mail.Priority = MailPriority.Low;

            if (Convert.ToString(strattchfilepath).Trim() != "")
            {
                Attachment attch = new Attachment(strattchfilepath);
                mail.Attachments.Add(attch);
            }

            using (SmtpClient smtp = new SmtpClient())
            {
                smtp.Host = "smtp.office365.com"; //Highbar SMTP

                smtp.Port = 587;
                smtp.TargetName = "STARTTLS/smtp.office365.com";
                smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                System.Net.NetworkCredential SMTPUserInfo = new System.Net.NetworkCredential("noreply@highbartech.com", "HBT@2019");
                smtp.UseDefaultCredentials = false;
                smtp.Credentials = SMTPUserInfo;
                smtp.EnableSsl = true;
                System.Net.ServicePointManager.SecurityProtocol |= System.Net.SecurityProtocolType.Tls | System.Net.SecurityProtocolType.Tls11 | System.Net.SecurityProtocolType.Tls12;
                smtp.Send(mail);
            }
            mail.Dispose();
        }
        catch (Exception)
        {

            throw;
        }
    }
    public void sendMail_Retention_Employee(string toMailIDs, string strsubject, string strbody, String strattchfilepath, string ccMailIDs, string FileName)
    {

        try
        {
            string stoemailid = "";
            string sccemailid = "";

            MailMessage mail = new MailMessage();

            HashSet<string> uniqueEmails = new HashSet<string>(StringComparer.OrdinalIgnoreCase);


            string[] strtoEmail = Convert.ToString(toMailIDs).Trim().Split(';');
            foreach (string email in strtoEmail)
            {
                if (!string.IsNullOrWhiteSpace(email))
                {
                    if (Convert.ToString(email).Trim() != "")
                        uniqueEmails.Add(email.Trim());
                }
            }

            string[] strCCEmail = Convert.ToString(ccMailIDs).Trim().Split(';');
            foreach (string email in strCCEmail)
            {
                if (!string.IsNullOrWhiteSpace(email))
                {
                    if (Convert.ToString(email).Trim() != "")
                        uniqueEmails.Add(email.Trim());
                }
            }


            foreach (string email in strtoEmail)
            {
                if (uniqueEmails.Contains(email))
                {
                  // mail.To.Add(email);
                    uniqueEmails.Remove(email); // Remove it from uniqueEmails after adding to To
                    stoemailid = stoemailid + email + ";";
                }
            }

            foreach (string email in strCCEmail)
            {
                if (uniqueEmails.Contains(email))
                {
                  //  mail.CC.Add(email);
                    sccemailid = sccemailid + email + ";";
                }
            }

            mail.To.Add("sanjay.patil@highbartech.com");
            StringBuilder strsignature = new StringBuilder();
            mail.From = new MailAddress("noreply@highbartech.com", "OneHR");

            mail.Subject = strsubject;
            mail.Body = "toMailIDs =" + stoemailid + "<br> ccMailIDs =" + sccemailid + Convert.ToString(strbody) + Convert.ToString(strsignature);
           // mail.Body = Convert.ToString(strbody) + Convert.ToString(strsignature);
            mail.IsBodyHtml = true;
            mail.Priority = MailPriority.Low;


            if (Convert.ToString(FileName).Trim() != "")
            {
                string[] S1 = Convert.ToString(FileName).Trim().Split(',');
                foreach (string fileName in S1)
                {
                    Attachment attch = new Attachment(strattchfilepath + fileName);
                    mail.Attachments.Add(attch);
                }
            }


            using (SmtpClient smtp = new SmtpClient())
            {
                smtp.Host = "smtp.office365.com"; //Highbar SMTP
                smtp.Port = 587;
                smtp.TargetName = "STARTTLS/smtp.office365.com";
                smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                System.Net.NetworkCredential SMTPUserInfo = new System.Net.NetworkCredential("noreply@highbartech.com", "HBT@2019");
                smtp.UseDefaultCredentials = false;
                smtp.Credentials = SMTPUserInfo;
                smtp.EnableSsl = true;
                System.Net.ServicePointManager.SecurityProtocol |= System.Net.SecurityProtocolType.Tls | System.Net.SecurityProtocolType.Tls11 | System.Net.SecurityProtocolType.Tls12;
                smtp.Send(mail);
            }
            mail.Dispose();
        }
        catch (Exception)
        {

            throw;
        }
    }
    public static void sendMailCustomerFIRST_New(string toMailIDs, string strsubject, string strbody, string strattchfilepath, string ccMailIDs)
    {
        try
        {
            string stoemailid = "";
            string sccemailid = "";

            MailMessage mail = new MailMessage();

            HashSet<string> uniqueEmails = new HashSet<string>(StringComparer.OrdinalIgnoreCase);


            string[] strtoEmail = Convert.ToString(toMailIDs).Trim().Split(';');
            foreach (string email in strtoEmail)
            {
                if (!string.IsNullOrWhiteSpace(email))
                {
                    uniqueEmails.Add(email.Trim());
                }
            }

            string[] strCCEmail = Convert.ToString(ccMailIDs).Trim().Split(';');
            foreach (string email in strCCEmail)
            {
                if (!string.IsNullOrWhiteSpace(email))
                {
                    uniqueEmails.Add(email.Trim());
                }
            }


            foreach (string email in strtoEmail)
            {
                if (uniqueEmails.Contains(email))
                {
                   // mail.To.Add(email);
                    uniqueEmails.Remove(email); // Remove it from uniqueEmails after adding to To
                    stoemailid = stoemailid + email + ";";
                }
            }

            foreach (string email in strCCEmail)
            {
                if (uniqueEmails.Contains(email))
                {
                   // mail.CC.Add(email);
                    sccemailid = sccemailid + email + ";";
                }
            }

            mail.To.Add("sanjay.patil@highbartech.com");
            StringBuilder strsignature = new StringBuilder();
            mail.From = new MailAddress("feedback@highbartech.com", "Customer Survey");
            mail.Subject = strsubject;

            mail.Body = "To Email " + stoemailid + "<br><br>CC Email:- " + sccemailid + "<br><br>" + Convert.ToString(strbody) + Convert.ToString(strsignature);
            //mail.Body = Convert.ToString(strbody) + Convert.ToString(strsignature);

            mail.IsBodyHtml = true;
            mail.Priority = MailPriority.Low;


            if (Convert.ToString(strattchfilepath).Trim() != "")
            {
                Attachment attch = new Attachment(strattchfilepath);
                mail.Attachments.Add(attch);
            }

            using (SmtpClient smtp = new SmtpClient())
            {
                smtp.Host = "smtp.office365.com"; //Highbar SMTP
                smtp.Port = 587;
                smtp.TargetName = "STARTTLS/smtp.office365.com";
                smtp.DeliveryMethod = SmtpDeliveryMethod.Network;

                System.Net.NetworkCredential SMTPUserInfo = new System.Net.NetworkCredential("feedback@highbartech.com", "Fb$Sep@2024");
                smtp.UseDefaultCredentials = false;
                smtp.Credentials = SMTPUserInfo;
                smtp.EnableSsl = true;
                System.Net.ServicePointManager.SecurityProtocol |= System.Net.SecurityProtocolType.Tls | System.Net.SecurityProtocolType.Tls11 | System.Net.SecurityProtocolType.Tls12;
                smtp.Send(mail);
            }
            mail.Dispose();

        }
        catch (Exception)
        {
            throw;
        }
    }

    public void Custs_sendMailServiceRequest(string toMailIDs, string strsubject, string strbody, string strattchfilepath, string ccMailIDs)
    {
        try
        {
            string stoemailid = "";
            string sccemailid = "";

            MailMessage mail = new MailMessage();

            HashSet<string> uniqueEmails = new HashSet<string>(StringComparer.OrdinalIgnoreCase);


            string[] strtoEmail = Convert.ToString(toMailIDs).Trim().Split(';');
            foreach (string email in strtoEmail)
            {
                if (!string.IsNullOrWhiteSpace(email))
                {
                    uniqueEmails.Add(email.Trim());
                }
            }

            string[] strCCEmail = Convert.ToString(ccMailIDs).Trim().Split(';');
            foreach (string email in strCCEmail)
            {
                if (!string.IsNullOrWhiteSpace(email))
                {
                    uniqueEmails.Add(email.Trim());
                }
            }


            foreach (string email in strtoEmail)
            {
                if (uniqueEmails.Contains(email))
                {
                  //  mail.To.Add(email);
                    uniqueEmails.Remove(email); // Remove it from uniqueEmails after adding to To
                    stoemailid = stoemailid + email + ";";
                }
            }

            foreach (string email in strCCEmail)
            {
                if (uniqueEmails.Contains(email))
                {
                  //  mail.CC.Add(email);
                    sccemailid = sccemailid + email + ";";
                }
            }

            mail.To.Add("sanjay.patil@highbartech.com");

            StringBuilder strsignature = new StringBuilder();            
            mail.From = new MailAddress("customerfirst@highbartech.com", "CustomerFIRST");

            mail.Subject = strsubject;
            mail.Body = "TO Mail ID :-" + toMailIDs + "<br>  CC Mail id :" + ccMailIDs + Convert.ToString(strbody) + Convert.ToString(strsignature);
            //mail.Body = Convert.ToString(strbody) + Convert.ToString(strsignature);
            mail.IsBodyHtml = true;
            mail.Priority = MailPriority.Low;

            if (Convert.ToString(strattchfilepath).Trim() != "")
            {
                Attachment attch = new Attachment(strattchfilepath);
                mail.Attachments.Add(attch);
            }

            using (SmtpClient smtp = new SmtpClient())
            {
                smtp.Host = "smtp.office365.com"; //Highbar SMTP

                smtp.Port = 587;
                smtp.TargetName = "STARTTLS/smtp.office365.com";
                //smtp.Host = "smtp-mail.outlook.com"; //Highbar SMTP
                //smtp.Port = 25;
                smtp.DeliveryMethod = SmtpDeliveryMethod.Network; 
                System.Net.NetworkCredential SMTPUserInfo = new System.Net.NetworkCredential("customerfirst@highbartech.com", "Cf$Sep@2024");
                smtp.UseDefaultCredentials = false;
                smtp.Credentials = SMTPUserInfo;
                smtp.EnableSsl = true;

                System.Net.ServicePointManager.SecurityProtocol |= System.Net.SecurityProtocolType.Tls | System.Net.SecurityProtocolType.Tls11 | System.Net.SecurityProtocolType.Tls12;
                smtp.Send(mail);
            }
            mail.Dispose();
        }
        catch (Exception)
        {

            throw;
        }

    }

    public void sendMailTaskMonitoring(string toMailIDs, string strsubject, string strbody, string strattchfilepath, string ccMailIDs)
    {
        sendMail(toMailIDs, strsubject, strbody, strattchfilepath, ccMailIDs);        
    }

    public void sendMail_KRA(string toMailIDs, string strsubject, string strbody, String strattchfilepath, string ccMailIDs)
    {
        sendMail(toMailIDs, strsubject, strbody, strattchfilepath, ccMailIDs);
    }

    public void sendMail_VSCB(string toMailIDs, string strsubject, string strbody, String strattchfilepath, string ccMailIDs)
    {
        sendMail(toMailIDs, strsubject, strbody, strattchfilepath, ccMailIDs);
    }

    public void sendMail_VSCB(string toMailIDs, string strsubject, string strbody, String strattchfilepath, string ccMailIDs, string bccMailIDs)
    {
        sendMail(toMailIDs, strsubject, strbody, strattchfilepath, ccMailIDs);
    }      
    
    public void sendMailForCustomerFirstClient_old(string ContactEmail, int id, string txtMailBody, string lblQuestion, string ClientName, string EmpName, string mailBody, string subjectUser)
    {
        try
        {
            string responsePageURL = ConfigurationManager.AppSettings["customerResponsePage"];
            string url1 = responsePageURL;
            string url2 = responsePageURL;
            string url3 = responsePageURL;
            string url4 = responsePageURL;
            string url5 = responsePageURL;
            url1 += "?imgID=1&Id=" + id;
            url2 += "?imgID=2&Id=" + id;
            url3 += "?imgID=3&Id=" + id;
            url4 += "?imgID=4&Id=" + id;
            url5 += "?imgID=5&Id=" + id;


            //Fetching Settings from WEB.CONFIG file. 
            string FilePath = "D:\\CustomerFRIST\\CustomerFRIST\\Email_Template\\Survey_Email.html";
            // FilePath =comb Server.MapPath("/Email_Template/Survey_Email.html");
            FilePath = Directory.GetFiles(HttpContext.Current.Server.MapPath("~/Email_Template/"))[0];
            // var g= System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath;
            StreamReader str = new StreamReader(FilePath);
            string Mailbody = str.ReadToEnd();
            str.Close();

            Mailbody = Mailbody.Replace("{url1}", url1);
            Mailbody = Mailbody.Replace("{url2}", url2);
            Mailbody = Mailbody.Replace("{url3}", url3);
            Mailbody = Mailbody.Replace("{url4}", url4);
            Mailbody = Mailbody.Replace("{url5}", url5);
            var txtBody = txtMailBody.ToString().Trim();
            ///var finalBody = txtBody.Replace("Dear Sir / Madam,", "");
            var finalBody = txtBody.ToString().Trim();
            finalBody = finalBody.Replace("\r\n", "<br/>");//
            var finalMailBody = mailBody.Replace("\r\n", "<br/>");//
            Mailbody = Mailbody.Replace("{TeamRemark}", finalBody);
            Mailbody = Mailbody.Replace("{UserText}", finalMailBody);
            Mailbody = Mailbody.Replace("{Question}", lblQuestion.Trim());
            Mailbody = Mailbody.Replace("{ClientName}", ClientName.Trim());
            Mailbody = Mailbody.Replace("{LoginName}", EmpName.Trim());
            string subject = subjectUser;

            MailMessage mailmsg = new MailMessage();
            mailmsg.IsBodyHtml = true; 
            mailmsg.From = new MailAddress("feedback@highbartech.com");

            mailmsg.To.Add(ContactEmail);
            //mailmsg.To.Add("harshad.dhande@highbartech.com");

            mailmsg.Subject = subject;
            mailmsg.Body = Mailbody;

            SmtpClient smtp = new SmtpClient();

            smtp.Host = "smtp.office365.com"; //Highbar SMTP
            smtp.Port = 587;

            System.Net.NetworkCredential SMTPUserInfo = new System.Net.NetworkCredential("feedback@highbartech.com", "Fb$Sep@2024");
            smtp.UseDefaultCredentials = false;
            smtp.Credentials = SMTPUserInfo;
            smtp.EnableSsl = true;
            smtp.Send(mailmsg);
            mailmsg.Dispose();
        }
        catch (Exception)
        {

            throw;
        }
    }
    public void sendMailForCustomerFirstClient(string ContactEmail, int id, string txtMailBody, string lblQuestion, string ClientName, string EmpName, string mailBody, string subjectUser)
    {
        try
        {
            string responsePageURL = ConfigurationManager.AppSettings["customerResponsePage"];
            string newurl = responsePageURL;
            //  newurl += "?Id=" + id;
            string encreptedId = EncryptionHelper.Encrypt(Convert.ToString(id).Trim());
            newurl += "?Id=" + encreptedId;
            string FilePath = @"D:\HRMS\hrms\Email_Template\Email_TeamResponse.html";
            StreamReader str = new StreamReader(FilePath);
            string Mailbody = str.ReadToEnd();
            str.Close();

            Mailbody = Mailbody.Replace("{urlnew}", newurl);
            var txtBody = txtMailBody.ToString().Trim();
            var finalBody = txtBody.ToString().Trim();
            finalBody = finalBody.Replace("\r\n", "<br/>");//
            var finalMailBody = mailBody.Replace("\r\n", "<br/>");//
            Mailbody = Mailbody.Replace("{TeamRemark}", finalBody);
            Mailbody = Mailbody.Replace("{UserText}", finalMailBody);
            Mailbody = Mailbody.Replace("{Question}", lblQuestion.Trim());
            Mailbody = Mailbody.Replace("{ClientName}", ClientName.Trim());
            Mailbody = Mailbody.Replace("{LoginName}", EmpName.Trim());

            sendMailCustomerFIRST_New(ContactEmail, subjectUser, Mailbody, "", "");

            #region old code for send mail
            /* string subject = subjectUser;
             MailMessage mailmsg = new MailMessage();
             mailmsg.IsBodyHtml = true;                        
             mailmsg.From = new MailAddress("feedback@highbartech.com");            
             mailmsg.To.Add("harshad.dhande@highbartech.com");
             mailmsg.Subject = subject;
             mailmsg.Body = Mailbody;
             SmtpClient smtp = new SmtpClient();
             smtp.Host = "smtp.office365.com"; //Highbar SMTP
             smtp.Port = 587;
             System.Net.NetworkCredential SMTPUserInfo = new System.Net.NetworkCredential("feedback@highbartech.com", "Fb$Sep@2024");
             smtp.UseDefaultCredentials = false;
             smtp.Credentials = SMTPUserInfo;
             smtp.EnableSsl = true;
             smtp.Send(mailmsg);
             mailmsg.Dispose();
             */
            #endregion
        }
        catch (Exception)
        {

            throw;
        }
    }
    public void sendMail(string toMailIDs, string strsubject, string strbody, List<String> strattchfilepath, string ccMailIDs)
    {
        try
        {
            string stoemailid = "";
            string sccemailid = "";

            MailMessage mail = new MailMessage();
            HashSet<string> uniqueEmails = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

            string[] strtoEmail = Convert.ToString(toMailIDs).Trim().Split(';');
            foreach (string email in strtoEmail)
            {
                if (!string.IsNullOrWhiteSpace(email))
                {
                    if (Convert.ToString(email).Trim() != "")
                    {
                        uniqueEmails.Add(email.Trim());
                    }
                }
            }

            string[] strCCEmail = Convert.ToString(ccMailIDs).Trim().Split(';');
            foreach (string email in strCCEmail)
            {
                if (!string.IsNullOrWhiteSpace(email))
                {
                    if (Convert.ToString(email).Trim() != "")
                    {
                        uniqueEmails.Add(email.Trim());
                    }
                }
            }

            foreach (string email in strtoEmail)
            {
                if (uniqueEmails.Contains(email))
                {
                    mail.To.Add(email);
                    uniqueEmails.Remove(email); // Remove it from uniqueEmails after adding to To
                    stoemailid = stoemailid + email + ";";
                }
            }

            foreach (string email in strCCEmail)
            {
                if (uniqueEmails.Contains(email))
                {
                    mail.CC.Add(email);
                    sccemailid = sccemailid + email + ";";
                }
            }

            // mail.To.Add("sanjauy.patil@highbartech.com");

            StringBuilder strsignature = new StringBuilder();

            mail.From = new MailAddress("noreply@highbartech.com", "OneHR");

            mail.Subject = strsubject;
            // mail.Body = "TO Mail ID :-" + stoemailid + "<br>  CC Mail id :" + sccemailid + Convert.ToString(strbody) + Convert.ToString(strsignature);
            mail.Body = Convert.ToString(strbody) + Convert.ToString(strsignature);
            mail.IsBodyHtml = true;
            mail.Priority = MailPriority.Low;

            foreach (string filePath in strattchfilepath)
            {
                Attachment attachment = new Attachment(filePath);
                mail.Attachments.Add(attachment);
            }

            using (SmtpClient smtp = new SmtpClient())
            {
                smtp.Host = "smtp.office365.com"; //Highbar SMTP

                smtp.Port = 587;
                smtp.TargetName = "STARTTLS/smtp.office365.com";
                smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                System.Net.NetworkCredential SMTPUserInfo = new System.Net.NetworkCredential("noreply@highbartech.com", "HBT@2019");
                smtp.UseDefaultCredentials = false;
                smtp.Credentials = SMTPUserInfo;
                smtp.EnableSsl = true;

                System.Net.ServicePointManager.SecurityProtocol |= System.Net.SecurityProtocolType.Tls | System.Net.SecurityProtocolType.Tls11 | System.Net.SecurityProtocolType.Tls12;
                smtp.Send(mail);
            }
            mail.Dispose();
        }
        catch (Exception)
        {

            throw;
        }
    }

    #endregion


    #region Leave_Module_Methods
    public DataTable getuserinfodetails(string stremploginid)
    {
        var parameters = new[]
        {
             new SqlParameter("@emploginid", stremploginid)
        };
        return ExecuteDataTable("getuserinfodetails", "usp_userlogin","", parameters, DBConnectionStrings.HRMSADMIN_SqlConnection);
    }
    public DataSet get_emp_workschdule(string strempcode, string strStype)
    {
        var parameters = new[]
        {
             new SqlParameter("@emp_code", strempcode),
             new SqlParameter("@stype", strStype)
        };
        return ExecuteDataSet("get_emp_workschdule", "Usp_getEmployee_Details_All", strStype, parameters);
    }
    public DataTable getDropdownList(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataTable("getDropdownList",strspname,"", parameters);
    }       
    public DataTable GetEmployeeData(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@EMP_CODE", empcode)
        };
        return ExecuteDataTable("GetEmployeeData","SP_GETEMPDETAILS","", parameters);
    }
    public DataSet GetEmployeeDataResign(string empcode)
    {

        var parameters = new[]
        {
             new SqlParameter("@EMP_CODE", empcode)
        };
        return ExecuteDataSet("GetEmployeeDataResign","SP_GETEMPDETAILS","", parameters);
    }
    public void send_mail_HR_ClearanceFormSubmited(string Emp_Name, string toMailIDs, string strsubject, string strmailmsg, String strlocation, string strdate)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();
            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr>  ");
            strbuild.Append("<td colspan=2></td></tr>");
            //strbuild.Append("<tr><td colspan=2 style='height:20px'></td></tr>");
            strbuild.Append("<tr><td colspan=2> Dear All, </td></tr><br></br></br>");
            strbuild.Append("<tr><td colspan=2> This is to inform you that " + Emp_Name + " has uploaded Clearance Form in OneHR. Please check & do the needful.</td></tr>");
            strbuild.Append("<tr><td colspan=2 style='height:20px'></td></tr>");
            strbuild.Append("<tr><td colspan=2>");
            strbuild.Append(strmailmsg);
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td colspan=2 style='height:20px'></td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("</table>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", strdate);
        }
        catch (Exception ex)
        {

        }
    }
    public DataTable GetLeaveBalance(string empcode)
    {
        var parameters = new[]
        {
             new SqlParameter("@EMP_CODE", empcode)
        };
        return ExecuteDataTable("GetLeaveBalance","SP_GETLEAVEBALANCE","", parameters);
    }
    public DataTable MyLeave_Req(string empcode)
    {
        var parameters = new[]
        {
             new SqlParameter("@EMP_CODE", empcode)
        };
        return ExecuteDataTable("MyLeave_Req", "SP_MANAGE_lEAVEREQUEST","", parameters);
    }
    public DataTable GetApproverName(string empcode)
    {
        var parameters = new[]
        {
             new SqlParameter("@EMP_CODE", empcode)
        };
        return ExecuteDataTable("GetApproverName", "SP_GETAPPROVERNAME","", parameters);
    }
    public DataTable GetIntermediateName(string empcode, int leaveconditiontypeid, string sgrade)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@EMP_CODE", empcode) 
        };
        if (Convert.ToString(leaveconditiontypeid).Trim() != "")
            parameters.Add(new SqlParameter("@CONDITIONTYPE", leaveconditiontypeid));

        if (Convert.ToString(sgrade).Trim() != "")
            parameters.Add(new SqlParameter("@grade", sgrade));

        return ExecuteDataTable("GetIntermediateName", "SP_GETINTERMEDIATERNAME","", parameters.ToArray());
    }
    public DataTable GetNextIntermediateName(int nxt_apprid, string reqid, string Reqempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@nextapprid", nxt_apprid),
            new SqlParameter("@req_id", reqid),
            new SqlParameter("@Reqemp_code", Reqempcode)
       };
        return ExecuteDataTable("GetNextIntermediateName", "SP_GETAPPINTERMIDATE","", parameters);
    }
    public DataTable GetApproverEmailID(string empcode, string Grade, int Leaveconditionid, string strleavetype, Decimal inoofdays)
    {
        var parameters = new[]
        {
            new SqlParameter("@Emp_code", empcode),
           new SqlParameter("@Grade", Grade),
           new SqlParameter("@Conditiontype_id", Leaveconditionid),
           new SqlParameter("@LeaveType", strleavetype),
           new SqlParameter("@noofdays", inoofdays)
        };
        return ExecuteDataTable("GetApproverEmailID", "SP_GETREQUESTERAPPMETRIX","", parameters);
    }

    public DataTable Get_HR_EmailID_ifLeaveRequestFromHR(string empcode, string Grade, int Leaveconditionid, string strleavetype, Decimal inoofdays)
    {
        var parameters = new[]
        {
            new SqlParameter("@Emp_code", empcode),
            new SqlParameter("@stype", strleavetype),
            new SqlParameter("@approver_type", Grade)
        };
        return ExecuteDataTable("Get_HR_EmailID_ifLeaveRequestFromHR","Usp_getEmployee_Details_All","", parameters);
    }

    public DataSet GetApproverEmailID_Attendance(string empcode, string Grade, int Leaveconditionid)
    {
        var parameters = new[]
        {
            new SqlParameter("@Emp_code", empcode),
            new SqlParameter("@Grade", Grade),
            new SqlParameter("@Conditiontype_id", Leaveconditionid)
        };
        return ExecuteDataSet("GetApproverEmailID_Attendance","SP_GETREQUESTERAPPMETRIX","", parameters);
    }

    public DataTable GetMaxRequestId()
    {
        return ExecuteDataTable("GetMaxRequestId","SP_GETMAXREQID","");
    }

    public DataTable GetLeaveType_OD_WFH(string Emp_code)
    {
        var parameters = new[]
        {
             new SqlParameter("@EMP_CODE", Emp_code)
        };
        return ExecuteDataTable("GetLeaveType_OD_WFH","SP_GETLEAVETYPE_OD_WFH","", parameters);
    }
    public DataTable GetLeaveType_HR(string Emp_code)
    {
        var parameters = new[]
       {
             new SqlParameter("@EMP_CODE", Emp_code)
       };
        return ExecuteDataTable("GetLeaveType_HR","SP_GETLEAVETYPE_HR","", parameters);
    }

    public DataTable GetLeaveType(string Emp_code)
    {
        var parameters = new[]
       {
            new SqlParameter("@EMP_CODE", Emp_code)
       };
        return ExecuteDataTable("GetLeaveType","SP_GETLEAVETYPE","", parameters);
    }

    public void CancelLeaveRequest(string Reqid, string Emp_Code, Double leavedays, int lvid, string strreasonCancel)
    {
        var parameters = new[]
        {
            new SqlParameter("@mode", "CANCEL"),
            new SqlParameter("@Emp_Code", Emp_Code),
            new SqlParameter("@Req_id", Reqid),
            new SqlParameter("@LeaveDays", leavedays),
            new SqlParameter("@Leave_Type", lvid),
            new SqlParameter("@Status_id", 3),
            new SqlParameter("@ReasonCancel", strreasonCancel)
        };
        ExecuteNonQuery("CancelLeaveRequest","sp_SaveLeave", "CANCEL", parameters);
    }

    public void Rrejectleaverequest(string reqid, string emp_code, Double leavedays, int apprid, int leaveid, string comments)
    {
        var parameters = new[]
        {
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@req_id", reqid),
            new SqlParameter("@leavedays", leavedays),
            new SqlParameter("@apprid", apprid),
            new SqlParameter("@Status_id", 4),
            new SqlParameter("@Leave_Type", leaveid),
            new SqlParameter("@comments", comments)
         };
        ExecuteNonQuery("Rrejectleaverequest","sp_UpdateLeaveRequest","", parameters);
    }

    public DataTable InsertLeaveRequest(string Emp_Code, int Leave_Type_id, int leaveconditionid, string Leave_FromDate, string Leave_From_for, string Leave_ToDate, string Leave_To_For, Double LeaveDays, string Reason, string filename)
    {
        var parameters = new[]
          {
            new SqlParameter("@mode", "INSERT"),
            new SqlParameter("@EMP_CODE", Emp_Code),
            new SqlParameter("@Appl_Type", 1),
            new SqlParameter("@Leave_Type", Leave_Type_id),
            new SqlParameter("@LeaveConditionTypeid", leaveconditionid),
            new SqlParameter("@Leave_FromDate", Leave_FromDate),//Leave_FromDate
            new SqlParameter("@Leave_ToDate", Leave_ToDate), //Leave_ToDate
            new SqlParameter("@Leave_For", Leave_From_for),
            new SqlParameter("@Leave_To", Leave_To_For),
            new SqlParameter("@LeaveDays", LeaveDays),
            new SqlParameter("@Reason", Reason),
            new SqlParameter("@UploadFile", string.IsNullOrWhiteSpace(filename) ? DBNull.Value :(object)filename),
            new SqlParameter("@Status_id", 1)
        };
        return ExecuteDataTable("InsertLeaveRequest","sp_SaveLeave", "INSERT", parameters);
    }

    public DataTable InsertLeaveRequest_HR(string Emp_Code, int Leave_Type_id, int leaveconditionid, string Leave_FromDate, string Leave_From_for, string Leave_ToDate, string Leave_To_For, Double LeaveDays, string Reason, string filename)
    {
        var parameters = new[]
        {
            new SqlParameter("@mode", "INSERT"),
            new SqlParameter("@EMP_CODE", Emp_Code),
            new SqlParameter("@Appl_Type", 1),
            new SqlParameter("@Leave_Type", Leave_Type_id),
            new SqlParameter("@LeaveConditionTypeid", leaveconditionid),
            new SqlParameter("@Leave_FromDate", Leave_FromDate),//Leave_FromDate
            new SqlParameter("@Leave_ToDate", Leave_ToDate), //Leave_ToDate
            new SqlParameter("@Leave_For", Leave_From_for),
            new SqlParameter("@Leave_To", Leave_To_For),
            new SqlParameter("@LeaveDays", LeaveDays),
            new SqlParameter("@Reason", Reason),
            new SqlParameter("@UploadFile", string.IsNullOrWhiteSpace(filename) ? DBNull.Value : (object)filename),
            new SqlParameter("@Status_id", 2)
        };
        return ExecuteDataTable("InsertLeaveRequest_HR","sp_SaveLeave", "INSERT", parameters);
    }

    public DataTable InsertLeaveEncashment(string Emp_Code, int Leave_Type_id, int leaveconditionid, string Leave_FromDate, string Leave_From_for, string Leave_ToDate, string Leave_To_For, Double LeaveDays, string Reason, string filename)
    {
        var parameters = new[]
        {
            new SqlParameter("@mode", "INSERT"),
            new SqlParameter("@EMP_CODE", Emp_Code),
            new SqlParameter("@Appl_Type", 1),
            new SqlParameter("@Leave_Type", Leave_Type_id),
            new SqlParameter("@LeaveConditionTypeid", leaveconditionid),
            new SqlParameter("@Leave_For", Leave_From_for),
            new SqlParameter("@Leave_To", Leave_To_For),
            new SqlParameter("@LeaveDays", LeaveDays),
            new SqlParameter("@Reason", Reason),
            new SqlParameter("@Status_id", 1)
        };
        return ExecuteDataTable("InsertLeaveEncashment","sp_SaveLeave", "INSERT", parameters);
    }

    public DataSet InsertAttendanceRequest(string Emp_Code, string req_dt)
    {
        var parameters = new[]
        {
            new SqlParameter("@mode", "INSERT"),
            new SqlParameter("@EMP_CODE", Emp_Code),
            new SqlParameter("@req_dt", req_dt),//req_dt
            new SqlParameter("@is_exprt_sap", "False"),
            new SqlParameter("@att_status", 1)
        };
        return ExecuteDataSet("InsertAttendanceRequest","sp_SaveAttendance", "INSERT", parameters);
    }

    public void InsertApproverRequest(string apprcode, int apprid, decimal MaxRequestId)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", "INSERT"),
            new SqlParameter("@REQ_ID", MaxRequestId),
            new SqlParameter("@APPR_EMP_CODE", apprcode),
            new SqlParameter("@Action", "Pending"),
            new SqlParameter("@SYSTEM_APP", "N"),
            new SqlParameter("@APPR_ID", apprid)
        };
        ExecuteNonQuery("InsertApproverRequest","SP_SAVE_APPR_STATUS", "INSERT", parameters);
    }
    public void InsertApproverRequest_HR(string apprcode, int apprid, decimal MaxRequestId, string strHrComments)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", "INSERT_HR"),
            new SqlParameter("@REQ_ID", MaxRequestId),
            new SqlParameter("@APPR_EMP_CODE", apprcode),
            new SqlParameter("@Action", "Approved"),
            new SqlParameter("@SYSTEM_APP", "N"),
            new SqlParameter("@APPR_ID", apprid),
            new SqlParameter("@finalstatus", strHrComments)
        };
        ExecuteNonQuery("InsertApproverRequest_HR","SP_SAVE_APPR_STATUS", "INSERT_HR", parameters);
    }

    public void InsertAtt_ApproverRequest(string apprcode, int apprid, decimal MaxRequestId)
    {
        var parameters = new[]
        {
           new SqlParameter("@QUERYMODE", "INSERT"),
           new SqlParameter("@REQ_ID", MaxRequestId),
           new SqlParameter("@APPR_EMP_CODE", apprcode),
           new SqlParameter("@Action", "Pending"),
           new SqlParameter("@SYSTEM_APP", "N"),
           new SqlParameter("@APPR_ID", apprid)
       };
        ExecuteNonQuery("InsertAtt_ApproverRequest","SP_SAVE_ATTENDANCE_APPR_STATUS", "INSERT", parameters);
    }
    public void UpdateAppRequest(decimal reqid, string status, string comment, string finalstatus, int apprid)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@QUERYMODE", "UPDATE"),
            new SqlParameter("@REQ_ID", reqid),
            new SqlParameter("@ACTION", status),
            new SqlParameter("@appr_comments", comment),            
            new SqlParameter("@APPR_ID", apprid)
        };
        if (Convert.ToString(finalstatus).Trim() != "")
            parameters.Add(new SqlParameter("@finalstatus", finalstatus));

        ExecuteNonQuery("UpdateAppRequest","SP_SAVE_APPR_STATUS", "UPDATE", parameters.ToArray());
    }
    public void UpdateENCASHMENTRequest(decimal reqid, string status, string comment, string finalstatus, int apprid)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@QUERYMODE", "Encashment"),
            new SqlParameter("@REQ_ID", reqid),
            new SqlParameter("@ACTION", status),
            new SqlParameter("@appr_comments", comment),            
            new SqlParameter("@APPR_ID", apprid)
        };
        if (Convert.ToString(finalstatus).Trim() != "")
            parameters.Add(new SqlParameter("@finalstatus", finalstatus));

        ExecuteNonQuery("UpdateENCASHMENTRequest","SP_SAVE_APPR_STATUS", "Encashment", parameters.ToArray());
    }
    public void Update_Attendance_AppRequest(decimal reqid, string status, string comment, string finalstatus, int apprid)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@QUERYMODE", "UPDATE"),
            new SqlParameter("@REQ_ID", reqid),
            new SqlParameter("@ACTION", status),
            new SqlParameter("@appr_comments", comment),            
            new SqlParameter("@APPR_ID", apprid)
        };
        if (Convert.ToString(finalstatus).Trim() != "")
            parameters.Add(new SqlParameter("@finalstatus",finalstatus));

        ExecuteNonQuery("Update_Attendance_AppRequest","SP_SAVE_ATTENDANCE_APPR_STATUS", "UPDATE", parameters.ToArray());
    }
    public DataTable GetLeaveStatus(string Reqid)
    {
        var parameters = new[]
       {
             new SqlParameter("@req_id", Reqid)
        };
        return ExecuteDataTable("GetLeaveStatus","sp_GetLeaveStatus","", parameters);
    }
    public DataTable GetAppChain(string Reqid, string strempcode)
    {
        var parameters = new[]
        {
             new SqlParameter("@REQ_ID", Reqid),
             new SqlParameter("@EMPCODE", strempcode)
        };
        return ExecuteDataTable("GetAppChain","SP_GETAPPROVERCHAIN","", parameters);
    }
    public void UpdateLeaveRequest(string empcode, string reqid, string Leave_FromDate, string Leave_From_for, string Leave_ToDate, string Leave_To_For, Double LeaveDays, string Reason, Double LeaveDays_old, int lvid, int leaveconditionid, string strfilename)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Emp_Code", empcode),
            new SqlParameter("@Req_id", reqid),
            new SqlParameter("@Leave_Type", lvid),
            new SqlParameter("@Leave_FromDate", Leave_FromDate),//Leave_FromDate
            new SqlParameter("@Leave_ToDate", Leave_ToDate), //Leave_ToDate
            new SqlParameter("@Leave_For", Leave_From_for),
            new SqlParameter("@Leave_To", Leave_To_For),
            new SqlParameter("@LeaveDays", LeaveDays),
            new SqlParameter("@LeaveDays_old", LeaveDays_old),
            new SqlParameter("@Reason", Reason), 
            new SqlParameter("@Status_id", 1),
            new SqlParameter("@mode", "UPDATE"),
            new SqlParameter("@LeaveConditionTypeid", leaveconditionid)
        };
        if (Convert.ToString(strfilename).Trim() != "")
            parameters.Add(new SqlParameter("@UploadFile", strfilename));

        ExecuteNonQuery("UpdateLeaveRequest","sp_SaveLeave", "UPDATE", parameters.ToArray());
    }
    public void UpdateLeaveEncashment(string empcode, string reqid, string Leave_FromDate, string Leave_From_for, string Leave_ToDate, string Leave_To_For, Double LeaveDays, string Reason, Double LeaveDays_old, int lvid, int leaveconditionid, string strfilename)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Emp_Code", empcode),
            new SqlParameter("@Req_id", reqid),
            new SqlParameter("@Leave_Type", lvid),
            new SqlParameter("@Leave_For", Leave_From_for),
            new SqlParameter("@Leave_To", Leave_To_For),
            new SqlParameter("@LeaveDays", LeaveDays),
            new SqlParameter("@LeaveDays_old", LeaveDays_old),
            new SqlParameter("@Reason", Reason), 
            new SqlParameter("@Status_id", 1),
            new SqlParameter("@mode", "UPDATE"),
            new SqlParameter("@LeaveConditionTypeid", leaveconditionid)
        };

        if (Convert.ToString(strfilename).Trim() != "")
            parameters.Add(new SqlParameter("@UploadFile", strfilename));

        ExecuteDataSet("UpdateLeaveEncashment","sp_SaveLeave", "UPDATE", parameters.ToArray());
    }
    public DataTable GetCurrentApprID(string Reqid, string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Req_id", Reqid),
            new SqlParameter("@empcode", strempcode)
        };
        return ExecuteDataTable("GetCurrentApprID","Sp_getCurrentApprID","", parameters);
    }
    public DataTable GetCurrentApprID_Attendance(string Reqid, string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Req_id", Reqid),
            new SqlParameter("@empcode", strempcode)
        };
        return ExecuteDataTable("GetCurrentApprID_Attendance","Sp_getCurrentApprID_attendance","", parameters);

    }
    public DataTable GetEmployeeData_Email(string email_Id)
    {
        var parameters = new[]
       {
            new SqlParameter("@stype", "get_employee_details_bylogin_id"),
            new SqlParameter("@emp_login_id", email_Id)
       };
        return ExecuteDataTable("GetEmployeeData_Email","Usp_getEmployee_Details_All", "get_employee_details_bylogin_id", parameters);
    }
    public DataTable LeaveCalculation(string empcode, int leavetypeid)
    {
        var parameters = new[]
       {
            new SqlParameter("@EMPCODE", empcode),
            new SqlParameter("@LEAVETYPEID", leavetypeid)
       };
        return ExecuteDataTable("LeaveCalculation","SP_LEAVECALCULATION","", parameters);
    }
    public DataTable GetHolidayDate(string FromDate, string ToDate)
    {
        var parameters = new[]
       {
          new SqlParameter("@from_date", FromDate),
          new SqlParameter("@to_date", ToDate)
       };
        return ExecuteDataTable("GetHolidayDate","SP_GETHOLIDAYS","", parameters);
    }
    public int GetWeekends(DateTime startdate, DateTime endDate)
    {

        TimeSpan diff = endDate - startdate;
        int days = diff.Days;
        int count = 0;
        for (var i = 0; i <= days; i++)
        {
            var testDate = startdate.AddDays(i);
            switch (testDate.DayOfWeek)
            {
                case DayOfWeek.Saturday:
                case DayOfWeek.Sunday:

                    //  Response.Write(testDate.ToShortDateString());

                    count++;
                    break;
            }
        }
        return count;
    }
    public DataSet GetLeaveDetails(string FromDate, string ToDate, int leavetype, string emp_code, string strreqid, string strfromfor, string strtofor, string strPLwithSL)
    {

        string strType = "";
        if (leavetype == 1)
            strType = "[Usp_getLeaveDays_PL]";
        if (leavetype == 2)
            strType = "[Usp_getLeaveDays_SL]";
        if (leavetype == 3)
            strType = "[Usp_getLeaveDays_ML]";
        if (leavetype == 4)
            strType = "Usp_getLeaveDays_LWP";
        if (leavetype == 5)
            strType = "[Usp_getLeaveDays_TO]";
        if (leavetype == 7)
            strType = "[Usp_getLeaveDays_OD_WFH]";
        if (leavetype == 8)
            strType = "[Usp_getLeaveDays_OD_WFH]";
        if (leavetype == 12)
            strType = "[Usp_getLeaveDays_OL]";
        if (leavetype == 13)
            strType = "[Usp_getLeaveDays_ASL]";

        var parameters = new[]
        {
            new SqlParameter("@fromdate", FromDate),
            new SqlParameter("@todate", ToDate),
            new SqlParameter("@LeaveType", leavetype),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@req_id", string.IsNullOrWhiteSpace(strreqid) ? DBNull.Value :(object)strreqid),
            new SqlParameter("@fromfor", strfromfor),
            new SqlParameter("@toforfor", strtofor),
            new SqlParameter("@PLwithSL", string.IsNullOrWhiteSpace(strPLwithSL) ? DBNull.Value :(object)strPLwithSL)
       };
        return ExecuteDataSet("GetLeaveDetails",strType, strType, parameters);
    }
    public DataSet GetLeaveDetails_Site(string FromDate, string ToDate, int leavetype, string emp_code, string strreqid, string strfromfor, string strtofor, string strPLwithSL)
    {
        string strType = "";
        if (leavetype == 1)
            strType = "[Usp_getLeaveDays_PL_6]";
        if (leavetype == 2)
            strType = "[Usp_getLeaveDays_SL_6]";
        if (leavetype == 3)
            strType = "[Usp_getLeaveDays_ML_6]";
        if (leavetype == 4)
            strType = "Usp_getLeaveDays_LWP_6";
        if (leavetype == 5)
            strType = "[Usp_getLeaveDays_TO_6]";
        if (leavetype == 13)
            strType = "[Usp_getLeaveDays_ASL_6]";

        var parameters = new[]
        {
            new SqlParameter("@fromdate", FromDate),
            new SqlParameter("@todate", ToDate),
            new SqlParameter("@LeaveType", leavetype),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@req_id", string.IsNullOrWhiteSpace(strreqid) ? DBNull.Value :(object)strreqid),
            new SqlParameter("@fromfor", strfromfor),
            new SqlParameter("@toforfor", strtofor),
            new SqlParameter("@PLwithSL", string.IsNullOrWhiteSpace(strPLwithSL) ? DBNull.Value :(object)strPLwithSL)

        };
        return ExecuteDataSet("GetLeaveDetails_Site",strType, strType, parameters);
    }
    public DataSet GetLeaveDetails_EN(string FromDate, string ToDate, int leavetype, string emp_code, string strreqid, string strfromfor, string strtofor, string strPLwithSL, Double tdays)
    {
        var parameters = new[]
       {
            new SqlParameter("@fromdate", FromDate),
            new SqlParameter("@todate", ToDate),
            new SqlParameter("@LeaveType", leavetype),
            new SqlParameter("@NoOfDays", tdays),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@req_id", string.IsNullOrWhiteSpace(strreqid) ? DBNull.Value : (object)strreqid),
            new SqlParameter("@fromfor", strfromfor),
            new SqlParameter("@toforfor", strtofor),
            new SqlParameter("@PLwithSL", string.IsNullOrWhiteSpace(strPLwithSL) ? DBNull.Value :(object)strPLwithSL)
        };
        return ExecuteDataSet("GetLeaveDetails_EN","Usp_getLeaveDays_EN","", parameters);
    }
    public DataTable GetLeaveInbox(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@qtype", "getAllRequest")
        };
        return ExecuteDataTable("GetLeaveInbox","SP_GETLEAVEINBOX", "getAllRequest",parameters);
    }
    public DataTable Get_OD_WFH_Inbox(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@qtype", "getAll_OD_WFH")
        };
        return ExecuteDataTable("Get_OD_WFH_Inbox","SP_GETLEAVEINBOX", "getAll_OD_WFH", parameters);
    }
    public int GetLeaveInboxCount(string empcode)
    {
        int RequestCount = 0;
        DataTable dtlvInbox = new DataTable();
        var parameters = new[]
        {
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@qtype", "getLeaveCount")
        };
        dtlvInbox = ExecuteDataTable("GetLeaveInboxCount","SP_GETLEAVEINBOX", "getLeaveCount", parameters);
        if (dtlvInbox.Rows.Count > 0)
        {
            RequestCount = (int)dtlvInbox.Rows[0]["TotalCount"];
        }
        return RequestCount;
    }
    public int Get_OD_WFH_InboxCount(string empcode)
    {
        int RequestCount = 0;
        DataTable dtlvInbox = new DataTable();
        var parameters = new[]
        {
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@qtype", "get_OD_WFH_Count")
        };
        dtlvInbox = ExecuteDataTable("Get_OD_WFH_InboxCount","SP_GETLEAVEINBOX", "get_OD_WFH_Count", parameters);
        if (dtlvInbox.Rows.Count > 0)
        {
            RequestCount = (int)dtlvInbox.Rows[0]["TotalCount"];
        }
        return RequestCount;
    }
    public DataTable CheckApprovers(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Approver_Or_Employee"),
            new SqlParameter("@emp_code", empcode)
        };
        return ExecuteDataTable("CheckApprovers","Sp_getAppOREmp", "get_Approver_Or_Employee", parameters);
    }
    public DataTable CheckHOD(string empcode)
    {
        var parameters = new[]
        {
        new SqlParameter("@stype", "get_HOD"),
        new SqlParameter("@emp_code", empcode)
        };
        return ExecuteDataTable("CheckHOD","Sp_getAppOREmp", "get_HOD", parameters);
    }
    public int getAttendance_InboxList_Count(string empcode)
    {
        int RequestCount = 0;
        DataTable dtAttlvInbox = new DataTable();
        var parameters = new[]
        {
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@stype", "get_emp_Regularise_atten_approver_inboxlst_cnt")
        };
        dtAttlvInbox = ExecuteDataTable("getAttendance_InboxList_Count","Usp_getEmployee_Details_All", "get_emp_Regularise_atten_approver_inboxlst_cnt", parameters);
        if (dtAttlvInbox.Rows.Count > 0)
        {
            RequestCount = (int)dtAttlvInbox.Rows[0]["attendcnt"];
        }
        return RequestCount;
    }
    
    #region Sanjay_Methods
    
    public DataTable GetCurrentApprID_LRCancellation(string Reqid, string strempcode)
    {
        var parameters = new[]
        {
          new SqlParameter("@Req_id", Reqid),
          new SqlParameter("@stype", "Sp_getCurrentApprID_LRCancellation"),
          new SqlParameter("@emp_code_approver", strempcode)
        };
        return ExecuteDataTable("GetCurrentApprID_LRCancellation","Usp_getEmployee_Details_All", "Sp_getCurrentApprID_LRCancellation", parameters);
    }
    public DataSet getOD_WFH_MngList(string empcode)
    {
        var parameters = new[]
        {
          new SqlParameter("@stype", "OD_WFH_MngList"),
          new SqlParameter("@emp_code", empcode)
       };
        return ExecuteDataSet("getOD_WFH_MngList","Usp_getDetails_leaves", "OD_WFH_MngList", parameters);
    }
    public DataSet getLeaveRequest_MngList(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "LeaveRequest_MngList"),
            new SqlParameter("@emp_code", empcode)
        };
        return ExecuteDataSet("getLeaveRequest_MngList","Usp_getDetails_leaves", "LeaveRequest_MngList",parameters);
    }
    public DataSet getLeaveRequest_MngEdit(string Reqid)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "LeaveRequest_Mng_Edit"),
             new SqlParameter("@Req_id", string.IsNullOrWhiteSpace(Reqid) ? DBNull.Value :(object)Reqid)
        };
        return ExecuteDataSet("getLeaveRequest_MngEdit","Usp_getDetails_leaves", "LeaveRequest_Mng_Edit",parameters);
    }
    public DataTable GetApproverStatus(string empcode, string Reqid, int leaveid, string strleavetype, Decimal inoofDays)
    {
        var parameters = new List<SqlParameter>
        {
           new SqlParameter("@emp_code", empcode),
           new SqlParameter("@REQID", Reqid),
           new SqlParameter("@leaveConditionTypeid", leaveid),
           new SqlParameter("@noofdays", inoofDays)
        };

        if (Convert.ToString(leaveid).Trim() != "")        
            parameters.Add(new SqlParameter("@LeaveType", strleavetype));
       
        else
            parameters.Add(new SqlParameter("@LeaveType", DBNull.Value));

        return ExecuteDataTable("GetApproverStatus","GETAPPROVERSTATUS","", parameters.ToArray());
    }
    public DataTable GetApproverStatus_LeaveCancellation(string empcode, string Reqid, int leaveid, string strleavetype, Decimal inoofDays)
    {
        var parameters = new List<SqlParameter>
        {
           new SqlParameter("@emp_code", empcode),
           new SqlParameter("@REQID", Reqid),
           new SqlParameter("@leaveConditionTypeid", leaveid),
           new SqlParameter("@noofdays", inoofDays)
        };
        if (Convert.ToString(leaveid).Trim() != "")
            parameters.Add(new SqlParameter("@LeaveType", strleavetype));
        else
            parameters.Add(new SqlParameter("@LeaveType", DBNull.Value));

        return ExecuteDataTable("GetApproverStatus_LeaveCancellation", "GET_LevaeCancellation_APPROVERSTATUS", "", parameters.ToArray());
    }
    public DataTable GetNextApproverDetails(string empcode, string Reqid, int leaveid)
    {
        var parameters = new[]
        {
           new SqlParameter("@stype", "get_NextApproverDetails_mail"),
           new SqlParameter("@emp_code", empcode),
           new SqlParameter("@Req_id", string.IsNullOrWhiteSpace(Reqid) ? DBNull.Value :(object)Reqid),
           new SqlParameter("@Leavetype_id", leaveid)
         };
        return ExecuteDataTable("GetNextApproverDetails","Usp_getDetails_leaves", "get_NextApproverDetails_mail", parameters);
    }
    public DataTable GetNextApproverDetails_Attendance(string empcode, string Reqid, int leaveid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_NextApproverDetails_mail_Attendance"),
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@Req_id", string.IsNullOrWhiteSpace(Reqid) ? DBNull.Value :(object)Reqid),
            new SqlParameter("@Leavetype_id", leaveid)
        };
        return ExecuteDataTable("GetNextApproverDetails_Attendance","Usp_getDetails_leaves", "get_NextApproverDetails_mail_Attendance", parameters);
    }
    public DataTable GetApproverDetails_Rejection_cancellation(string empcode, string Reqid, int leaveid, string stype)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@Req_id", string.IsNullOrWhiteSpace(Reqid) ? DBNull.Value :(object)Reqid),            
            new SqlParameter("@Leavetype_id", leaveid)
         };
        return ExecuteDataTable("GetApproverDetails_Rejection_cancellation","Usp_getDetails_leaves", stype, parameters);
    }
    public DataTable GetPreviousApproverDetails(string strempcode, string Reqid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_PreviousApproverDetails_mail"),
            new SqlParameter("@emp_code", strempcode),
            new SqlParameter("@Req_id", string.IsNullOrWhiteSpace(Reqid) ? DBNull.Value :(object)Reqid)
         };
        return ExecuteDataTable("GetPreviousApproverDetails","Usp_getDetails_leaves", "get_PreviousApproverDetails_mail", parameters);
    }
    public DataTable GetPreviousApproverDetails_Attendance(string strempcode, string Reqid, string strapprempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_PreviousAppeover_mails_attendance"),
            new SqlParameter("@emp_code", strempcode),
            new SqlParameter("@Req_id", string.IsNullOrWhiteSpace(Reqid) ? DBNull.Value :(object)Reqid),
            new SqlParameter("@Apremp_code", strapprempcode)
        };
        return ExecuteDataTable("GetPreviousApproverDetails_Attendance","Usp_getDetails_leaves", "get_PreviousAppeover_mails_attendance", parameters);
    }
    public DataTable GetPreviousIntermidaterDetails(int apprid, string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_PreviousIntermidaterDetails_mail"),
            new SqlParameter("@Req_id", apprid),
            new SqlParameter("@emp_code", strempcode)
        };
        return ExecuteDataTable("GetPreviousIntermidaterDetails","Usp_getDetails_leaves", "get_PreviousIntermidaterDetails_mail", parameters);
    }
    public DataSet getAttendanceRegularisation_Edit(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_emp_attendance_lst_Regularise"),
            new SqlParameter("@emp_code", empcode)
        };
        return ExecuteDataSet("getAttendanceRegularisation_Edit","Usp_getEmployee_Details_All", "get_emp_attendance_lst_Regularise", parameters);
    }
    public Int32 add_Regularise_Attendance_emp(string strsql)
    {
        SqlTransaction strans;
        SqlCommand sCommand;
        Int32 rec = 0;

        SqlConnection scon     = new SqlConnection(ConfigurationManager.ConnectionStrings["sqlconnection"].ToString());
        if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
            scon.Open();

        strans = scon.BeginTransaction();
        try
        {
            sCommand = new SqlCommand();
            sCommand.Connection = scon;
            sCommand.CommandText = Convert.ToString(strsql).Trim();
            sCommand.CommandType = CommandType.Text;
            sCommand.Transaction = strans;
            rec = sCommand.ExecuteNonQuery();
            strans.Commit();
            scon.Close();
        }
        catch (Exception ex)
        {
            strans.Rollback();
        }
        finally
        {
            scon.Close();
        }
        return rec;
    }
    public DataSet getAttendance_MngList(string empcode)
    {
        var parameters = new[]
       {
            new SqlParameter("@stype", "get_emp_attendance_lst_mng"),
            new SqlParameter("@emp_code", empcode)
       };
        return ExecuteDataSet("getAttendance_MngList","Usp_getEmployee_Details_All", "get_emp_attendance_lst_mng", parameters);
    }
    public DataSet getAttendanceRequest_MngEdit(string empcode, string reqid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_emp_attendance_lst_edit"),
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@req_id", reqid)
        };
        return ExecuteDataSet("getAttendanceRequest_MngEdit","Usp_getEmployee_Details_All", "get_emp_attendance_lst_edit", parameters);
    }
    public DataSet getAttendance_TypeList(string AttType, string StrinOut)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "Attendance_LeaveList"),
            new SqlParameter("@ext_appr", AttType),
            new SqlParameter("@apprvr_type", StrinOut)
        };
        return ExecuteDataSet("getAttendance_TypeList","Usp_getDetails_leaves", "Attendance_LeaveList", parameters);
    }
    public DataSet getEmp_immediateApprover_id(string empcode)
    {
        var parameters = new[]
        {
           new SqlParameter("@stype", "get_emp_immediate_approver_mail"),
           new SqlParameter("@emp_code", empcode)
        };
        return ExecuteDataSet("getEmp_immediateApprover_id","Usp_getEmployee_Details_All", "get_emp_immediate_approver_mail", parameters);
    }
    public DataSet getAttendance_InboxList(string empcode)
    {
        var parameters = new[]
        {
           new SqlParameter("@stype", "get_emp_Regularise_atten_approver_inboxlst"),
           new SqlParameter("@emp_code", empcode)
        };
        return ExecuteDataSet("getAttendance_InboxList","Usp_getEmployee_Details_All", "get_emp_Regularise_atten_approver_inboxlst",parameters);
    }
    public DataSet getApprover_Codes_ApprovalStatus(string empcode, string sappempcode, string attndt)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_attendane_list_checkApprovalstatus"),
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@emp_code_approver", sappempcode),
            new SqlParameter("@att_date", attndt)
        };
        return ExecuteDataSet("getApprover_Codes_ApprovalStatus","Usp_get_Approver_EmpAttendance_list", "get_attendane_list_checkApprovalstatus", parameters);
    }
    public DataSet get_Approvers_Attendance_Arppoval(string empcode, string reqid, Int32 strApprid_F, Int32 strApprid_S, Int32 strApprid_T, Int32 icurntApprid)
    {
        var parameters = new[]
        {
        new SqlParameter("@stype", "get_approval_Status_for_Attendance"),
        new SqlParameter("@appr_id_F", strApprid_F),
        new SqlParameter("@appr_id_S", strApprid_S),
        new SqlParameter("@appr_id_T", strApprid_T),
        new SqlParameter("@appr_id_Curnt", icurntApprid),
        new SqlParameter("@emp_code", empcode),
        new SqlParameter("@req_id", reqid)
        };
        return ExecuteDataSet("get_Approvers_Attendance_Arppoval","Usp_get_Approver_EmpAttendance_list", "get_approval_Status_for_Attendance", parameters);
    }
    public DataSet getNxtApprover_Codes(string empcode, string sappempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_nxtApprover_id_Attendance"),
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@emp_code_approver", sappempcode)
        };
        return ExecuteDataSet("getNxtApprover_Codes","Usp_getEmployee_Details_All", "get_nxtApprover_id_Attendance", parameters);
    }
    public DataTable GetApproverStatus_Cancellation(string empcode, string Reqid, int leaveid, string strleavetype, Decimal inoofDays)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@REQID", Reqid),
            new SqlParameter("@leaveConditionTypeid", leaveid),
            new SqlParameter("@noofdays", inoofDays)
        };
        if (Convert.ToString(leaveid).Trim() != "")        
            parameters.Add(new SqlParameter("@LeaveType", strleavetype));
        else
            parameters.Add(new SqlParameter("@LeaveType", DBNull.Value));

        return ExecuteDataTable("GetApproverStatus_Cancellation","GETAPPROVERSTATUS_Cancellation","", parameters.ToArray());
    }
    public DataSet getLeaveRequest_MngEdit_Cancellation(string Reqid)
    {
        var parameters = new[]
        {
        new SqlParameter("@stype", "Cancellation_LeaveRequest_Mng_Edit"),
        new SqlParameter("@Req_id", string.IsNullOrWhiteSpace(Reqid) ? DBNull.Value :(object)Reqid)
        };
        return ExecuteDataSet("getLeaveRequest_MngEdit_Cancellation","Usp_getDetails_leaves", "Cancellation_LeaveRequest_Mng_Edit", parameters);
    }
    public DataTable GetNextApproverDetails_LRCancellation(string empcode, string Reqid, int leaveid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_NextApproverDetails_mail_LRCancellation"),
            new SqlParameter("@emp_code", empcode),            
            new SqlParameter("@Req_id", string.IsNullOrWhiteSpace(Reqid) ? DBNull.Value :(object)Reqid),
            new SqlParameter("@Leavetype_id", leaveid)
        };
        return ExecuteDataTable("GetNextApproverDetails_LRCancellation","Usp_getDetails_leaves", "get_NextApproverDetails_mail_LRCancellation", parameters);
    }
    public DataTable GetPreviousApproverDetails_LRCancellation(string strempcode, string Reqid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_PreviousApproverDetails_mail_LRCancellation"),
            new SqlParameter("@emp_code", strempcode),
            new SqlParameter("@Req_id", string.IsNullOrWhiteSpace(Reqid) ? DBNull.Value :(object)Reqid)
        };
        return ExecuteDataTable("GetPreviousApproverDetails_LRCancellation","Usp_getDetails_leaves", "get_PreviousApproverDetails_mail_LRCancellation", parameters);
    }
    public void UpdateAppRequest_Cancellation(decimal reqid, string status, string comment, string finalstatus, int apprid)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@QUERYMODE", "UPDATE_LRC"),
            new SqlParameter("@REQ_ID", reqid),
            new SqlParameter("@ACTION", status),
            new SqlParameter("@appr_comments", comment),            
            new SqlParameter("@APPR_ID", apprid)
        };
        if (Convert.ToString(finalstatus).Trim() != "")
            parameters.Add(new SqlParameter("@finalstatus", finalstatus));

        ExecuteNonQuery("UpdateAppRequest_Cancellation","SP_SAVE_APPR_STATUS", "UPDATE_LRC", parameters.ToArray());
    }
    public void InsertApproverRequest_Cancellation(string apprcode, int apprid, decimal MaxRequestId)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", "INSERT_CAN"),
            new SqlParameter("@REQ_ID", MaxRequestId),
            new SqlParameter("@APPR_EMP_CODE", apprcode),
            new SqlParameter("@Action", "Pending"),
            new SqlParameter("@SYSTEM_APP", "N"),
            new SqlParameter("@APPR_ID", apprid)
        };
        ExecuteNonQuery("InsertApproverRequest_Cancellation","SP_SAVE_APPR_STATUS", "INSERT_CAN", parameters);
    }        
    public void Cancel_Approved_LeaveRequest(string Reqid, string Emp_Code, Double leavedays, int lvid, string strreasonCancel, string strapprcode, int iapprid)
    {
        var parameters = new[]
        {
           new SqlParameter("@mode", "Canc_AprLR"),
           new SqlParameter("@Emp_Code", Emp_Code),
           new SqlParameter("@Req_id", Reqid),
           new SqlParameter("@LeaveDays", leavedays),
           new SqlParameter("@Leave_Type", lvid),
           new SqlParameter("@Status_id", 3),
           new SqlParameter("@ReasonCancel", strreasonCancel),
           new SqlParameter("@appemp_code", strapprcode),
           new SqlParameter("@apprid", iapprid)
        };
        ExecuteNonQuery("Cancel_Approved_LeaveRequest","sp_SaveLeave", "Canc_AprLR", parameters);
    }
    public void Reject_Approved_LeaveRequest(string Reqid, string Emp_Code, Double leavedays, int lvid, string strreasonCancel, string strapprcode, int iapprid)
    {
        var parameters = new[]
        {
           new SqlParameter("@mode", "Rejt_AprLR"),
           new SqlParameter("@Req_id", Reqid),
           new SqlParameter("@Status_id", 3),
           new SqlParameter("@ReasonCancel", strreasonCancel),
           new SqlParameter("@apprid", iapprid)
       };
        ExecuteNonQuery("Reject_Approved_LeaveRequest","sp_SaveLeave", "Rejt_AprLR", parameters);
    }

    #region Attendance E-mail to Approver
    public void send_mailto_Attenance_RM_Approver(string Emp_Name, string toMailIDs, string strsubject, string strmailmsg, String strLeaveReqstURL, string strApproverList)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr>  ");
            strbuild.Append("<td colspan=2></td></tr>");
            strbuild.Append("<tr><td colspan=2 style='height:20px'></td></tr>");
            strbuild.Append("<tr><td colspan=2> " + Emp_Name + " has applied for attendance regularisation as per the details below. Request your approval please.</td></tr>");
            strbuild.Append("<tr><td colspan=2 style='height:20px'></td></tr>");
            strbuild.Append("<tr><td colspan=2>");
            strbuild.Append(strmailmsg);
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td colspan=2 style='height:20px'></td></tr>");
            if (Convert.ToString(strApproverList).Trim() != "")
            {
                strbuild.Append("<tr><td style='width:50px'>Status : </td><td align='left'> " + strApproverList + "</td></tr>");
                strbuild.Append("<tr><td colspan=2 style='height:20px'></td></tr>");
            }
            //strbuild.Append("<tr><td style='height:20px'><a herf='#' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
            strbuild.Append("<tr><td  colspan=2 style='height:20px'><a href='" + strLeaveReqstURL + "'> Please click here to review / approve </a></td></tr>");

            strbuild.Append("</table>");

            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region Attendance E-mail to Previous Approver
    public void send_mailto_Attenance_Previous_RM_Approver(string Emp_Name, string toMailIDs, string strsubject, string strmailmsg, string sccmails, string strApproverList)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td colspan=2>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td colspan=2 style='height:20px'></td></tr>");
            strbuild.Append("<tr><td colspan=2> " + Emp_Name + " has applied for attendance regularisation as per the details below. </td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td colspan=2> ");
            strbuild.Append(strmailmsg);
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td  colspan=2 style='height:20px'></td></tr>");
            //strbuild.Append("<tr><td style='height:20px'><a herf='#' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
            strbuild.Append("<tr><td style='width:50px'>Status : </td><td align='left'>" + strApproverList + "</td></tr>");
            strbuild.Append("<tr><td colspan=2> For your information please.</td></tr>");
            strbuild.Append("</table>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", sccmails);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region Attendance E-mail to 1st Previous Approver--For Reject
    public void send_mailto_Attenance_Reject_Previous_RM_Approver(string AppEmp_Name, string toMailIDs, string strsubject, string strmailmsg, string ccmails, string strApproverList)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td colspan=2>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td colspan=2 style='height:20px'></td></tr>");
            //strbuild.Append("<tr><td> " + Emp_Name + " has applied for attendance regularisation as per the details below. for your information please.</td></tr>");
            strbuild.Append("<tr><td colspan=2>This is to inform you that " + AppEmp_Name + " has <b>Rejected</b> your below leave request.</td></tr>");
            strbuild.Append("<tr><td colspan=2 style='height:20px'></td></tr>");
            strbuild.Append("<tr><td colspan=2>");
            strbuild.Append(strmailmsg);
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td colspan=2 style='height:20px'></td></tr>");
            //strbuild.Append("<tr><td style='height:20px'><a herf='#' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
            strbuild.Append("<tr><td style='width:50px'>Status : </td><td align='left'>" + strApproverList + "</td></tr>");
            strbuild.Append("<tr><td colspan=2> For your information please.</td></tr>");
            strbuild.Append("</table>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmails);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    public Int32 getLeaveConditionTypeId(int leavetypeid, Double leavedays)
    {
        DataSet dsLeaveRqust = new DataSet();
        Int32 lcondition = 0;

        var parameters = new[]
        {
            new SqlParameter("@stype", "get_LeaveConditionTypeid"),
            new SqlParameter("@leaveCondition", leavetypeid)
        };
        dsLeaveRqust = ExecuteDataSet("getLeaveConditionTypeId","Usp_getDetails_leaves", "get_LeaveConditionTypeid", parameters);
        if (dsLeaveRqust.Tables[0].Rows.Count > 0)
        {
            if (Convert.ToString(dsLeaveRqust.Tables[0].Rows[0]["LeaveConditionTypeid"]).Trim() != "")
            {
                if (leavetypeid == 1 || leavetypeid == 2 || leavetypeid == 4)
                {
                    if (leavedays > 15)
                    {
                        lcondition = Convert.ToInt32(dsLeaveRqust.Tables[0].Rows[0]["LeaveConditionTypeid"]);
                    }
                    else if (leavedays <= 15)
                    {
                        lcondition = Convert.ToInt32(dsLeaveRqust.Tables[0].Rows[1]["LeaveConditionTypeid"]);
                    }
                    else
                    {
                        lcondition = Convert.ToInt32(dsLeaveRqust.Tables[0].Rows[2]["LeaveConditionTypeid"]);
                    }
                }
                else
                {
                    lcondition = Convert.ToInt32(dsLeaveRqust.Tables[0].Rows[0]["LeaveConditionTypeid"]);
                }
            }
        }
        return lcondition;
    }
    public Int32 getLeaveConditionTypeIds(int leavetypeid)
    {
        DataSet  dsLeaveRqust = new DataSet();
        Int32 lcondition = 0;
        var parameters = new[]
       {
            new SqlParameter("@stype", "get_LeaveConditionTypeid"),
            new SqlParameter("@leaveCondition", leavetypeid)
        };
        dsLeaveRqust = ExecuteDataSet("getLeaveConditionTypeIds","Usp_getDetails_leaves", "get_LeaveConditionTypeid", parameters);
        if (dsLeaveRqust.Tables[0].Rows.Count > 0)
        {
            if (Convert.ToString(dsLeaveRqust.Tables[0].Rows[0]["LeaveConditionTypeid"]).Trim() != "")
                lcondition = Convert.ToInt32(dsLeaveRqust.Tables[0].Rows[0]["LeaveConditionTypeid"]);
        }
        return lcondition;
    }
    #endregion
    public DataSet GetTeamCalenderLeaveList(string strempcode, string strfrommonth)
    {
        var parameters = new[]
            {
              new SqlParameter("@EMP_ID", strempcode),
              new SqlParameter("@STARTDATE_V", string.IsNullOrWhiteSpace(strfrommonth) ? DBNull.Value : (object)strfrommonth)
           };
        return ExecuteDataSet("GetTeamCalenderLeaveList","GET_pivot_TeamCalender","", parameters);
    }
    public DataSet GetTeamCalenderLeaveList_Direct(string strempcode, string strfrommonth)
    {
        var parameters = new[]
        {
              new SqlParameter("@EMP_ID", strempcode),
              new SqlParameter("@STARTDATE_V", string.IsNullOrWhiteSpace(strfrommonth) ? DBNull.Value : (object)strfrommonth)
        };
        return ExecuteDataSet("GetTeamCalenderLeaveList_Direct","GET_pivot_TeamCalender_Direct","", parameters);
    }
    public DataTable GetTeamCalenderLeaveList_table_Direct(string strempcode, string strfrommonth)
    {
         var parameters = new[]
         {
              new SqlParameter("@EMP_ID", strempcode),
              new SqlParameter("@STARTDATE_V", string.IsNullOrWhiteSpace(strfrommonth) ? DBNull.Value : (object)strfrommonth)
         };
        return ExecuteDataTable("GetTeamCalenderLeaveList_table_Direct","GET_pivot_TeamCalender_Direct","", parameters);
    }
    public DataSet GetTeamCalenderTravelReqstList(string strempcode, string strfrommonth)
    {
         var parameters = new[]
           {
              new SqlParameter("@EMP_ID", strempcode),
              new SqlParameter("@STARTDATE_V", string.IsNullOrWhiteSpace(strfrommonth) ? DBNull.Value : (object)strfrommonth)
           };
        return ExecuteDataSet("GetTeamCalenderTravelReqstList","GET_YEARLY_Travel_Teamwise_rpt","", parameters);
    }
    public DataTable GetTeamCalenderLeaveList_table(string strempcode, string strfrommonth)
    {
        var parameters = new[]
        {
              new SqlParameter("@EMP_ID", strempcode),
              new SqlParameter("@STARTDATE_V", string.IsNullOrWhiteSpace(strfrommonth) ? DBNull.Value : (object)strfrommonth)
        };
        return ExecuteDataTable("GetTeamCalenderLeaveList_table","GET_pivot_TeamCalender", "",parameters);
    }
    #endregion

    #region Leave_Module_Emails_Methods

    #region E-mail to 1st Approver
    //public void send_mailto_RM_Approver(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string ccmailid, string strLeaveReqstURL, string applist, string strinertmediaterList)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    //Emp_Name = "";
    //    //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();

    //    strsubject = strsubject + " of " + Emp_Name;
    //    try
    //    {
    //        strbuild = new StringBuilder();
    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td> " + Emp_Name + " has applied for leave as per the details below. Request your approval please.</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:95%'>");
    //            strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
    //            strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
    //            strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
    //            strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
    //            strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
    //            strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
    //            if (Convert.ToString(strinertmediaterList).Trim() != "")
    //                strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
    //            strbuild.Append("</table>");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            //strbuild.Append("<tr><td style='height:20px'><a herf='InboxLeave_Req.aspx' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'><a href='" + strLeaveReqstURL + "'> Please click here to review / approve </a></td></tr>");
    //            strbuild.Append("</table>");
    //        }

    //        sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);


    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}

    public void send_mailto_RM_Approver(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string ccmailid, string strLeaveReqstURL, string applist, string strinertmediaterList)
    {
        StringBuilder strbuild = new StringBuilder();
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Emp_Name + " has applied for leave as per the details below. Request your approval please.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'>To:-"+toMailIDs+"</td></tr>");
                //strbuild.Append("<tr><td style='height:20px'>CC:-"+ccmailid+"</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:95%'>");
                strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'><a herf='InboxLeave_Req.aspx' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strLeaveReqstURL + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail to Next Approvers
    //public void send_mailto_Next_Approver(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string applist, string Emp_Name, string strinertmediaterList, string strLeaveReqstURL)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    //string Emp_Name = "";
    //    //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    strsubject = strsubject + " of " + Emp_Name;
    //    try
    //    {
    //        strbuild = new StringBuilder();

    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td> " + Emp_Name + " has applied for leave as per the details below and is approved by following. Request your approval please.</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Arial;font-style:Regular>");
    //            strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
    //            strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
    //            strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
    //            strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
    //            strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
    //            strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
    //            if (Convert.ToString(strinertmediaterList).Trim() != "")
    //                strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
    //            strbuild.Append("</table>");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'><a href='" + strLeaveReqstURL + "'> Please click here to review / approve </a></td></tr>");
    //            strbuild.Append("</table>");

    //        }


    //        sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");

    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}

    public void send_mailto_Next_Approver(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string applist, string Emp_Name, string strinertmediaterList, string strLeaveReqstURL)
    {
        StringBuilder strbuild = new StringBuilder();        
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();

            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'>TO:-"+ toMailIDs + "</td></tr>");
                //strbuild.Append("<tr><td style='height:20px'>CC:-"+ ReqMailID + "</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Emp_Name + " has applied for leave as per the details below and is approved by following. Request your approval please.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strLeaveReqstURL + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ReqMailID);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail to Intermediates (Only till the level where request is gone i.e. not to all)
    public void send_mailto_Intermediate(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string applist, string Emp_Name, string strinertmediaterList)
    {
        StringBuilder strbuild = new StringBuilder();
        DataTable dt_emp = new DataTable();
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Emp_Name + " has applied for leave as per the details below and is approved by following. </td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail of Approval to Previous level Approvers & Intermediates
    public void send_mailto_Next_Approver_Intermediate(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string AppMailID, string Rej_Remarks, string applist, string Emp_Name, string strinertmediaterList, string strTransferPLdtls)
    {
        StringBuilder strbuild = new StringBuilder();

        //  string Emp_Name = "";
        string AppEmp_Name = "";

        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Emp_Name;
        //dt_emp = new DataTable();
        //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
        //  AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();
        AppEmp_Name = AppMailID;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has Approved the " + tType + " request of " + Emp_Name + " as per the details below.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");

                if (Convert.ToString(strTransferPLdtls).Trim() != "")
                {
                    strbuild.Append("<tr><td style='height:20px'></td></tr>");
                    strbuild.Append(strTransferPLdtls);
                    strbuild.Append("<tr><td style='height:20px'></td></tr>");
                }
                else
                {
                    strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + Rej_Remarks + "</td></tr>");
                }
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail of Approval to Requester
    public void send_mailto_Requester(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string AppMailID, string Rej_Remarks, string applist, string Emp_Name, string strinertmediaterList)
    {
        StringBuilder strbuild = new StringBuilder();
        // string Emp_Name = "";
        string AppEmp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Emp_Name;
        //dt_emp = new DataTable();
        //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
        //AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();
        AppEmp_Name = AppMailID;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has Approved your below said " + tType + " request.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Approver Remarks :</td><td colspan=2> " + Rej_Remarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);
        }
        catch (Exception ex)
        {

        }
    }
    public void send_mailto_Requester_from_HR(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string AppMailID, string Rej_Remarks, string applist, string Emp_Name, string strinertmediaterList)
    {
        StringBuilder strbuild = new StringBuilder();
        // string Emp_Name = "";
        string AppEmp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Emp_Name;
        //dt_emp = new DataTable();
        //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
        //AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();
        AppEmp_Name = AppMailID;

        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has Applied below said " + tType + " on your behalf.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
                //strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + Rej_Remarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail of Cancellation to Intermediates & Approvers (Only till the level where request is gone i.e. not to all)
    public void send_mailto_Cancel_Intermediate(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string applist, string Emp_Name, string strinertmediaterList)
    {
        StringBuilder strbuild = new StringBuilder();
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Emp_Name + " has <b>Cancelled</b> " + tType + " request as per the details below.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%  'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Reason for Cancellation :</td><td colspan=2> " + tRemarks + "</td></tr>");
                // Commented by R1 on 01-10-2018
                //strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                //if (Convert.ToString(strinertmediaterList).Trim() != "")
                //    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                // Commented by R1 on 01-10-2018
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);
        }
        catch (Exception ex)
        {

        }
    }

    public void send_mailto_CancelLR_Approver(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string ccmailid, string strLeaveReqstURL, string applist, string strinertmediaterList)
    {
        StringBuilder strbuild = new StringBuilder();
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();

        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Emp_Name + " has Cancelled leave as per the details below. Request your approval please.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:95%'>");
                strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'><a herf='InboxLeave_Req.aspx' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strLeaveReqstURL + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail of Rejection to Previous level Approvers & Intermediates
    public void send_mail_Rejection_Correction(string ReqMailID, string ApprMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string strcc, string applist, string Emp_Name, string strinertmediaterList)
    {
        StringBuilder strbuild = new StringBuilder();        
        strsubject = strsubject + " of " + Emp_Name;        
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                if (strsubject.Contains("Rejection"))
                    strbuild.Append("<tr><td> This is to inform you that " + ApprMailIDs + " has <b>Rejected</b> Cancellation of " + tType + " request of " + Emp_Name + " as per the details below. </td></tr>");
                else
                    strbuild.Append("<tr><td> This is to inform you that " + ApprMailIDs + " has sent back the " + tType + " request for correction of " + Emp_Name + " as per the details below. </td></tr>");

                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%  'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", strcc);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail of Rejection to Previous level Approvers & Intermediates - Commented
    //public void send_Reject_mailto_Pre_Next_Approver(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string AppMailID, string Rej_Remarks, string applist)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    //  string Emp_Name = "";
    //    string AppEmp_Name = "";
    //    dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    strsubject = strsubject + "" + Emp_Name;
    //    //dt_emp = new DataTable();
    //    //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
    //    //AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();
    //    AppEmp_Name = AppMailID;

    //    try
    //    {
    //        strbuild = new StringBuilder();
    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has <b>Rejected</b> the leave request of " + Emp_Name + " as per the details below. For your information please.</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='width:95% color:#000000;font-size:11pt;font-family:Arial;font-style:Regular'>");
    //            strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
    //            strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td><td> " + tFrom_For + "</td></tr>");
    //            strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td><td> " + tTo_For + "</td></tr>");
    //            strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
    //            strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
    //            strbuild.Append("<tr><td>Rejection Remarks :</td><td colspan=2> " + Rej_Remarks + "</td></tr>");
    //            strbuild.Append("<tr><td>Approvers :</td><td colspan=2>" + applist + "/td></tr>");
    //            strbuild.Append("</table>");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("</table>");

    //        }


    //        sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");

    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}
    #endregion

    #region E-mail of Rejection to Next_Approver - Commented
    //public void send_mailto_Reject_Next_Approver(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string AppMailID, string Rej_Remarks, string applist)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    string Emp_Name = "";
    //    string AppEmp_Name = "";
    //    dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    strsubject = strsubject + " of " + Emp_Name;
    //    //dt_emp = new DataTable();
    //    //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
    //    //AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();
    //    AppEmp_Name = AppMailID;

    //    try
    //    {
    //        strbuild = new StringBuilder();

    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has <b>Rejected</b> your below leave request. For your information please.</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Arial;font-style:Regular'>");
    //            strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
    //            strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td><td> " + tFrom_For + "</td></tr>");
    //            strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td><td> " + tTo_For + "</td></tr>");
    //            strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
    //            strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
    //            strbuild.Append("<tr><td>Rejection Remarks :</td><td colspan=2> " + Rej_Remarks + "</td></tr>");
    //            strbuild.Append("<tr><td>Approvers :</td><td colspan=2>" + applist + "</td></tr>");
    //            strbuild.Append("</table>");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("</table>");

    //        }


    //        sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");

    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}
    #endregion

    #region E-mail  of Rejection  to Intermediates (Only till the level where request is gone i.e. not to all) - Commented
    //public void send_mailto_Intermediate_reject(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    //Emp_Name = "";
    //    //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    strsubject = strsubject + " of " + Emp_Name;
    //    try
    //    {
    //        strbuild = new StringBuilder();
    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td> " + Emp_Name + " has applied for leave as per the details below and is approved by following. For your information please.</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Arial;font-style:Regular'>");
    //            strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
    //            strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td><td> " + tFrom_For + "</td></tr>");
    //            strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td><td> " + tTo_For + "</td></tr>");
    //            strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
    //            strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
    //            strbuild.Append("<tr><td>Approvers :</td><td colspan=2>Mahendra K - A - 30-08-2017 - approved</td></tr>");
    //            strbuild.Append("</table>");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("</table>");
    //        }

    //        sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");

    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}
    #endregion

    #region E-mail of Rejection to Requester Commented
    //public void send_mailto_Rej_Requester(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string AppMailID, string Rej_Remarks, string applist)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    string Emp_Name = "";
    //    string AppEmp_Name = "";
    //    dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    strsubject = strsubject + " of " + Emp_Name;
    //    //dt_emp = new DataTable();
    //    //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
    //    //AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();
    //    AppEmp_Name = AppMailID;

    //    try
    //    {
    //        strbuild = new StringBuilder();

    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has <b>Rejected</b> your below said leave request. For your information please.</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Arial;font-style:Regular'>");
    //            strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
    //            strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td><td> " + tFrom_For + "</td></tr>");
    //            strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td><td> " + tTo_For + "</td></tr>");
    //            strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
    //            strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
    //            strbuild.Append("<tr><td>Rejection Remarks :</td><td colspan=2> " + Rej_Remarks + "</td></tr>");
    //            strbuild.Append("<tr><td>Approvers :</td><td colspan=2>" + applist + "</td></tr>");
    //            strbuild.Append("</table>");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("</table>");

    //        }


    //        sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");

    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}
    #endregion - Commented - Commented

    #region E-mail of Coorection to Requester - Commented
    //public void send_mailto_Coorect_Requester(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string AppMailID, string Rej_Remarks, string applist)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    string Emp_Name = "";
    //    string AppEmp_Name = "";
    //    dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    strsubject = strsubject + " of " + Emp_Name;
    //    //dt_emp = new DataTable();
    //    //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
    //    //AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();
    //    AppEmp_Name = AppMailID;

    //    try
    //    {
    //        strbuild = new StringBuilder();

    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has send your below leave request for correction. For your information please.</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Arial;font-style:Regular'>");
    //            strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
    //            strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td><td> " + tFrom_For + "</td></tr>");
    //            strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td><td> " + tTo_For + "</td></tr>");
    //            strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
    //            strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
    //            strbuild.Append("<tr><td>Rejection Remarks :</td><td colspan=2> " + Rej_Remarks + "</td></tr>");
    //            strbuild.Append("<tr><td>Approvers :</td><td colspan=2>" + applist + "</td></tr>");
    //            strbuild.Append("</table>");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("</table>");

    //        }


    //        sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");

    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}
    #endregion

    #region E-mail of Coreection Intermediates - Commented
    //public void send_mailto_Next_Coreection_Intermediate(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string AppMailID, string Rej_Remarks, string applist)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    //  string Emp_Name = "";
    //    string AppEmp_Name = "";
    //    dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    strsubject = strsubject + " of " + Emp_Name;
    //    //dt_emp = new DataTable();
    //    //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
    //    //  AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();
    //    AppEmp_Name = AppMailID;

    //    try
    //    {
    //        strbuild = new StringBuilder();
    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has send the below leave request for corecction. For your information please.</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Arial;font-style:Regular'>");
    //            strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
    //            strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td><td> " + tFrom_For + "</td></tr>");
    //            strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td><td> " + tTo_For + "</td></tr>");
    //            strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
    //            strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
    //            strbuild.Append("<tr><td>Rejection Remarks :</td><td colspan=2> " + Rej_Remarks + "</td></tr>");
    //            strbuild.Append("<tr><td>Approvers :</td><td colspan=2>" + applist + "</td></tr>");
    //            strbuild.Append("</table>");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("</table>");

    //        }


    //        sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");

    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}
    #endregion

    #region E-mail of LeaveCorrection to Approvers - Commented
    //public void send_mailto_Correct_Next_Approver(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string AppMailID, string Rej_Remarks, string applist)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    string Emp_Name = "";
    //    string AppEmp_Name = "";
    //    dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    strsubject = strsubject + " of " + Emp_Name;
    //    //dt_emp = new DataTable();
    //    //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
    //    //AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();

    //    AppEmp_Name = AppMailID;

    //    try
    //    {
    //        strbuild = new StringBuilder();

    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000 ;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has send the below leave request for corecction. For your information please.</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='width:95%;color:#000000 ;font-size:11pt;font-family:Arial;font-style:Regular'>");
    //            strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
    //            strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td><td> " + tFrom_For + "</td></tr>");
    //            strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td><td> " + tTo_For + "</td></tr>");
    //            strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
    //            strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
    //            strbuild.Append("<tr><td>Rejection Remarks :</td><td colspan=2> " + Rej_Remarks + "</td></tr>");
    //            strbuild.Append("<tr><td>Approvers :</td><td colspan=2>" + applist + "/td></tr>");
    //            strbuild.Append("</table>");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("</table>");

    //        }


    //        sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");

    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}
    #endregion

    #region E-mail to Intermediates (Only till the level where request is gone i.e. not to all) - Commented
    //public void send_mailto_Correct_Intermediate(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string AppMailID)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    string AppEmp_Name = "";
    //    //Emp_Name = "";
    //    //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    strsubject = strsubject + " of " + Emp_Name;
    //    AppEmp_Name = AppMailID;
    //    try
    //    {
    //        strbuild = new StringBuilder();
    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has send the below leave request for corecction. For your information please.</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Arial;font-style:Regular'>");
    //            strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
    //            strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td><td> " + tFrom_For + "</td></tr>");
    //            strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td><td> " + tTo_For + "</td></tr>");
    //            strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
    //            strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
    //            strbuild.Append("<tr><td>Approvers :</td><td colspan=2>Mahendra K - A - 30-08-2017 - approved</td></tr>");
    //            strbuild.Append("</table>");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("</table>");
    //        }

    //        sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");

    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}
    #endregion
        
    #region E-mail of Approval to Requester for Cancellation Leave
    public void send_mailto_Requester_CancellationLR(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string AppMailID, string Rej_Remarks, string applist, string Emp_Name, string strinertmediaterList)
    { 
        StringBuilder strbuild = new StringBuilder();
        DataTable dt_emp = new DataTable();
        // string Emp_Name = "";
        string AppEmp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Emp_Name;
        //dt_emp = new DataTable();
        //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
        //AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();
        AppEmp_Name = AppMailID;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has Approved your Cancellation request for said " + tType + " request.</td></tr>");
                //strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has Approved your Cancellation request for below said Sick Leave.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + Rej_Remarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail to Next Approvers for Cancellation Leave
    public void send_mailto_Next_Approver_CancellationLR(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string applist, string Emp_Name, string strinertmediaterList, string strLeaveReqstURL)
    { 
        StringBuilder strbuild = new StringBuilder();      
        //string Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Emp_Name + " has applied for leave as per the details below and is approved by following. Request your approval please.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Arial;font-style:Regular>");
                strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strLeaveReqstURL + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail of Approval to Previous level Approvers & Intermediates for Cancellation Leave
    public void send_mailto_Next_Approver_Intermediate_CancellationLR(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string AppMailID, string Rej_Remarks, string applist, string Emp_Name, string strinertmediaterList, string strTransferPLdtls)
    {        
        StringBuilder strbuild = new StringBuilder();
        //  string Emp_Name = "";
        string AppEmp_Name = "";

        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Emp_Name;
        //dt_emp = new DataTable();
        //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
        //  AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();
        AppEmp_Name = AppMailID;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has Approved the " + tType + " request of " + Emp_Name + " as per the details below.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");

                if (Convert.ToString(strTransferPLdtls).Trim() != "")
                {
                    strbuild.Append("<tr><td style='height:20px'></td></tr>");
                    strbuild.Append(strTransferPLdtls);
                    strbuild.Append("<tr><td style='height:20px'></td></tr>");
                }
                else
                {
                    strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + Rej_Remarks + "</td></tr>");
                }
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion
    
    #endregion

    #region Travel_Request_Module_Methods
    public void UpdateExpenseAccountApproved(int expid, int exp_sr_no, int trip_detailsID, decimal amt_Release_By_Acc_PayByCom, decimal amt_Release_By_Acc_PayByEMP, string accountRemarks, string ExpDescr)
    {
        var parameters = new[]
        {
           new SqlParameter("@stype", "update_AccountApprovedAmount"),
           new SqlParameter("@expid", expid),
           new SqlParameter("@exp_sr_no", exp_sr_no),
           new SqlParameter("@trip_dtls_id", trip_detailsID),
           new SqlParameter("@Amt_Release_By_Acc_PayByCom", amt_Release_By_Acc_PayByCom),
           new SqlParameter("@Amt_Release_By_Acc_PayByEmp", amt_Release_By_Acc_PayByEMP),
           new SqlParameter("@AccountRemarks", accountRemarks),
           new SqlParameter("@ExpDesc", ExpDescr)
        };
        ExecuteNonQuery("UpdateExpenseAccountApproved","SP_GETALL_Expense_DETAILS", "update_AccountApprovedAmount", parameters);
    }
    public DataTable getTravelVoucherEmployee_List()
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "sp_getTravelVoucherEmployeeSearch")
        };
        return ExecuteDataTable("getTravelVoucherEmployee_List","SP_GETALLreembursement_DETAILS", "sp_getTravelVoucherEmployeeSearch", parameters);
    }
    public DataSet Get_TravelValidationResult(string FromDate, string ToDate, string emp_code, string strreqid)
    {
        var parameters = new[]
        {
             new SqlParameter("@fromdate", FromDate),
             new SqlParameter("@todate", ToDate),
             new SqlParameter("@EmpCode", emp_code),
             new SqlParameter("@req_id", string.IsNullOrWhiteSpace(strreqid) ? DBNull.Value :(object)strreqid)
        };
        return ExecuteDataSet("Get_TravelValidationResult","Usp_TravelReqValidation","", parameters);
    }
    public DataSet Get_TravelValidationResult_ForModAdd_temp(string FromDate, string ToDate, string emp_code, string strreqid)
    {
        var parameters = new[]
        {
             new SqlParameter("@fromdate", FromDate),
             new SqlParameter("@todate", ToDate),
             new SqlParameter("@EmpCode", emp_code),
             new SqlParameter("@req_id", string.IsNullOrWhiteSpace(strreqid) ? DBNull.Value :(object)strreqid)
        };
        return ExecuteDataSet("Get_TravelValidationResult_ForModAdd_temp","Usp_TravelReqValidation_modAddTmp","", parameters);
    }
    public DataSet Get_Travel_Details_ValidationResult(string FromDate, string ToDate, string trfromdate, string trtodate, string emp_code, string strreqid)
    {
        var parameters = new[]
        {
             new SqlParameter("@fromdate", FromDate),
             new SqlParameter("@todate", ToDate),
             new SqlParameter("@trFromDate", string.IsNullOrWhiteSpace(trfromdate) ? DBNull.Value :(object)trfromdate),
             new SqlParameter("@trToDate", string.IsNullOrWhiteSpace(trfromdate) ? DBNull.Value :(object)trtodate),
             new SqlParameter("@EmpCode", emp_code),
             new SqlParameter("@req_id", string.IsNullOrWhiteSpace(strreqid) ? DBNull.Value :(object)strreqid)
        };
        return ExecuteDataSet("Get_Travel_Details_ValidationResult","Usp_TravelReq_Details_Validation","", parameters);
    }
    public DataTable InsertTravelRequest(int triptype, string frm_date, string To_date, string tr_reason, string emp_code, int tr_status, Decimal req_adv_amt, string currency_type, int conditionid)
    {
        var parameters = new[]
        {
            new SqlParameter("@trip_type", triptype),
            new SqlParameter("@trip_frm_date", frm_date),
            new SqlParameter("@trip_to_date", To_date),
            new SqlParameter("@trp_reason", tr_reason),
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@trip_status", tr_status),
            new SqlParameter("@req_adv_amt", req_adv_amt),
            new SqlParameter("@currency_type", currency_type),
            new SqlParameter("@conditionid", conditionid),
            new SqlParameter("@qtype", "Insert")
        };
        return ExecuteDataTable("InsertTravelRequest","SP_SAVETRAVELREQUEST", "Insert", parameters);
    }
    public void UpdateTravelRequest(int tripid, string frm_date, string To_date, string tr_reason, int tr_status, Double req_adv_amt, string currency_type, int trconditionid)
    {
        var parameters = new[]
        {
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@trip_frm_date", frm_date),
            new SqlParameter("@trip_to_date", To_date),
            new SqlParameter("@trp_reason", tr_reason),
            new SqlParameter("@trip_status", tr_status),
            new SqlParameter("@req_adv_amt", req_adv_amt),
            new SqlParameter("@currency_type", currency_type),
            new SqlParameter("@conditionid", trconditionid),
            new SqlParameter("@qtype", "Update")
        };
        ExecuteNonQuery("UpdateTravelRequest","SP_SAVETRAVELREQUEST", "Update", parameters);
    }
    public void InsertTravelDetails(int triptype, int trip_mode, string frm_date, string frm_place, string To_date, string to_place, string devialtion, string emp_code, int tripid, string traveldesk, string requirements, string stype, string expectedArrival, string expectedDeparture)
    {
        var parameters = new[]
        {
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@Trip_type_id", triptype),
            new SqlParameter("@trip_mode_id", trip_mode),
            new SqlParameter("@from_date", frm_date),
            new SqlParameter("@fromplace", frm_place),
            new SqlParameter("@todate", To_date),
            new SqlParameter("@ToPlace", to_place),
            new SqlParameter("@traveldesk", traveldesk),
            new SqlParameter("@deviation", devialtion),
            new SqlParameter("@requirements", requirements),
            new SqlParameter("@tr_dtls_id", null),
            new SqlParameter("@qtype", stype),
            new SqlParameter("@expectedArrival", expectedArrival),
            new SqlParameter("@expectedDeparture", expectedDeparture)
        };
        ExecuteNonQuery("InsertTravelDetails","SP_Insert_travel_Details", stype, parameters);
    }
    public void UpdateTravelDetails(int tripid, int trdetailsid, string tr_mode, string frm_date, string frm_place, string To_date, string to_place, string devialtion, string traveldesk, string requirements, string stype, string strempcode, string expectedArrival, string expectedDeparture)
    {
        var parameters = new[]
        {
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@tr_dtls_id", trdetailsid),
            new SqlParameter("@trip_mode", tr_mode),
            new SqlParameter("@from_date", frm_date),
            new SqlParameter("@fromplace", frm_place),
            new SqlParameter("@todate", To_date),
            new SqlParameter("@ToPlace", to_place),
            new SqlParameter("@traveldesk", traveldesk),
            new SqlParameter("@deviation", devialtion),
            new SqlParameter("@requirements", requirements),
            new SqlParameter("@qtype", stype),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@expectedArrival", expectedArrival),
            new SqlParameter("@expectedDeparture", expectedDeparture)
         };
        ExecuteNonQuery("UpdateTravelDetails","SP_Insert_travel_Details", stype, parameters);
    }
    public void InsertAccomodationDetails(int triptype, string frm_date, string To_date, string location, string emp_code, int tripid, string traveldesk, string requirements, string stype)
    {
        var parameters = new[]
        {
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@Trip_type_id", triptype),
            new SqlParameter("@from_date", frm_date),
            new SqlParameter("@todate", To_date),
            new SqlParameter("@location", location),
            new SqlParameter("@is_thorugh_cos", traveldesk),
            new SqlParameter("@accomodation_requirement", requirements),
            new SqlParameter("@local_accomodation_id", null),
            new SqlParameter("@stype", stype)
        };
        ExecuteNonQuery("InsertAccomodationDetails","SP_insert_accomodation_details", stype, parameters);
    }
    public void UpdateAccomodationDetails(int tripid, int accid, string frm_date, string To_date, string location, string traveldesk, string requirements, string stype, string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@local_accomodation_id", accid),
            new SqlParameter("@from_date", frm_date),
            new SqlParameter("@todate", To_date),
            new SqlParameter("@location", location),
            new SqlParameter("@is_thorugh_cos", traveldesk),
            new SqlParameter("@accomodation_requirement", requirements),
            new SqlParameter("@stype", stype),
            new SqlParameter("@empcode", strempcode)
        };
        ExecuteNonQuery("UpdateAccomodationDetails","SP_insert_accomodation_details", stype, parameters);
    }
    public void InsertLocalTrvlDetails(int triptype, string frm_date, string To_date, string location, string emp_code, int tripid, string traveldesk, string requirements, string stype)
    {
        var parameters = new[]
        {
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@Trip_type_id", triptype),
            new SqlParameter("@from_date", frm_date),
            new SqlParameter("@todate", To_date),
            new SqlParameter("@location", location),
            new SqlParameter("@Through_COS", traveldesk),
            new SqlParameter("@remarks", requirements),
            new SqlParameter("@local_travel_id", null),
            new SqlParameter("@qtype", stype)
        };
        ExecuteNonQuery("InsertLocalTrvlDetails","SP_Insert_Local_travel", stype, parameters);
    }
    public void UpdateLocalTrvlDetails(int tripid, int local_id, string frm_date, string To_date, string location, string traveldesk, string requirements, string stype, string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@local_travel_id", local_id),
            new SqlParameter("@from_date", frm_date),
            new SqlParameter("@todate", To_date),
            new SqlParameter("@location", location),
            new SqlParameter("@Through_COS", traveldesk),
            new SqlParameter("@remarks", requirements),
            new SqlParameter("@qtype", stype),
            new SqlParameter("@empcode", strempcode)
        };
        ExecuteNonQuery("UpdateLocalTrvlDetails","SP_Insert_Local_travel", stype, parameters);
    }
    public void InsertTravelApproverDetails(string apprcode, int apprid, int MaxTriptId, string Isappstatus)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", "INSERT"),
            new SqlParameter("@Trip_id", MaxTriptId),
            new SqlParameter("@APPR_EMP_CODE", apprcode),
            new SqlParameter("@Action", "Pending"),
            new SqlParameter("@SYSTEM_APP", "N"),
            new SqlParameter("@APPR_ID", apprid),
            new SqlParameter("@IsApprover_TD_COS", Isappstatus)
        };
        ExecuteNonQuery("InsertTravelApproverDetails","usp_InsertTravelApprDetails", "INSERT", parameters);
    }
    public void clear_temp_travel_tables(string empcode)
    {
        var parameters = new[]
        {
             new SqlParameter("@Emp_Code", Convert.ToString(empcode).Trim())
        };
        ExecuteNonQuery("clear_temp_travel_tables","Usp_clear_Temp_Travel_details","", parameters);
    }
    public DataTable getTripDetails()
    {
        var parameters = new[]
        {
          new SqlParameter("@stype", "sp_gettrip_dtls")
        };
        return ExecuteDataTable("getTripDetails","SP_GETALLTRAVEL_DETAILS", "sp_gettrip_dtls", parameters);
    }
    public DataTable getTravelMode()
    {
        var parameters = new[]
        {
          new SqlParameter("@stype", "sp_gettravelmode_dtls")
        };
        return ExecuteDataTable("getTravelMode","SP_GETALLTRAVEL_DETAILS", "sp_gettravelmode_dtls", parameters);
    }
    public DataTable getCitiesDetails()
    {
        var parameters = new[]
        {
          new SqlParameter("@stype", "sp_getCity_dtls")
        };
        return ExecuteDataTable("getCitiesDetails","SP_GETALLTRAVEL_DETAILS", "sp_getCity_dtls", parameters);
    }
    public void InsertmaintoTemp(string empcode, int tripid)
    {
        var parameters = new[]
        {
          new SqlParameter("@stype", "sp_Exp_insert_mainData_toTempTabls"),
          new SqlParameter("@empcode", empcode),
          new SqlParameter("@trip_id", tripid)
        };
        ExecuteNonQuery("InsertmaintoTemp","SP_GETALLTRAVEL_DETAILS", "sp_Exp_insert_mainData_toTempTabls", parameters);
    }
    public DataTable GetTravelDetails(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getemptrvl_dtls"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetTravelDetails","SP_GETALLTRAVEL_DETAILS", "sp_getemptrvl_dtls", parameters);
    }
    public DataTable GetAccomodationDetails(string empcode)
    {
        var parameters = new[]
        {
          new SqlParameter("@stype", "sp_getempAccomodation_dtls"),
          new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetAccomodationDetails","SP_GETALLTRAVEL_DETAILS", "sp_getempAccomodation_dtls", parameters);
    }
    public DataTable GetLocalTrvlDetails(string empcode)
    {
        var parameters = new[]
        {
          new SqlParameter("@stype", "sp_getemplocaltrvl_dtls"),
          new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetLocalTrvlDetails","SP_GETALLTRAVEL_DETAILS", "sp_getemplocaltrvl_dtls", parameters);
    }
    public DataTable getTravelequest_MngList(string empcode)
    {
        var parameters = new[]
        {
           new SqlParameter("@stype", "sp_geMngtrvlreq_List"),
           new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("getTravelequest_MngList","SP_GETALLTRAVEL_DETAILS", "sp_geMngtrvlreq_List", parameters);
    }
    public DataTable getTravelDeviation(string Grade, int modeid)
    {
        var parameters = new[]
        {
           new SqlParameter("@stype", "sp_gettravelDeviation_value"),
           new SqlParameter("@grade", Grade),
           new SqlParameter("@trip_mode_id", modeid)
        };
        return ExecuteDataTable("getTravelDeviation","SP_GETALLTRAVEL_DETAILS", "sp_gettravelDeviation_value", parameters);
    }
    public DataTable getTravelDeviationByEMPcode(string EmpCode, int modeid) //New Added For Travel
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_gettravelDeviation_value_ByEmpCode"),
            new SqlParameter("@empcode", EmpCode),
            new SqlParameter("@trip_mode_id", modeid)
        };
        return ExecuteDataTable("getTravelDeviationByEMPcode","SP_GETALLTRAVEL_DETAILS", "sp_gettravelDeviation_value_ByEmpCode", parameters);
    }
    public DataSet getAccCode(int modeid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getAcc_Code"),
            new SqlParameter("@trip_mode_id", modeid)
        };
        return ExecuteDataSet("getAccCode","SP_GETALLreembursement_DETAILS", "sp_getAcc_Code", parameters);
    }
    public DataTable getTravelDeviation_localTrvl(string Grade, int modeid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_gettravelDeviation_value_Localtrvl"),
            new SqlParameter("@grade", Grade),
            new SqlParameter("@trip_mode_id", modeid)
        };
        return ExecuteDataTable("getTravelDeviation_localTrvl","SP_GETALLTRAVEL_DETAILS", "sp_gettravelDeviation_value_Localtrvl", parameters);
    }
    public DataTable getTravelDeviation_LocalTrvl(string Grade, int modeid)
    {
        var parameters = new[]
        {
           new SqlParameter("@stype", "sp_gettravelDeviation_value_forLocaltravel"),
           new SqlParameter("@grade", Grade),
           new SqlParameter("@trip_mode_id", modeid)
        };
        return ExecuteDataTable("getTravelDeviation_LocalTrvl","SP_GETALLTRAVEL_DETAILS", "sp_gettravelDeviation_value_forLocaltravel", parameters);
    }
    public DataTable GeTraveltApproverEmailID(string empcode, string Grade, int Leaveconditionid)
    {
        var parameters = new[]
        {
            new SqlParameter("@Emp_code", empcode),
            new SqlParameter("@Grade", Grade),
            new SqlParameter("@Conditiontype_id", Leaveconditionid)
        };
        return ExecuteDataTable("GeTraveltApproverEmailID","SP_GETTRAVELAPPROVERSEMAIL","", parameters);
    }

    //public DataTable GetExpensesApproverEmailID(string empcode, string Grade, int Leaveconditionid)
    //{

    //    try
    //    {
    //        sql.con.ConnectionString = connection;
    //        if (sql.con.State == ConnectionState.Closed || sql.con.State == ConnectionState.Broken)
    //            sql.con.Open();
    //        sql.cmd6.Connection = sql.con;
    //        sql.cmd6.CommandType = CommandType.StoredProcedure;
    //        sql.cmd6.CommandText = "SP_GETEXPENSEAPPROVERSEMAIL";
    //        sql.adp4.SelectCommand = sql.cmd6;
    //        sql.cmd6.Parameters.Clear();
    //        sql.cmd6.Parameters.AddWithValue("@Emp_code", empcode);
    //        sql.cmd6.Parameters.AddWithValue("@Grade", Grade);
    //        sql.cmd6.Parameters.AddWithValue("@Conditiontype_id", Leaveconditionid);
    //        dtApproverEmailId = new DataTable();
    //        sql.adp4.Fill(dtApproverEmailId);
    //        return dtApproverEmailId;
    //    }
    //    catch (Exception)
    //    {

    //        throw;
    //    }

    //    finally
    //    {
    //        sql.con.Close();

    //    }

    //}

    public DataTable GetExpensesApproverEmailID(string empcode, string Grade, int Leaveconditionid, string comp_code, int dept_id)
    {
        var parameters = new[]
        {
             new SqlParameter("@Emp_code", empcode),
             new SqlParameter("@Grade", Grade),
             new SqlParameter("@Conditiontype_id", Leaveconditionid),
             new SqlParameter("@comp_code", comp_code),
             new SqlParameter("@Dept_id", dept_id)
        };
        return ExecuteDataTable("GetExpensesApproverEmailID","SP_GETEXPENSEAPPROVERSEMAIL_COMP","", parameters);
    }
    public DataTable GetTravelIntermediateName(string empcode, int leaveconditiontypeid, string sgrade)
    {
        var parameters = new List<SqlParameter>
        {
             new SqlParameter("@EMP_CODE", empcode) 
        };
        if (Convert.ToString(leaveconditiontypeid).Trim() != "")        
            parameters.Add(new SqlParameter("@CONDITIONTYPE", leaveconditiontypeid));        

        if (Convert.ToString(sgrade).Trim() != "")        
            parameters.Add(new SqlParameter("@grade", sgrade));        

        return ExecuteDataTable("GetTravelIntermediateName","SP_GETTRAVELINTERMEDIATERNAME","", parameters.ToArray());
    }
    public DataTable GetExpenseTravelIntermediateName(string empcode, int leaveconditiontypeid, string sgrade)
    {
        var parameters = new List<SqlParameter>
        {
             new SqlParameter("@EMP_CODE", empcode)
        };
        if (Convert.ToString(leaveconditiontypeid).Trim() != "")        
            parameters.Add(new SqlParameter("@CONDITIONTYPE", leaveconditiontypeid));
        
        if (Convert.ToString(sgrade).Trim() != "")        
            parameters.Add(new SqlParameter("@grade", sgrade)); 

        return ExecuteDataTable("GetExpenseTravelIntermediateName","SP_GET_EXPsTrvl_INTERMEDIATERNAME","", parameters.ToArray());
    }
    public Int32 getTravelConditionTypeId(int Traveltypeid, string Eligibility, Double TravelDays)
    {
        DataSet dsTravelRqust = new DataSet();
        Int32 trcondition = 0;
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_TravelConditionTypeid"),
            new SqlParameter("@Traveltype_id", Traveltypeid),
            new SqlParameter("@Eligibility", Eligibility)
        };
        dsTravelRqust = ExecuteDataSet("getTravelConditionTypeId","SP_GETALLTRAVEL_DETAILS", "get_TravelConditionTypeid", parameters);
        if (dsTravelRqust.Tables[0].Rows.Count > 0)
        {
            if (Convert.ToString(dsTravelRqust.Tables[0].Rows[0]["travelConditionTypeid"]).Trim() != "")
            {
                if (Traveltypeid == 1 || Traveltypeid == 2)
                {
                    if (TravelDays > 4)
                    {
                        trcondition = Convert.ToInt32(dsTravelRqust.Tables[0].Rows[0]["travelConditionTypeid"]);
                    }
                    else if (TravelDays <= 4)
                    {
                        if (Traveltypeid == 2)
                            trcondition = Convert.ToInt32(dsTravelRqust.Tables[0].Rows[0]["travelConditionTypeid"]);
                        else
                            trcondition = Convert.ToInt32(dsTravelRqust.Tables[0].Rows[1]["travelConditionTypeid"]);

                    }
                    else
                    {
                        trcondition = Convert.ToInt32(dsTravelRqust.Tables[0].Rows[2]["travelConditionTypeid"]);
                    }
                }
                else
                {
                    trcondition = Convert.ToInt32(dsTravelRqust.Tables[0].Rows[0]["travelConditionTypeid"]);
                }
            }
        }
        return trcondition;
    }
    public Int32 getExpenseConditionTypeId(int Traveltypeid, string Eligibility)
    {
        DataSet dsTravelRqust = new DataSet();
        Int32 trcondition = 0;
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_ExpenseTravelConditionTypeid"),
            new SqlParameter("@Traveltype_id", Traveltypeid),
            new SqlParameter("@Eligibility", Eligibility)
         };
        dsTravelRqust = ExecuteDataSet("getExpenseConditionTypeId", "SP_GETALL_Expense_DETAILS", "get_ExpenseTravelConditionTypeid", parameters);
        if (dsTravelRqust.Tables[0].Rows.Count > 0)
        {
            if (Convert.ToString(dsTravelRqust.Tables[0].Rows[0]["ExpenseConditionTypeid"]).Trim() != "")
            {
                trcondition = Convert.ToInt32(dsTravelRqust.Tables[0].Rows[0]["ExpenseConditionTypeid"]);
            }
        }
        return trcondition;
    }
    public DataTable GetMainTravelDetails(int tripid)
    {
        var parameters = new[]
        {
              new SqlParameter("@stype", "sp_getMaintrvl_dtls"),
              new SqlParameter("@trip_id", tripid)
        };
        return ExecuteDataTable("GetMainTravelDetails","SP_GETALLTRAVEL_DETAILS", "sp_getMaintrvl_dtls", parameters);
    }
    public DataTable GetMainAccomodationDetails(int tripid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getMainAccomodation_dtls"),
            new SqlParameter("@trip_id", tripid)
         };
        return ExecuteDataTable("GetMainAccomodationDetails","SP_GETALLTRAVEL_DETAILS", "sp_getMainAccomodation_dtls", parameters);
    }
    public DataTable GetMainLocalTrvlDetails(int tripid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getMainlocaltrvl_dtls"),
            new SqlParameter("@trip_id", tripid)
         };
        return ExecuteDataTable("GetMainLocalTrvlDetails","SP_GETALLTRAVEL_DETAILS", "sp_getMainlocaltrvl_dtls", parameters);
    }
    public DataTable GetTravelReqData(int tripid)
    {
         var parameters = new[]
         {
               new SqlParameter("@stype", "sp_geMngtrvlreqedit_List"),
               new SqlParameter("@trip_id", tripid)
         };
        return ExecuteDataTable("GetTravelReqData","SP_GETALLTRAVEL_DETAILS", "sp_geMngtrvlreqedit_List", parameters);
    }
    public DataTable GetTravelApproverStatus(string empcode, int tripid, int tr_conditionid, string comp_code, int dept_id)
    {
        var parameters = new[]
         {
               new SqlParameter("@emp_code", empcode),
               new SqlParameter("@trip_id", tripid),
               new SqlParameter("@tr_conditionid", tr_conditionid),
               new SqlParameter("@comp_code", comp_code),
               new SqlParameter("@dept_id", dept_id)
         };
        return ExecuteDataTable("GetTravelApproverStatus","GETTRAVELAPPROVERSTATUS_COMP","", parameters);
    }
    public DataTable GetTravelDetailsEdit(int tripid, int trip_dtls_id)
    {
        var parameters = new[]
         {
               new SqlParameter("@stype", "sp_getMaintrvl_dtlsEdit"),
               new SqlParameter("@trip_id", tripid),
               new SqlParameter("@trip_dtls_id", trip_dtls_id)
         };
        return ExecuteDataTable("GetTravelDetailsEdit","SP_GETALLTRAVEL_DETAILS", "sp_getMaintrvl_dtlsEdit", parameters);
    }
    public DataTable GetTempTravelDetailsEdit(int tripid, int trip_dtls_id, string strempcode)
    {
         var parameters = new[]
         {
            new SqlParameter("@stype", "sp_gettemptrvl_dtlsEdit"),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@trip_dtls_id", trip_dtls_id),
            new SqlParameter("@empcode", strempcode)
         };
        return ExecuteDataTable("GetTempTravelDetailsEdit","SP_GETALLTRAVEL_DETAILS", "sp_gettemptrvl_dtlsEdit", parameters);
    }
    public void DeleteTravelDetails(int tripid, int trip_dtls_id, string strempcode)
    {
         var parameters = new[]
         {
            new SqlParameter("@qtype", "DeleteMainTable"),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@tr_dtls_id", trip_dtls_id),
            new SqlParameter("@empcode", strempcode)
         };
        ExecuteNonQuery("DeleteTravelDetails","SP_Insert_travel_Details", "DeleteMainTable", parameters);
    }
    public void DeleteAccomodationlDetails(int tripid, int trip_dtls_id, string empcode)
    {
         var parameters = new[]
         {
            new SqlParameter("@stype", "DeleteMainTable"),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@local_accomodation_id", trip_dtls_id),
            new SqlParameter("@empcode", empcode)
         };
        ExecuteNonQuery("DeleteAccomodationlDetails","SP_insert_accomodation_details", "DeleteMainTable", parameters);
    }
    public void DeleteLocalDetails(int tripid, int trip_dtls_id, string strempcode)
    {
         var parameters = new[]
         {
            new SqlParameter("@qtype", "DeleteMainTable"),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@local_travel_id", trip_dtls_id),
            new SqlParameter("@empcode", strempcode)
         };
        ExecuteNonQuery("DeleteLocalDetails","SP_Insert_Local_travel", "DeleteMainTable", parameters);
    }
    public DataTable GetAccomodationDetailsEdit(int tripid, int trip_acc_id)
    {
         var parameters = new[]
         {
            new SqlParameter("@stype", "sp_getMainAccomodation_dtlsEdit"),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@trip_dtls_id", trip_acc_id)
         };
        return ExecuteDataTable("GetAccomodationDetailsEdit","SP_GETALLTRAVEL_DETAILS", "sp_getMainAccomodation_dtlsEdit", parameters);
    }
    public DataTable GetTempAccomodationDetailsEdit(int tripid, int trip_acc_id)
    {
          var parameters = new[]
          {
            new SqlParameter("@stype", "sp_getMainAccomodation_dtlsEdit"),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@trip_dtls_id", trip_acc_id)
         };
        return ExecuteDataTable("GetTempAccomodationDetailsEdit","SP_GETALLTRAVEL_DETAILS", "sp_getMainAccomodation_dtlsEdit", parameters);
    }
    public DataTable GetLocalDetailsEdit(int tripid, int trip_loc_id)
    {
         var parameters = new[]
         {
            new SqlParameter("@stype", "sp_getTemplocaltrvlEdi_dtls"),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@trip_dtls_id", trip_loc_id)
         };
        return ExecuteDataTable("GetLocalDetailsEdit","SP_GETALLTRAVEL_DETAILS", "sp_getTemplocaltrvlEdi_dtls", parameters);
    }
    public DataTable GetTravelStatus(int tripid)
    {
         var parameters = new[]
         {
            new SqlParameter("@stype", "sp_GetTravelStatus"),
            new SqlParameter("@trip_id", tripid)
         };
        return ExecuteDataTable("GetTravelStatus","SP_GETALLTRAVEL_DETAILS", "sp_GetTravelStatus", parameters);
    }
    public DataTable GetTravelInbox(string empcode)
    {
         var parameters = new[]
         {
                new SqlParameter("@stype", "sp_GetTravelInboxlist"),
                new SqlParameter("@empcode", empcode)
         };
        return ExecuteDataTable("GetTravelInbox","SP_GETALLTRAVEL_DETAILS", "sp_GetTravelInboxlist", parameters);
    }
    public DataTable CurrentApprID(int tripid, string strempcode)
    {
         var parameters = new[]
         {
            new SqlParameter("@stype", "Sp_getCurrentApprID"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@trip_id", tripid)
         };
        return ExecuteDataTable("CurrentApprID","SP_GETALLTRAVEL_DETAILS", "Sp_getCurrentApprID", parameters);
    }
    public DataTable CurrentApprID_ForTDCOSACC(int tripid, string strempcode, string strtdcosacc)
    {
         var parameters = new[]
         {
            new SqlParameter("@stype", "Sp_getCurrentApprID_ForTDCOSACC"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@trvl_expType", strtdcosacc)
         };
        return ExecuteDataTable("CurrentApprID_ForTDCOSACC","SP_GETALLTRAVEL_DETAILS", "Sp_getCurrentApprID_ForTDCOSACC", parameters);
    }
    public DataTable GetTravelNextApproverDetails(string empcode, int tripid, int trcondition)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_NextApproverDetails_mail"),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@trip_dtls_id", trcondition)
        };
        return ExecuteDataTable("GetTravelNextApproverDetails","SP_GETALLTRAVEL_DETAILS", "get_NextApproverDetails_mail", parameters);
    }
    public DataTable TravelPreviousApproverDetails(string strempcode, int tripid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_PreviousApproverDetails_mail"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@trip_id", tripid)
        };
        return ExecuteDataTable("TravelPreviousApproverDetails","SP_GETALLTRAVEL_DETAILS", "get_PreviousApproverDetails_mail", parameters);
    }
    public DataTable TravelPreviousIntermidaterDetails(string strempcode, int apprid)
    {
        var parameters = new[]
        {
          new SqlParameter("@stype", "get_PreviousIntermidaterDetails_mail"),
          new SqlParameter("@empcode", strempcode),
          new SqlParameter("@trip_dtls_id", apprid)
        };
        return ExecuteDataTable("TravelPreviousIntermidaterDetails","SP_GETALLTRAVEL_DETAILS", "get_PreviousIntermidaterDetails_mail", parameters);
    }
    public DataTable TravelNextIntermediateName(int apprid, string Reqempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_NextIntermidaterDetails_mail"),
            new SqlParameter("@empcode", Reqempcode),
            new SqlParameter("@trip_dtls_id", apprid)
        };
        return ExecuteDataTable("TravelNextIntermediateName","SP_GETALLTRAVEL_DETAILS", "get_NextIntermidaterDetails_mail", parameters);
    }
    public DataTable TravelApproverDetails_Rejection_cancellation(string empcode, int tripid, string stype)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@trip_id", tripid)
        };
        return ExecuteDataTable("TravelApproverDetails_Rejection_cancellation","SP_GETALLTRAVEL_DETAILS", stype, parameters);
    }
    public void UpdateTravelAppRequest(int tripid, string status, string comment, string finalstatus, int apprid, decimal sacc_aprvd_amt)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@QUERYMODE", "UPDATE"),
            new SqlParameter("@Trip_ID", tripid),
            new SqlParameter("@ACTION", status),
            new SqlParameter("@appr_comments", comment),
            new SqlParameter("@AccApprovedAmt", sacc_aprvd_amt),
            new SqlParameter("@APPR_ID", apprid)
        };
        if (Convert.ToString(finalstatus).Trim() != "")
            parameters.Add(new SqlParameter("@finalstatus", finalstatus));

        ExecuteNonQuery("UpdateTravelAppRequest","usp_InsertTravelApprDetails", "UPDATE", parameters.ToArray());
    }
    public void RrejectTravelrequest(int tripid, string emp_code, int apprid, string comments, string stype)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@stype", stype)
        };

        if (stype == "Canceltravelrequest")
            parameters.Add(new SqlParameter("@apprid", DBNull.Value));
        else
            parameters.Add(new SqlParameter("@apprid", apprid));

        if (stype == "Canceltravelrequest")
            parameters.Add(new SqlParameter("@Status_id", 3));
        else if (stype == "rejecttravelrequest")
            parameters.Add(new SqlParameter("@Status_id", 4));
        else
            parameters.Add(new SqlParameter("@Status_id", 5));


        if (stype == "Canceltravelrequest")
            parameters.Add(new SqlParameter("@comments", DBNull.Value));
        else
            parameters.Add(new SqlParameter("@comments", comments));

        ExecuteNonQuery("RrejectTravelrequest","sp_RejectTravelRequest", stype, parameters.ToArray());
    }
    public DataTable GetAllTravelStatus(int tripid)
    {
        var parameters = new[]
         {
            new SqlParameter("@stype", "getAllTravelapproverstatus"),
            new SqlParameter("@trip_id", tripid)
         };
        return ExecuteDataTable("GetAllTravelStatus","SP_GETALLTRAVEL_DETAILS", "getAllTravelapproverstatus", parameters);
    }
    public DataTable GetAccomodationDetailsEdit_TDCOS(int tripid, int trip_acc_id)
    {
         var parameters = new[]
         {
            new SqlParameter("@stype", "sp_getMainAccomodation_dtlsedit_TDCOS"),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@trip_dtls_id", trip_acc_id)
         };
        return ExecuteDataTable("GetAccomodationDetailsEdit_TDCOS","SP_GETALLTRAVEL_DETAILS", "sp_getMainAccomodation_dtlsedit_TDCOS", parameters);
    }
    public DataTable getTravelMode_tripwise(Int32 itripmode)
    {
        var parameters = new[]
         {
            new SqlParameter("@stype", "sp_gettravelmode_dtls_tripmode"),
            new SqlParameter("@trip_mode_id", itripmode)
         };
        return ExecuteDataTable("getTravelMode_tripwise","SP_GETALLTRAVEL_DETAILS", "sp_gettravelmode_dtls_tripmode", parameters);
    }

    #endregion

    #region Travel_Request_Module_Emails_Methods

    #region E-mail to 1st Approver
    public void send_mailto_RM_TravelApprover(string Empployee_Name, string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tTo, string ccmailid, string applist, string strinertmediaterList, string strTrvlReqstURL)
    {
        StringBuilder strbuild = new StringBuilder();
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();

        strsubject = strsubject + " of " + Empployee_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Empployee_Name + " has submitted a travel request as per the details below.Request your approval please.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:95%'>");
                strbuild.Append("<tr><td>Travel Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td></tr>");
                strbuild.Append("<tr><td>Travel Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Reason for Travel :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");

                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'><a herf='InboxLeave_Req.aspx' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strTrvlReqstURL + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion
    #region E-mail to Next Approvers
    public void Travel_send_mailto_Next_Approver(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tTo, string applist, string Empployee_Name, string strinertmediaterList, string strTrvlReqstURL)
    {
        StringBuilder strbuild = new StringBuilder();
        //string Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Empployee_Name;
        try
        {
            strbuild = new StringBuilder();

            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Empployee_Name + " has submitted a travel request as per the details below.Request your approval please.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Travel Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td></tr>");
                strbuild.Append("<tr><td>Travel Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Reason for Travel :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'><a herf='#' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strTrvlReqstURL + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail to Intermediates (Only till the level where request is gone i.e. not to all)
    public void Travel_send_mailto_Intermediate(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tTo, string applist, string Empployee_Name, string strinertmediaterList)
    {
        StringBuilder strbuild = new StringBuilder();
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Empployee_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Empployee_Name + " has submitted a travel request as per the details below.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Travel Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td></tr>");
                strbuild.Append("<tr><td>Travel Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Reason for Travel :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion
    #region E-mail of Approval to Previous level Approvers & Intermediates
    public void Travel_send_mailto_Next_Approver_Intermediate(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tTo, string applist, string Empployee_Name, string AppMailID, string strinertmediaterList, string strTrvlStatus, string strAccStatus, string strLocalTrvlStatus, string strAccAmt)
    {
        StringBuilder strbuild = new StringBuilder();
        //  string Emp_Name = "";
        string AppEmp_Name = "";

        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Empployee_Name;
        //dt_emp = new DataTable();
        //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
        //  AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();
        AppEmp_Name = AppMailID;

        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has Approved the Travel request of " + Empployee_Name + " as per the details below.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Travel Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td></tr>");
                strbuild.Append("<tr><td>Travel Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Reason for Travel :</td><td colspan=2> " + tRemarks + "</td></tr>");
                //strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + Rej_Remarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");

                if (Convert.ToString(strTrvlStatus).Trim() != "")
                {
                    strbuild.Append("<tr><td>Travel Details :</td><td colspan=2>" + strTrvlStatus + "</td></tr>");
                }

                if (Convert.ToString(strAccStatus).Trim() != "")
                {
                    strbuild.Append("<tr><td>Accommodation Details :</td><td colspan=2>" + strAccStatus + "</td></tr>");
                }

                if (Convert.ToString(strLocalTrvlStatus).Trim() != "")
                {
                    strbuild.Append("<tr><td>Local Travel Details :</td><td colspan=2>" + strLocalTrvlStatus + "</td></tr>");
                }

                if (Convert.ToString(strAccAmt).Trim() != "")
                {
                    strbuild.Append("<tr><td>Advances :</td><td colspan=2>" + strAccAmt + "</td></tr>");
                }

                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion
    #region E-mail of Rejection to Previous level Approvers & Intermediates
    public void Travel_send_mail_Rejection_Correction(string ReqMailID, string AppMailID, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tTo, string strcc, string applist, string Empployee_Name, string strinertmediaterList)
    {
        StringBuilder strbuild = new StringBuilder();
        string appr_name = "";
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Empployee_Name;
        appr_name = AppMailID;
        //dt_emp = null;
        //dt_emp = GetEmployeeData_Email(ApprMailIDs.ToString());
        //appr_name = dt_emp.Rows[0]["Emp_Name"].ToString();
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                if (strsubject.Contains("Rejection"))
                    strbuild.Append("<tr><td> This is to inform you that " + appr_name + " <b>Rejected</b> the Travel request of " + Empployee_Name + " as per the details below.</td></tr>");
                else
                    strbuild.Append("<tr><td> This is to inform you that " + appr_name + " has sent back the Travel request for correction of " + Empployee_Name + " as per the details below.</td></tr>");

                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%  'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Travel Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td></tr>");
                strbuild.Append("<tr><td>Travel Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Reason for Travel :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", strcc);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion
    #region E-mail of Cancellation to Intermediates & Approvers (Only till the level where request is gone i.e. not to all)
    public void Travel_send_mailto_Cancel_Intermediate(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tTo, string applist, string Emp_Name, string strinertmediaterList)
    {
        StringBuilder strbuild = new StringBuilder();
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Emp_Name + " has <b>Cancelled</b> Travel request as per the details below.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%  'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Travel Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td></tr>");
                strbuild.Append("<tr><td>Travel Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Reason for Travel :</td><td colspan=2> " + tRemarks + "</td></tr>");
                // Commented by R1 on 01-10-2018
                //strbuild.Append("<tr><td>Approvers :</td><td colspan=2>" + applist + "</td></tr>");
                //if (Convert.ToString(strinertmediaterList).Trim() != "")
                //    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                // Commented by R1 on 01-10-2018
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }

    #endregion

    #endregion

    #region Travel Expense Methods
    public DataSet Get_TravelExpenseValidationResult_New(string FromDate, string ToDate, string emp_code, string strreqid, string sLocationCode)
    {
        var parameters = new[]
         {
            new SqlParameter("@fromdate", FromDate),
            new SqlParameter("@todate", ToDate),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@req_id", string.IsNullOrWhiteSpace(strreqid) ? DBNull.Value : (object)strreqid),
            new SqlParameter("@location", sLocationCode)
         };
        return ExecuteDataSet("Get_TravelExpenseValidationResult_New","Usp_TravelExpenseValidation_new","", parameters);
    }

    public DataSet Get_TravelExpenseValidationResult_New(string FromDate, string ToDate, string emp_code, string strreqid)
    {
        var parameters = new[]
         {
            new SqlParameter("@fromdate", FromDate),
            new SqlParameter("@todate", ToDate),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@req_id", string.IsNullOrWhiteSpace(strreqid) ? DBNull.Value : (object)strreqid)
         };
        return ExecuteDataSet("Get_TravelExpenseValidationResult_New","Usp_TravelExpenseValidation_new","", parameters);
    }


    /* public DataTable getExpenseTravelMode()
     {
         try
         {
             DataTable dttrmode = new DataTable();
             scon = new SqlConnection(ConfigurationManager.ConnectionStrings["sqlconnection"].ToString());
             if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
                 scon.Open();
             sCommand = new SqlCommand();
             sCommand.Connection = scon;
             sCommand.CommandText = "SP_GETALL_Expense_DETAILS";
             sCommand.CommandType = CommandType.StoredProcedure;
             new SqlParameter("@stype", "sp_getexpns_dtls");

             sadp = new SqlDataAdapter();
             sadp.SelectCommand = sCommand;
             sadp.Fill(dttrmode);
             sCommand.Parameters.Clear();
             return dttrmode;

         }
         catch (Exception)
         {

             throw;
         }

     }*/
    /* public DataTable getExpenseDetails_Fromtemp(string emp_code, decimal tripid)
     {
         try
         {
             DataTable dttrmode = new DataTable();
             scon = new SqlConnection(ConfigurationManager.ConnectionStrings["sqlconnection"].ToString());
             if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
                 scon.Open();
             sCommand = new SqlCommand();
             sCommand.Connection = scon;
             sCommand.CommandText = "SP_GETALL_Expense_DETAILS";
             sCommand.CommandType = CommandType.StoredProcedure;

             new SqlParameter("@stype", "sp_getexpns_dtls_fromtmp");
             new SqlParameter("@empcode", emp_code);
             new SqlParameter("@trip_id", tripid);


             sadp = new SqlDataAdapter();
             sadp.SelectCommand = sCommand;
             sadp.Fill(dttrmode);
             sCommand.Parameters.Clear();
             return dttrmode;

         }
         catch (Exception)
         {

             throw;
         }

     }*/
    //  public void InsertExpensesDetails(string expdtls, int trip_mode, string frm_date, string To_date, string to_place, string devialtion, string emp_code, int tripid, string traveldesk,  string stype)
    public void InsertExpensesDetails(string emp_code, string frm_date, string To_date, decimal tripid, string trpdestn, string expdtls, decimal paidbycomp, decimal paidbemp, decimal totamt, decimal tripelegiblity, decimal tdiff, string trip_mode, string stype)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", stype),
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@from_date", frm_date),
            new SqlParameter("@todate", To_date),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@trip_destination", trpdestn),
            new SqlParameter("@trip_details", expdtls),
            new SqlParameter("@paid_by_comp", paidbycomp),
            new SqlParameter("@paid_emp", paidbemp),
            new SqlParameter("@tot_amt", totamt),
            new SqlParameter("@trip_eligibility_amt", tripelegiblity),
            new SqlParameter("@trip_diff_amt", tdiff),
            new SqlParameter("@trip_mode_id", trip_mode)
        };
        ExecuteNonQuery("InsertExpensesDetails","SP_Insert_Expense_Details", stype, parameters);
    }
    public DataTable InsertExpenseTravelRequest_main(int triptype, string frm_date, string To_date, string tr_reason, string emp_code, int tr_status, int req_adv_amt, string currency_type, int conditionid,
        decimal Daily_Halting_allowance, decimal TotalAmount_Claimed, decimal LessAdvanceTaken, decimal Net_Pay_Company, decimal Net_Pay_Employee, string Reason_Deviation, string Upload_File)
    {
        var parameters = new[]
        {
            new SqlParameter("@trip_type", triptype),
            new SqlParameter("@trip_frm_date", frm_date),
            new SqlParameter("@trip_to_date", To_date),
            new SqlParameter("@trp_reason", tr_reason),
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@trip_status", tr_status),
            new SqlParameter("@req_adv_amt", req_adv_amt),
            new SqlParameter("@currency_type", currency_type),
            new SqlParameter("@conditionid", conditionid),
            new SqlParameter("@qtype", "Insert"),
            new SqlParameter("@Daily_Halting_allowance", Daily_Halting_allowance),
            new SqlParameter("@TotalAmount_Claimed", TotalAmount_Claimed),
            new SqlParameter("@LessAdvanceTaken", LessAdvanceTaken),
            new SqlParameter("@Net_Pay_Company", Net_Pay_Company),
            new SqlParameter("@Net_Pay_Employee", Net_Pay_Employee),
            new SqlParameter("@Reason_Deviation", Reason_Deviation),
            new SqlParameter("@Upload_File", Upload_File)
        };
        return ExecuteDataTable("InsertExpenseTravelRequest_main","SP_SAVE_Exp_TRAVELREQUEST_Main", "Insert", parameters);
    }
    public DataTable GetExpenseTravelDetails(string empcode)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "sp_getemptrvl_dtls"),
             new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetExpenseTravelDetails","SP_GETALL_Expense_DETAILS", "sp_getemptrvl_dtls", parameters);
    }
    public void InsertExpenseAccomodationDetails(int triptype, string frm_date, string To_date, string location, string emp_code, int tripid, string requirements, string stype, string acctype, string actPaidby, decimal ActCharges, string actdeviation, decimal actEligible, string flatpaidby, decimal flatchg, string flatdev, decimal flatElig)
    {
        var parameters = new[]
        {
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@Trip_type_id", triptype),
            new SqlParameter("@from_date", frm_date),
            new SqlParameter("@todate", To_date),
            new SqlParameter("@location", location),
            new SqlParameter("@accomodation_requirement", requirements),
            new SqlParameter("@stype", stype),
            new SqlParameter("@Accomodation_type", acctype),
            new SqlParameter("@ActualPaid_by", actPaidby),
            new SqlParameter("@ActualCharges", ActCharges),
            new SqlParameter("@ActualDeviation", actdeviation),
            new SqlParameter("@ActualEligibility", actEligible),
            new SqlParameter("@FLatPaid_by", flatpaidby),
            new SqlParameter("@FlatCharges", flatchg),
            new SqlParameter("@FLatDeviation", flatdev),
            new SqlParameter("@FlatEligibility", flatElig)
        };
        ExecuteNonQuery("InsertExpenseAccomodationDetails","SP_insert_Expense_accomodation_details", stype, parameters);       
    }
    public DataTable GetExpenseAccomodationDetails(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getempAccomodation_dtls"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetExpenseAccomodationDetails","SP_GETALL_Expense_DETAILS", "sp_getempAccomodation_dtls", parameters);
    }
    public DataTable GetExpenseLocalTrvlDetails(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getemplocaltrvl_dtls"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetExpenseLocalTrvlDetails","SP_GETALL_Expense_DETAILS", "sp_getemplocaltrvl_dtls", parameters);
    }
    public DataTable GetExpeseTravelDetails(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getemptrvl_dtls"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetExpeseTravelDetails","SP_GETALLTRAVEL_DETAILS", "sp_getemptrvl_dtls", parameters);
    }
    public DataTable GetWExpenseAccomodationDetails(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getempAccomodation_dtls"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetWExpenseAccomodationDetails","SP_GETALLTRAVEL_DETAILS", "sp_getempAccomodation_dtls", parameters);
    }
    public DataTable GetExpneseLocalTrvlDetails(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getemplocaltrvl_dtls"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetExpneseLocalTrvlDetails","SP_GETALL_Expense_DETAILS", "sp_getemplocaltrvl_dtls", parameters);
    }
    public DataSet Get_TravelExpenseValidationResult(string FromDate, string ToDate, string emp_code, string strreqid)
    {
        var parameters = new[]
        {
            new SqlParameter("@fromdate", FromDate),
            new SqlParameter("@todate", ToDate),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@req_id", string.IsNullOrWhiteSpace(strreqid) ? DBNull.Value :(object)strreqid)
        };
        return ExecuteDataSet("Get_TravelExpenseValidationResult","Usp_TravelExpenseValidation","", parameters);
    }
    public DataTable getExpenseTravelIncidentalCharges(string emp_grade)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getExpenseTravelIncidentalCharges"),
            new SqlParameter("@grade", emp_grade)
        };
        return ExecuteDataTable("getExpenseTravelIncidentalCharges","SP_GETALL_Expense_DETAILS", "sp_getExpenseTravelIncidentalCharges", parameters);
    }
    public DataTable getExpenseTravelMode()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getexpns_dtls")
        };
        return ExecuteDataTable("getExpenseTravelMode","SP_GETALL_Expense_DETAILS", "sp_getexpns_dtls", parameters);
    }
    public DataTable getExpenseDetails_Fromtemp(string emp_code, decimal tripid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getexpns_dtls_fromtmp"),
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@trip_id", tripid)
        };
        return ExecuteDataTable("getExpenseDetails_Fromtemp","SP_GETALL_Expense_DETAILS", "sp_getexpns_dtls_fromtmp", parameters);
    }
    public DataSet getExpenseDetails_Fromtemp_Dataset(string emp_code, decimal tripid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getexpns_dtls_fromtmp"),
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@trip_id", tripid)
        };
        return ExecuteDataSet("getExpenseDetails_Fromtemp_Dataset","SP_GETALL_Expense_DETAILS", "sp_getexpns_dtls_fromtmp", parameters);
    }

    //  public void InsertExpensesDetails(string expdtls, int trip_mode, string frm_date, string To_date, string to_place, string devialtion, string emp_code, int tripid, string traveldesk,  string stype)
    public void InsertExpensesDetails(string emp_code, string frm_date, string To_date, decimal tripid,string trpdestn, string expdtls, decimal paidbycomp, decimal paidbemp, decimal totamt,decimal tripelegiblity, decimal tdiff, string trip_mode, string strexpsr_no, string stype,string strremarks, Decimal dnoofdays)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@qtype", stype),
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@from_date", frm_date),
            new SqlParameter("@todate", To_date),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@trip_destination", trpdestn),
            new SqlParameter("@trip_details", expdtls),
            new SqlParameter("@paid_by_comp", paidbycomp),
            new SqlParameter("@paid_emp", paidbemp),
            new SqlParameter("@tot_amt", totamt),
            new SqlParameter("@trip_eligibility_amt", tripelegiblity),
            new SqlParameter("@trip_diff_amt", tdiff),
            new SqlParameter("@trip_mode_id", trip_mode),
            new SqlParameter("@exp_remarks", strremarks),
            new SqlParameter("@noofdays", dnoofdays) 
        };
        if (Convert.ToString(strexpsr_no).Trim() != "")         
            parameters.Add(new SqlParameter("@exp_srno", Convert.ToInt32(strexpsr_no)));        
        else        
            parameters.Add(new SqlParameter("@exp_srno", DBNull.Value));
         
        ExecuteNonQuery("InsertExpensesDetails","SP_Insert_Expense_Details", stype, parameters.ToArray());
    }
    public DataTable InsertExpenseTravelRequest_main(int triptype, string frm_date, string To_date, string tr_reason,string emp_code, int tr_status, int req_adv_amt, string currency_type, decimal Daily_Halting_allowance,decimal TotalAmount_Claimed, decimal LessAdvanceTaken, decimal Net_Pay_Company, decimal Net_Pay_Employee,string Reason_Deviation, string Upload_File)
    {
        var parameters = new[]
        {
            new SqlParameter("@trip_type", triptype),
            new SqlParameter("@trip_frm_date", frm_date),
            new SqlParameter("@trip_to_date", To_date),
            new SqlParameter("@trp_reason", tr_reason),
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@trip_status", tr_status),
            new SqlParameter("@req_adv_amt", req_adv_amt),
            new SqlParameter("@currency_type", currency_type),
            new SqlParameter("@qtype", "Insert"),
            new SqlParameter("@Daily_Halting_allowance", Daily_Halting_allowance),
            new SqlParameter("@TotalAmount_Claimed", TotalAmount_Claimed),
            new SqlParameter("@LessAdvanceTaken", LessAdvanceTaken),
            new SqlParameter("@Net_Pay_Company", Net_Pay_Company),
            new SqlParameter("@Net_Pay_Employee", Net_Pay_Employee),
            new SqlParameter("@Reason_Deviation", Reason_Deviation),
            new SqlParameter("@Upload_File", Upload_File)
        };
        return ExecuteDataTable("InsertExpenseTravelRequest_main","SP_SAVE_Exp_TRAVELREQUEST_Main", "Insert", parameters);
    }
    public DataTable InsertorUpdateData(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataTable("InsertorUpdateData",strspname,"", parameters);
    }
    public DataTable getDataList(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataTable("getDataList",strspname,"", parameters);
    }
    public DataTable GetExpenseInbox(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_GetTravelInboxlist"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetExpenseInbox","SP_GETALL_Expense_DETAILS", "sp_GetTravelInboxlist", parameters);
    }
    public DataTable GetTravelExpenseData(int expid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_geMngtrvlreqedit_List"),
            new SqlParameter("@expid", expid)
        };
        return ExecuteDataTable("GetTravelExpenseData","SP_GETALL_Expense_DETAILS", "sp_geMngtrvlreqedit_List", parameters);
    }
    public DataTable getExpenseDetails_FromMain(decimal expid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getexpns_dtls_fromMain"),
            new SqlParameter("@expid", expid)
        };
        return ExecuteDataTable("getExpenseDetails_FromMain","SP_GETALL_Expense_DETAILS", "sp_getexpns_dtls_fromMain", parameters);
    }
    public DataSet getExpenseDetails_FromMain_Dataset(decimal expid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getexpns_dtls_fromMain"),
            new SqlParameter("@expid", expid)
        };
        return ExecuteDataSet("getExpenseDetails_FromMain_Dataset","SP_GETALL_Expense_DETAILS", "sp_getexpns_dtls_fromMain", parameters);
    }
    public DataTable ExpenseCurrentApprID(int expid, string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "Sp_getExpenseCurrentApprID"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@expid", expid)
        };
        return ExecuteDataTable("ExpenseCurrentApprID","SP_GETALL_Expense_DETAILS", "Sp_getExpenseCurrentApprID", parameters);
    }
    public DataTable GetExpenseApproverStatus(string empcode, int expid, int tr_conditionid, string appr_type, string comp_code, int dept_id)
    {
        var parameters = new[]
        {
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@expid", expid),
            new SqlParameter("@tr_conditionid", tr_conditionid),
            new SqlParameter("@App_type", appr_type),
            new SqlParameter("@comp_code", comp_code),
            new SqlParameter("@dept_id", dept_id)
        };
        return ExecuteDataTable("GetExpenseApproverStatus","GETEXPENSEAPPROVERSTATUS_COMP","", parameters);
    }        
    public DataTable GetExpenseNextApproverDetails(string empcode, int tripid, int trcondition, string comp_code, int dept_id)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_NextApproverDetails_mail_COMP"),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@expid", tripid),
            new SqlParameter("@condiionid", trcondition),
            new SqlParameter("@comp_code", comp_code),
            new SqlParameter("@dept_id", dept_id)
        };
        return ExecuteDataTable("GetExpenseNextApproverDetails","SP_GETALL_Expense_DETAILS", "get_NextApproverDetails_mail_COMP", parameters);
    }
    public DataTable ExpenseNextIntermediateName(int apprid, string Reqempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_NextIntermidaterDetails_mail"),
            new SqlParameter("@empcode", Reqempcode),
            new SqlParameter("@trip_dtls_id", apprid)
        };
        return ExecuteDataTable("ExpenseNextIntermediateName","SP_GETALLTRAVEL_DETAILS", "get_NextIntermidaterDetails_mail", parameters);
    }
    public void UpdateExpenseAppRequest(int expid, string status, string comment, string finalstatus,int apprid, string AccRemark, decimal Amount, int Conditionid)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@QUERYMODE", "UPDATE"),
            new SqlParameter("@expid", expid),
            new SqlParameter("@ACTION", status),
            new SqlParameter("@appr_comments", comment),
            new SqlParameter("@Amt_Release_By_Acc", Amount),
            new SqlParameter("@Remark_By_Acc", AccRemark),
            new SqlParameter("@Condition_id", Conditionid),            
            new SqlParameter("@APPR_ID", apprid)
        };
        if (Convert.ToString(finalstatus).Trim() != "")
            parameters.Add(new SqlParameter("@finalstatus", finalstatus));

        ExecuteNonQuery("UpdateExpenseAppRequest","usp_InsertExpenseApprDetails", "UPDATE", parameters.ToArray());
    }
    public DataTable ExpenseApproverDetails_Rejection_cancellation(string empcode, int expid, string stype)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@expid", expid)
        };
        return ExecuteDataTable("ExpenseApproverDetails_Rejection_cancellation","SP_GETALL_Expense_DETAILS", stype, parameters);
    }
    public void InsertExpenseApproverDetails(string apprcode, int apprid, decimal expid)
    {
        var parameters = new[]
        {
           new SqlParameter("@QUERYMODE", "INSERT"),
           new SqlParameter("@expid", expid),
           new SqlParameter("@APPR_EMP_CODE", apprcode),
           new SqlParameter("@Action", "Pending"),
           new SqlParameter("@SYSTEM_APP", "N"),
           new SqlParameter("@APPR_ID", apprid)
        };
        ExecuteNonQuery("InsertExpenseApproverDetails","usp_InsertExpenseApprDetails", "INSERT", parameters);
    }
    public DataTable ExpensePreviousApproverDetails(string strempcode, int expid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_PreviousApproverDetails_mail"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@expid", expid)
        };
        return ExecuteDataTable("ExpensePreviousApproverDetails","SP_GETALL_Expense_DETAILS", "get_PreviousApproverDetails_mail", parameters);
    }
    public void RrejectExpenserequest(int expid, string emp_code, int apprid, string comments, string stype)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@expid", expid),
            new SqlParameter("@stype", stype)
        };
        if (stype == "Canceltravelrequest")        
            parameters.Add(new SqlParameter("@apprid", DBNull.Value));       
        else        
            parameters.Add(new SqlParameter("@apprid", apprid));        

        if (stype == "Canceltravelrequest")
            parameters.Add(new SqlParameter("@Status_id", 3));
        else if (stype == "rejecttravelrequest")
            parameters.Add(new SqlParameter("@Status_id", 4));
        else
            parameters.Add(new SqlParameter("@Status_id", 5));

        if (stype == "Canceltravelrequest")
            parameters.Add(new SqlParameter("@comments", DBNull.Value));
        else
            parameters.Add(new SqlParameter("@comments", comments));

        ExecuteNonQuery("RrejectExpenserequest","sp_RejectExpenseRequest", stype, parameters.ToArray());
    }
    public DataTable GetExpensesTravelDetails(string empcode, decimal dexpdtlsid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getempExpstrvl_dtls_edit"),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@trip_dtls_id", dexpdtlsid)
        };
        return ExecuteDataTable("GetExpensesTravelDetails","SP_GETALL_Expense_DETAILS", "sp_getempExpstrvl_dtls_edit", parameters);
    }
    public DataTable GetExpneseLocalTrvlDetails_edit(string empcode, string strdtlsid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getemplocaltrvl_dtls_edit"),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@trip_dtls_id", strdtlsid)
        };
        return ExecuteDataTable("GetExpneseLocalTrvlDetails_edit","SP_GETALL_Expense_DETAILS", "sp_getemplocaltrvl_dtls_edit", parameters);
    }
    public DataTable getTravelExpense_MngList(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_geMngtrvlExp_List"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("getTravelExpense_MngList","SP_GETALL_Expense_DETAILS", "sp_geMngtrvlExp_List", parameters);
    }
    public DataTable GetMain_expTravelDetails(decimal expid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getMaintrvl_exp_dtls"),
            new SqlParameter("@expid", expid)
        };
        return ExecuteDataTable("GetMain_expTravelDetails","SP_GETALL_Expense_DETAILS", "sp_getMaintrvl_exp_dtls", parameters);
    }
    public DataTable GetMain_ExpOther(decimal expid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_OthExpenses_FromMain"),
            new SqlParameter("@expid", expid)
        };
        return ExecuteDataTable("GetMain_ExpOther","SP_GETALL_Expense_DETAILS", "sp_OthExpenses_FromMain", parameters);
    }
    public DataTable GetMain_ExpAccomodationDetails(decimal expid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getMain_ExpAccomodation_dtls"),
            new SqlParameter("@expid", expid)
        };
        return ExecuteDataTable("GetMain_ExpAccomodationDetails","SP_GETALL_Expense_DETAILS", "sp_getMain_ExpAccomodation_dtls", parameters);
    }
    public DataTable GetMain_ExpLocalTrvlDetails(decimal expid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getMain_Explocaltrvl_dtls"),
            new SqlParameter("@expid", expid)
        };
        return ExecuteDataTable("GetMain_ExpLocalTrvlDetails","SP_GETALL_Expense_DETAILS", "sp_getMain_Explocaltrvl_dtls", parameters);
    }
    public DataTable getMainExpenseDetails(decimal exp_id)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getMainexpns_dtls"),
            new SqlParameter("@expid", exp_id)
        };
        return ExecuteDataTable("getMainExpenseDetails","SP_GETALL_Expense_DETAILS", "sp_getMainexpns_dtls", parameters);
    }
    public DataTable GetExpTravel_Main(string empcode, decimal exp_id)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_get_Emp_Exptrvl_dtls"),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@expid", exp_id)
        };
        return ExecuteDataTable("GetExpTravel_Main","SP_GETALL_Expense_DETAILS", "sp_get_Emp_Exptrvl_dtls", parameters);
    }
    public void InsertExpenseTravelDetails(int triptype, int trip_mode, string frm_date, string frm_place,string from_time, string To_date, string to_place, string deviation, string to_time,
        string emp_code, decimal tripid, string traveldesk, Decimal Actual_Fare,string requirements, string stype, decimal strdtlsid, decimal dfoodallowance, string trvl_status)
    {
        var parameters = new[]
        {
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@Trip_type_id", triptype),
            new SqlParameter("@trip_mode_id", trip_mode),
            new SqlParameter("@from_date", frm_date),
            new SqlParameter("@fromplace", frm_place),
            new SqlParameter("@fromtime", from_time),
            new SqlParameter("@todate", To_date),
            new SqlParameter("@ToPlace", to_place),
            new SqlParameter("@totime", to_time),
            new SqlParameter("@traveldesk", "No"),
            new SqlParameter("@deviation", deviation),
            new SqlParameter("@Actual_Fare", Actual_Fare),
            new SqlParameter("@requirements", requirements),
            new SqlParameter("@tr_dtls_id", strdtlsid),
            new SqlParameter("@trvl_status", trvl_status),
            new SqlParameter("@qtype", stype),
            new SqlParameter("@efoodallowance", dfoodallowance)
        };
        ExecuteNonQuery("InsertExpenseTravelDetails","SP_Insert_ExpenseTravel_Details","", parameters);
    }
    public void InsertExpenseLocalTrvlDetails(int triptype, string frm_date, string To_date, string location, string emp_code,string requirements, string stype, int modeid, string deviation, decimal charge, decimal strdtlsid, decimal tripid, string status)
    {
        var parameters = new[]
        {
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@Trip_type_id", triptype),
            new SqlParameter("@from_date", frm_date),
            new SqlParameter("@todate", To_date),
            new SqlParameter("@location", location),
            new SqlParameter("@remarks", requirements),
            new SqlParameter("@qtype", stype),
            new SqlParameter("@travel_mode", modeid),
            new SqlParameter("@Charge", charge),
            new SqlParameter("@deviation", deviation),
            new SqlParameter("@local_travel_id", strdtlsid),
            new SqlParameter("@status", status),
            new SqlParameter("@trip_id", tripid)
        };
        ExecuteNonQuery("InsertExpenseLocalTrvlDetails","SP_Insert_tempLocal_travel", stype, parameters);
    }
    public int GetExpenseInboxCount(string empcode)
    {
        int RequestCount = 0;
        DataTable dtlvInbox = new DataTable();
        var parameters = new[]
        {
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@qtype", "getLeaveCount")
        };
        dtlvInbox = ExecuteDataTable("GetExpenseInboxCount","SP_GETLEAVEINBOX", "getLeaveCount",parameters);
        if (dtlvInbox.Rows.Count > 0)
        {
            RequestCount = (int)dtlvInbox.Rows[0]["TotalCount"];
        }
        return RequestCount;
    }
    public DataTable ExpensesTravelPreviousApproverDetails(string strempcode, int tripid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_PreviousApproverDetails_mail"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@expid", tripid)
        };
        return ExecuteDataTable("ExpensesTravelPreviousApproverDetails","SP_GETALL_Expense_DETAILS", "get_PreviousApproverDetails_mail", parameters);
    }
    public DataSet getDatasetList(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataSet("getDatasetList",strspname,"", parameters);
    }
    public DataSet Get_ExpTravel_Details_ValidationResult(string FromDate, string ToDate, string trfromdate,string trtodate, string emp_code, string strreqid, String strexpType)
    {
        var parameters = new[]
        {
            new SqlParameter("@fromdate", FromDate),
            new SqlParameter("@todate", ToDate),
            new SqlParameter("@trFromDate", string.IsNullOrWhiteSpace(trfromdate) ? DBNull.Value : (object)trfromdate),
            new SqlParameter("@trToDate", string.IsNullOrWhiteSpace(trfromdate) ? DBNull.Value : (object)trtodate),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@req_id", string.IsNullOrWhiteSpace(strreqid) ? DBNull.Value : (object)strreqid),
            new SqlParameter("@sexpType", strexpType)
        };
        return ExecuteDataSet("Get_ExpTravel_Details_ValidationResult","Usp_Exp_TravelReq_Details_Validation", strexpType, parameters);
    }
    public DataTable GetExpensesTravelApproverStatus(string empcode, Decimal tripid, int tr_conditionid, string comp_code, int dept_id)
    {
        var parameters = new[]
        {
         new SqlParameter("@emp_code", empcode),
         new SqlParameter("@trip_id", tripid),
         new SqlParameter("@tr_conditionid", tr_conditionid),
         new SqlParameter("@comp_code", comp_code),
         new SqlParameter("@dept_id", dept_id)
       };
        return ExecuteDataTable("GetExpensesTravelApproverStatus","GETExpensesTRAVELAPPROVERSTATUS_COMP","", parameters);
    }
    public DataTable GetExpensesAccomodationDetails(string empcode)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "sp_getempAccomodation_dtls"),
             new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetExpensesAccomodationDetails","SP_GETALL_Expense_DETAILS", "sp_getempAccomodation_dtls", parameters);
    }
    public DataTable getCitiesDetails_exps(string strtrvltype)
    {
        var parameters = new[]
        {
         new SqlParameter("@stype", "sp_getCity_dtls_exps"),
         new SqlParameter("@exp_sr_no", strtrvltype)
        };
        return ExecuteDataTable("getCitiesDetails_exps","SP_GETALL_Expense_DETAILS", "sp_getCity_dtls_exps", parameters);
    }
    public void RrejectExpensesTravelrequest(int tripid, string emp_code, int apprid, string comments, string stype)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@stype", stype)
        };
        if (stype == "Canceltravelrequest")
            parameters.Add(new SqlParameter("@apprid", DBNull.Value));
        else
            parameters.Add(new SqlParameter("@apprid", apprid));

        if (stype == "Canceltravelrequest")
            parameters.Add(new SqlParameter("@Status_id", 3));
        else if (stype == "rejecttravelrequest")
            parameters.Add(new SqlParameter("@Status_id", 4));
        else
            parameters.Add(new SqlParameter("@Status_id", 5));

        if (stype == "Canceltravelrequest")
            parameters.Add(new SqlParameter("@comments", DBNull.Value));
        else
            parameters.Add(new SqlParameter("@comments", comments));

        ExecuteNonQuery("RrejectExpensesTravelrequest","sp_RejectExpensesTravelRequest", stype, parameters.ToArray());         
    }

    public DataTable ExpensePreviousApproverDetails_Reqst(string strempcode, int tripid)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "get_PreviousApproverDetails_mail_Reqst"),
             new SqlParameter("@empcode", strempcode),
             new SqlParameter("@trip_id", tripid)
        };
        return ExecuteDataTable("ExpensePreviousApproverDetails_Reqst","SP_GETALL_Expense_DETAILS", "get_PreviousApproverDetails_mail_Reqst", parameters);
    }

    #endregion

    #region TravelExpnse_Email

    #region E-mail to 1st Approver
    public void send_mailto_RM_ExpensesApprover(string Empployee_Name, string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tTo, string ccmailid, string applist, string strinertmediaterList, string strTrvlReqstURL)
    {
        StringBuilder strbuild = new StringBuilder();
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();

        strsubject = strsubject + " of " + Empployee_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Empployee_Name + " has submitted a travel expenses request as per the details below.Request your approval please.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:95%'>");
                strbuild.Append("<tr><td>Travel Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td></tr>");
                strbuild.Append("<tr><td>Travel Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Reason for Travel :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");

                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'><a herf='InboxLeave_Req.aspx' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strTrvlReqstURL + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail to Next Approvers     
    public void Expesnses_send_mailto_Next_Approver(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tTo, string applist, string Empployee_Name, string strinertmediaterList, string strTrvlReqstURL)
    {
        StringBuilder strbuild = new StringBuilder();
        //string Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Empployee_Name;
        try
        {
            strbuild = new StringBuilder();

            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Empployee_Name + " has submitted a travel expenses request as per the details below.Request your approval please.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Travel Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td></tr>");
                strbuild.Append("<tr><td>Travel Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Reason for Travel :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'><a herf='#' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strTrvlReqstURL + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail to Intermediates (Only till the level where request is gone i.e. not to all)
    public void Expense_send_mailto_Intermediate(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tTo, string applist, string Empployee_Name, string strinertmediaterList)
    {
        StringBuilder strbuild = new StringBuilder();
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Empployee_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Empployee_Name + ", please find below the status update for your travel expenses claim.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Travel Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td></tr>");
                strbuild.Append("<tr><td>Travel Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Reason for Travel :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail of Approval to Previous level Approvers & Intermediates
    public void Expense_send_mailto_Next_Approver_Intermediate(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tTo, string applist, string Empployee_Name, string AppMailID, string strinertmediaterList)
    {
        StringBuilder strbuild = new StringBuilder();
        //  string Emp_Name = "";
        string AppEmp_Name = "";

        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Empployee_Name;
        //dt_emp = new DataTable();
        //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
        //  AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();
        AppEmp_Name = AppMailID;

        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has Approved the Travel expenses request of " + Empployee_Name + " as per the details below.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Travel Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td></tr>");
                strbuild.Append("<tr><td>Travel Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Reason for Travel :</td><td colspan=2> " + tRemarks + "</td></tr>");
                //strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + Rej_Remarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail of Rejection to Previous level Approvers & Intermediates
    public void Expense_send_mail_Rejection_Correction(string ReqMailID, string AppMailID, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tTo, string strcc, string applist, string Empployee_Name, string strinertmediaterList)
    {
        StringBuilder strbuild = new StringBuilder();
        string appr_name = "";
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Empployee_Name;
        appr_name = AppMailID;
        //dt_emp = null;
        //dt_emp = GetEmployeeData_Email(ApprMailIDs.ToString());
        //appr_name = dt_emp.Rows[0]["Emp_Name"].ToString();
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                if (strsubject.Contains("Rejection"))
                    strbuild.Append("<tr><td> This is to inform you that " + appr_name + " <b>Rejected</b> the Travel expenses request of " + Empployee_Name + " as per the details below.</td></tr>");
                else
                    strbuild.Append("<tr><td> This is to inform you that " + appr_name + " has sent back the Travel expenses request for correction of " + Empployee_Name + " as per the details below.</td></tr>");

                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%  'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Travel Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td></tr>");
                strbuild.Append("<tr><td>Travel Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Reason for Travel :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", strcc);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail of Cancellation to Intermediates & Approvers (Only till the level where request is gone i.e. not to all)
    public void ExpenseTravel_send_mailto_Cancel_Intermediate(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tTo, string applist, string Emp_Name, string strinertmediaterList)
    {
        StringBuilder strbuild = new StringBuilder();

        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Emp_Name + " has <b>Cancelled</b> Travel expenses request as per the details below.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%  'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Travel Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td></tr>");
                strbuild.Append("<tr><td>Travel Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Reason for Travel :</td><td colspan=2> " + tRemarks + "</td></tr>");
                // Commented by R1 on 01-10-2018
                //strbuild.Append("<tr><td>Approvers :</td><td colspan=2>" + applist + "</td></tr>");
                //if (Convert.ToString(strinertmediaterList).Trim() != "")
                //    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                // Commented by R1 on 01-10-2018
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }

    #endregion

    #endregion

    #region TravelDesk And COS Methods
    public void UpdateTravelDetailsforTravelDesk(int tripid, int trdetailsid, string frm_time, string to_time, decimal fare,string status, string actualDeparture, string actualArrival, string remarks, string mealnc, string filename,string fromplace, string ToPlace)
    {
        var parameters = new[]
        {
             new SqlParameter("@trip_id", tripid),
             new SqlParameter("@tr_dtls_id", trdetailsid),
             new SqlParameter("@departuretime", frm_time),
             new SqlParameter("@arrivaltime", to_time),
             new SqlParameter("@Fare", fare),
             new SqlParameter("@Status", status),
             new SqlParameter("@ActualdepartureDate", actualDeparture),
             new SqlParameter("@ActualarrivalDate", actualArrival),
             new SqlParameter("@TravelRemarks", remarks),
             new SqlParameter("@mealnc", mealnc),
             new SqlParameter("@fromplace", fromplace),
             new SqlParameter("@ToPlace", ToPlace),
             new SqlParameter("@UploadFile", string.IsNullOrWhiteSpace(filename) ? DBNull.Value : (object)filename),
             new SqlParameter("@qtype", "UpdateMainTableForTravelDesk")
         };
        ExecuteNonQuery("UpdateTravelDetailsforTravelDesk","SP_Insert_travel_Details", "UpdateMainTableForTravelDesk", parameters);
    }
    public void InsertTravelDetailsforTravelDesk(int tripid, string travelType, string trip_mode, string actualDeparture, string actualArrival, string frm_time, string to_time, string deviation, decimal fare, string status, string remarks, string mealnc, string filename, string fromplace, string ToPlace)
    {
        var parameters = new[]
        {
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@Trip_type", travelType),
            new SqlParameter("@trip_mode", trip_mode),
            new SqlParameter("@ActualdepartureDate", actualDeparture),
            new SqlParameter("@ActualarrivalDate", actualArrival),
            new SqlParameter("@departuretime", frm_time),
            new SqlParameter("@arrivaltime", to_time),
            new SqlParameter("@deviation", deviation),
            new SqlParameter("@Fare", fare),
            new SqlParameter("@Status", status),
            new SqlParameter("@TravelRemarks", remarks),
            new SqlParameter("@mealnc", mealnc),
            new SqlParameter("@fromplace", fromplace),
            new SqlParameter("@ToPlace", ToPlace),
            new SqlParameter("@UploadFile", string.IsNullOrWhiteSpace(filename) ? DBNull.Value : (object)filename),
            new SqlParameter("@qtype", "InsertNewTravelDetailInMainTableForTravelDesk")
        };
        ExecuteNonQuery("InsertTravelDetailsforTravelDesk","SP_Insert_travel_Details", "InsertNewTravelDetailInMainTableForTravelDesk", parameters);
    }
    public void DeleteTravelDetailsforTravelDesk(int tripid, int trdetailsid)
    {
        var parameters = new[]
        {
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@tr_dtls_id", trdetailsid),
            new SqlParameter("@qtype", "DeleteMainTableForTravelDesk")
        };
        ExecuteNonQuery("DeleteTravelDetailsforTravelDesk","SP_Insert_travel_Details", "DeleteMainTableForTravelDesk", parameters);
    }
    public void UpdateAccomodationDetailsForCOS(int tripid, int accid, decimal charges, string status, string sacctype)
    {
        var parameters = new[]
        {
           new SqlParameter("@trip_id", tripid),
           new SqlParameter("@local_accomodation_id", accid),
           new SqlParameter("@charges", charges),
           new SqlParameter("@status", status),
           new SqlParameter("@stype", "UpdateMainTableForCOS"),
           new SqlParameter("@accomodation_type", sacctype)
        };
        ExecuteNonQuery("UpdateAccomodationDetailsForCOS","SP_insert_accomodation_details", "UpdateMainTableForCOS", parameters);
    }
    public DataTable getTravelModeforCOS()
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "sp_gettravelmode_dtlsForCOS")
        };
        return ExecuteDataTable("getTravelModeforCOS","SP_GETALLTRAVEL_DETAILS", "sp_gettravelmode_dtlsForCOS", parameters);
    }
    public DataTable getTravelModefor_Requestor()
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "sp_gettravelmode_dtlsForReqstor")
        };
        return ExecuteDataTable("getTravelModefor_Requestor","SP_GETALLTRAVEL_DETAILS", "sp_gettravelmode_dtlsForReqstor", parameters);
    }
    public DataTable GetLocalDetailsEditforCOS(int tripid, int trip_loc_id)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "sp_getMainlocaltrvlEdi_dtls"),
             new SqlParameter("@trip_id", tripid),
             new SqlParameter("@trip_dtls_id", trip_loc_id)
        };
        return ExecuteDataTable("GetLocalDetailsEditforCOS","SP_GETALLTRAVEL_DETAILS", "sp_getMainlocaltrvlEdi_dtls", parameters);
    }
    public void UpdateLocalTrvlDetailsForCOS(int tripid, int local_id, int trmodeid, string deviation, string status)
    {
        var parameters = new List<SqlParameter>
        {
             new SqlParameter("@trip_id", tripid),
             new SqlParameter("@local_travel_id", local_id),
             new SqlParameter("@Deviation", deviation),
             new SqlParameter("@status", status),
             new SqlParameter("@qtype", "UpdateMainTableForCOS")
        };
        if (trmodeid != 0)
        {
            parameters.Add(new SqlParameter("@travel_mode_id", trmodeid));
        }
        ExecuteNonQuery("UpdateLocalTrvlDetailsForCOS","SP_Insert_Local_travel", "UpdateMainTableForCOS", parameters.ToArray());
    }
    public void UpdateForCorrection(int tripid)
    {
        var parameters = new[]
        {
            new SqlParameter("@trip_id", tripid),
            new SqlParameter("@qtype", "UpdateMainTableForCorrection")
        };
        ExecuteNonQuery("UpdateForCorrection","SP_UpdateTravelDesk_Details_ForCorrection", "UpdateMainTableForCorrection", parameters);
    }
    #endregion

    #region Payment Voucher Methods
    public DataTable InsertPaymentVoucherDetails(int Rem_id, string Rem_Month, decimal Amount, string emp_code, decimal EligibleAmount, string qtype, string Remarks, string UploadFile, string dclaimid, string RcptFile, string dclaimid_O, string Billno)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@Rem_id", Rem_id),
            new SqlParameter("@Rem_Month", Rem_Month),
            new SqlParameter("@Amount", Amount),
            new SqlParameter("@EligibleAmount", EligibleAmount),
            new SqlParameter("@Remarks", Remarks),
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Billno", Billno)
        };
        if (Convert.ToString(UploadFile).Trim() != "")
            parameters.Add(new SqlParameter("@UploadFile", UploadFile));

        if (Convert.ToString(dclaimid).Trim() != "")
            parameters.Add(new SqlParameter("@Exp_Type", Convert.ToInt32(dclaimid)));

        if (Convert.ToString(dclaimid_O).Trim() != "")
            parameters.Add(new SqlParameter("@Claims_id_o", Convert.ToInt32(dclaimid_O)));

        if (Convert.ToString(RcptFile).Trim() != "")
            parameters.Add(new SqlParameter("@rcptFile", RcptFile));

        return ExecuteDataTable("InsertPaymentVoucherDetails", "SP_Insert_Payment_VoucherDetails", qtype, parameters.ToArray());
    }
    #endregion

    #region  Reembursement Methods
    public void InsertMobileClaimDetails(int Rem_id, string Rem_Month, decimal Amount, string emp_code, decimal EligibleAmount,string qtype, string Remarks, string UploadFile, string dclaimid, string RcptFile, string Reason, string Billno, string Billtype)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@Rem_id", Rem_id),
            new SqlParameter("@Rem_Month", Rem_Month),
            new SqlParameter("@Amount", Amount),
            new SqlParameter("@EligibleAmount", EligibleAmount),
            new SqlParameter("@Remarks", Remarks),
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Billno", Billno),
            new SqlParameter("@Billtype", Billtype),  
            new SqlParameter("@Reason", Reason)
       };
        if (Convert.ToString(UploadFile).Trim() != "")
            parameters.Add(new SqlParameter("@UploadFile", UploadFile));

        if (Convert.ToString(dclaimid).Trim() != "")
            parameters.Add(new SqlParameter("@Claims_id", dclaimid));

        if (Convert.ToString(RcptFile).Trim() != "")
            parameters.Add(new SqlParameter("@rcptFile", RcptFile));

        ExecuteNonQuery("InsertMobileClaimDetails","SP_Insert_Mobile_ClaimDetails","", parameters.ToArray());
    }
    public DataTable CheckDuplicateMobileClaimDetails(int Rem_id, string Rem_Month, decimal Amount, string emp_code, decimal EligibleAmount,string qtype, string Remarks, string UploadFile, string dclaimid, string RcptFile, string Reason, string Billno, string Billtype)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@Rem_id", Rem_id),
            new SqlParameter("@Rem_Month", Rem_Month),
            new SqlParameter("@Amount", Amount),
            new SqlParameter("@EligibleAmount", EligibleAmount),
            new SqlParameter("@Remarks", Remarks),
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Billno", Billno),
            new SqlParameter("@Billtype", Billtype),  
            new SqlParameter("@Reason", Reason)
        };
        if (Convert.ToString(UploadFile).Trim() != "")
            parameters.Add(new SqlParameter("@UploadFile", UploadFile));

        if (Convert.ToString(dclaimid).Trim() != "")
            parameters.Add(new SqlParameter("@Claims_id", dclaimid));

        if (Convert.ToString(RcptFile).Trim() != "")
            parameters.Add(new SqlParameter("@rcptFile", RcptFile));

        return ExecuteDataTable("CheckDuplicateMobileClaimDetails","SP_Insert_Mobile_ClaimDetails","", parameters.ToArray());
    }
    public void InsertPaymentVouDetails(int Rem_id, string Rem_Month, decimal Amount, string emp_code, decimal EligibleAmount, string qtype, string Remarks, string UploadFile, string dclaimid, string RcptFile)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@Rem_id", Rem_id),
            new SqlParameter("@Rem_Month", Rem_Month),
            new SqlParameter("@Amount", Amount),
            new SqlParameter("@EligibleAmount", EligibleAmount),
            new SqlParameter("@Remarks", Remarks),
            new SqlParameter("@qtype", qtype)
        };
        if (Convert.ToString(UploadFile).Trim() != "")
            parameters.Add(new SqlParameter("@UploadFile", UploadFile));

        if (Convert.ToString(dclaimid).Trim() != "")
            parameters.Add(new SqlParameter("@Claims_id", dclaimid));

        if (Convert.ToString(RcptFile).Trim() != "")
            parameters.Add(new SqlParameter("@rcptFile", RcptFile));

        ExecuteNonQuery("InsertPaymentVouDetails", "SP_Insert_Payment_VoucherDetails", qtype, parameters.ToArray());
    }
    public DataTable GetMobileClaimDetails(string empcode, string strremid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getempmobileclaimdetails_dtls"),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@rem_id", strremid)
        };
        return ExecuteDataTable("GetMobileClaimDetails","SP_GETALLreembursement_DETAILS", "sp_getempmobileclaimdetails_dtls", parameters);
    }
    public DataTable GetMobileClaimDetails_Reqstpage(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getempmobileclaimdetails_dtls_formblRqst"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetMobileClaimDetails_Reqstpage","SP_GETALLreembursement_DETAILS", "sp_getempmobileclaimdetails_dtls_formblRqst", parameters);
    }
    public DataTable GetPaymentVoucherDetails_Reqstpage(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getempPaymentVoucherdetails_dtls_formblRqst"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetPaymentVoucherDetails_Reqstpage","SP_GETALLreembursement_DETAILS", "sp_getempPaymentVoucherdetails_dtls_formblRqst", parameters);
    }
    public DataTable getPaymentVoucher_List(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@stype", "sp_getPaymentVoucher_List")
        };
        return ExecuteDataTable("getPaymentVoucher_List","SP_GETALLreembursement_DETAILS", "sp_getPaymentVoucher_List", parameters);
    }
    public DataTable GetMobileClaimDetails_ForApprover(string empcode, string strremid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "getempmobileclaimdetails_forAppr"),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@rem_id", strremid)
        };
        return ExecuteDataTable("GetMobileClaimDetails_ForApprover","SP_GETALLreembursement_DETAILS", "getempmobileclaimdetails_forAppr", parameters);
    }
    public DataTable GetPaymentVoucherClaimDetails_ForApprover(string empcode, string strremid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "getempPaymentclaimdetails_forAppr"),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@rem_id", strremid)
        };
        return ExecuteDataTable("GetPaymentVoucherClaimDetails_ForApprover","SP_GETALLreembursement_DETAILS", "getempPaymentclaimdetails_forAppr", parameters);
    }
    public DataTable InsertMobileRembursement(string frm_date, decimal amount, string reason, string empcode, int status, int conditionid, string strmobremid, string Project, string Department, string Frm_Date, string To_Date)
    {
        var parameters = new List<SqlParameter>
        { 
            new SqlParameter("@Rem_Sub_Date", frm_date),
            new SqlParameter("@TotalAmount_Claimed", amount),
            new SqlParameter("@Reason", reason),
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@Ren_status", status),
            new SqlParameter("@Rem_Conditionid", conditionid),
            new SqlParameter("@qtype", "Insert"),
            new SqlParameter("@Project", Project),
            new SqlParameter("@Department", Department),
            new SqlParameter("@Frm_Date", Frm_Date),
            new SqlParameter("@To_Date", To_Date)
        };
        if (Convert.ToString(strmobremid).Trim() != "" && Convert.ToString(strmobremid).Trim() != "0")
        {
            parameters.Add(new SqlParameter("@Rem_id", strmobremid));
        }
        return ExecuteDataTable("InsertMobileRembursement","SP_INSERTMOBILEREM_REQUEST", "Insert", parameters.ToArray());
    }
    public DataTable InsertPaymentVoucherRembursement(string frm_date, decimal amount, string reason, string empcode, int status, int conditionid, string strmobremid, string claimDate, string Alt_Contact, string Project_Name, string Dept_Name)
    {
        var parameters = new List<SqlParameter>
        {
           new SqlParameter("@Rem_Sub_Date", frm_date),
           new SqlParameter("@TotalAmount_Claimed", amount),
           new SqlParameter("@Reason", reason),
           new SqlParameter("@emp_code", empcode),
           new SqlParameter("@Ren_status", status),
           new SqlParameter("@Rem_Conditionid", conditionid),
           new SqlParameter("@qtype", "Insert"),
           new SqlParameter("@fromdate", claimDate),
           new SqlParameter("@alt_contact", Alt_Contact),
           new SqlParameter("@Project_Name", Project_Name),
           new SqlParameter("@Dept_Name", Dept_Name)
        };
        if (Convert.ToString(strmobremid).Trim() != "" && Convert.ToString(strmobremid).Trim() != "0")
        {
            parameters.Add(new SqlParameter("@Rem_id", strmobremid));
        }

        return ExecuteDataTable("InsertPaymentVoucherRembursement","SP_INSERTPAYMENTVOUCHERREM_REQUEST", "Insert", parameters.ToArray());
    }
    public DataTable getMobileRem_MngList(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_geMngMobileRem_List"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("getMobileRem_MngList","SP_GETALLreembursement_DETAILS", "sp_geMngMobileRem_List", parameters);
    }
    public DataTable getPaymentVoucherRem_MngList(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_geMngPaymentVoucherRem_List"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("getPaymentVoucherRem_MngList","SP_GETALLreembursement_DETAILS", "sp_geMngPaymentVoucherRem_List", parameters);
    }
    public DataTable MobileRemInsertorUpdateData(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataTable("MobileRemInsertorUpdateData",strspname, "",parameters);
    }
    public DataTable getMobileRemDataList(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataTable("getMobileRemDataList",strspname,"", parameters);
    }
    public void InsertFuelClaimDetails(int Rem_id, string Rem_Month, string emp_code, decimal Qty, decimal Amount, decimal Rate, decimal EligibleQty, decimal BalanceQty, decimal TollCahrges, string qtype, Int32 iclaimid)
    {
        var parameters = new[]
        {
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@Rem_id", Rem_id),
            new SqlParameter("@Rem_Month", Rem_Month),
            new SqlParameter("@quantity", Qty),
            new SqlParameter("@Amount", Amount),
            new SqlParameter("@Rate", Rate),
            new SqlParameter("@Eligible_Qty", EligibleQty),
            new SqlParameter("@Balance_Qty", BalanceQty),
            new SqlParameter("@TollCharges", TollCahrges),
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@FuelClaims_id", iclaimid)
        };
        ExecuteNonQuery("InsertFuelClaimDetails","SP_Insert_Fuel_ClaimDetails","", parameters);
    }
    public void Insert_Nominations_PF(int Rem_id, string Rem_Month, string emp_code, string Nominee, string Nom_Relation, decimal Nom_Age, string Nom_Sex, string qtype, Int32 iclaimid)
    {
        var parameters = new[]
        {
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@Nom_id", Rem_id),
            new SqlParameter("@BirthDate", Rem_Month),
            new SqlParameter("@Nominee", Nominee),
            new SqlParameter("@Nom_Relation", Nom_Relation),
            new SqlParameter("@Nom_Age", Nom_Age),
            new SqlParameter("@Nom_Sex", Nom_Sex),
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@PFNom_id", iclaimid)
      };
        ExecuteNonQuery("Insert_Nominations_PF","SP_Insert_Nominations_PF", qtype, parameters);
    }
    public void InsertFuelOutstationDetails(int Rem_id, string Rem_Month, string emp_code, decimal Start_Km, decimal End_Km, decimal Drv_All, decimal Parking, decimal TollCahrges, decimal car_avg, decimal Fuel_cons, string Place, string qtype, Int32 iclaimid)
    {
        var parameters = new[]
        {
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@Rem_id", Rem_id),
            new SqlParameter("@Rem_Month", Rem_Month),
            new SqlParameter("@Place", Place),
            new SqlParameter("@Start_km", Start_Km),
            new SqlParameter("@End_km", End_Km),
            new SqlParameter("@Drv_Allowance", Drv_All),
            new SqlParameter("@Parking_chg", Parking),
            new SqlParameter("@Car_Avg", car_avg),
            new SqlParameter("@Fuel_Qty", Fuel_cons),
            new SqlParameter("@TollCharges", TollCahrges),
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@FuelClaims_id", iclaimid)
        };
        ExecuteNonQuery("InsertFuelOutstationDetails","SP_Insert_Fuel_OutstationDetails", qtype, parameters);
    }
    public void Insert_Nominations_Mediclaim(int Rem_id, string Rem_Month, string emp_code, string MemberName, string Member_Rel, string Member_Sex, decimal Member_Age, string qtype, Int32 iclaimid, string MaritalStatus)
    {
        var parameters = new[]
        {
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@Nom_id", Rem_id),
            new SqlParameter("@BirthDate", Rem_Month),
            new SqlParameter("@MemberName", MemberName),
            new SqlParameter("@Member_Rel", Member_Rel),
            new SqlParameter("@Member_Age", Member_Age),
            new SqlParameter("@Member_Sex", Member_Sex),
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@MedNom_id", iclaimid),
            new SqlParameter("@MaritalStatus", MaritalStatus)
          };
        ExecuteNonQuery("Insert_Nominations_Mediclaim","SP_Insert_Nominations_Mediclaim", qtype, parameters);
    }    
    public DataTable GetFuelClaimDetails(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getempFuelclaimdetails"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetFuelClaimDetails","SP_GETALLreembursement_DETAILS", "sp_getempFuelclaimdetails", parameters);
    }
    public DataTable GetNominations_PF(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getemp_nominations_PF"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetNominations_PF","SP_GETALLreembursement_DETAILS", "sp_getemp_nominations_PF", parameters);
    }
    public DataSet GetSite_Attendance(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "Yearly"),
            new SqlParameter("@PM_Emp_Code", empcode)
        };
        return ExecuteDataSet("GetSite_Attendance","SP_Admin_Site_Attendance", "Yearly", parameters);
    }
    public DataTable Check_Nominations(string empcode)
    {
        var parameters = new[]
       {
            new SqlParameter("@stype", "sp_Check_Nominations"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("Check_Nominations","SP_GETALLreembursement_DETAILS", "sp_Check_Nominations", parameters);
    }
    public DataTable GetNominations_Med(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getemp_nominations_Med"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetNominations_Med","SP_GETALLreembursement_DETAILS", "sp_getemp_nominations_Med", parameters);
    }
    public DataTable GetFuelClaimDetails_Outstation(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getempFuelclaimdetails_Out"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetFuelClaimDetails_Outstation","SP_GETALLreembursement_DETAILS", "sp_getempFuelclaimdetails_Out", parameters);
    }
    public DataTable GetFuelClaimDetailsById(int remid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getempFuelclaimdetailsbyid"),
            new SqlParameter("@rem_id", remid)
        };
        return ExecuteDataTable("GetFuelClaimDetailsById","SP_GETALLreembursement_DETAILS", "sp_getempFuelclaimdetailsbyid", parameters);
    }
    public DataTable GetFuelClaimDetailsById_approver(int remid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getempFuelclaimdetailsbyid_Approvr"),
            new SqlParameter("@rem_id", remid)
        };
        return ExecuteDataTable("GetFuelClaimDetailsById_approver","SP_GETALLreembursement_DETAILS", "sp_getempFuelclaimdetailsbyid_Approvr", parameters);
    }
    public DataTable GetFuelClaimDetailsById_approver(int remid, string strinboxtype, string apprempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@rem_id", remid),
            new SqlParameter("@apprempcode", apprempcode),
            new SqlParameter("@stype", (strinboxtype == "RCOS") ? (object)"sp_getempFuelclaimdetailsbyid_Approvr_COS" : "sp_getempFuelclaimdetailsbyid_Approvr")
        };
        return ExecuteDataTable("GetFuelClaimDetailsById_approver","SP_GETALLreembursement_DETAILS", "sp_getempFuelclaimdetailsbyid_Approvr_COS", parameters);
    }
    public DataTable GetFuelClaimDetails_Outstation_forApprover(Decimal remid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getempFuelclaimdetails_OutApprvr"),
            new SqlParameter("@rem_id", remid)
        };
        return ExecuteDataTable("GetFuelClaimDetails_Outstation_forApprover","SP_GETALLreembursement_DETAILS", "sp_getempFuelclaimdetails_OutApprvr", parameters);
    }
    public DataTable GetFuelClaimDetailsEdit(int renid, int claimsid, string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getempFuelclaimdetailsEidt"),
            new SqlParameter("@rem_id", renid),
            new SqlParameter("@claimsid", claimsid),
            new SqlParameter("@empcode", strempcode)
        };
        return ExecuteDataTable("GetFuelClaimDetailsEdit","SP_GETALLreembursement_DETAILS", "sp_getempFuelclaimdetailsEidt", parameters);
    }
    public DataTable GetNominations_PFEdit(int renid, int claimsid, string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getemp_Nominations_PF_Edit"),
            new SqlParameter("@rem_id", renid),
            new SqlParameter("@claimsid", claimsid),
            new SqlParameter("@empcode", strempcode)
        };
        return ExecuteDataTable("GetNominations_PFEdit","SP_GETALLreembursement_DETAILS", "sp_getemp_Nominations_PF_Edit", parameters);
    }
    public DataTable GetNominations_MedEdit(int renid, int claimsid, string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getemp_Nominations_Med_Edit"),
            new SqlParameter("@rem_id", renid),
            new SqlParameter("@claimsid", claimsid),
            new SqlParameter("@empcode", strempcode)
       };
        return ExecuteDataTable("GetNominations_MedEdit","SP_GETALLreembursement_DETAILS", "sp_getemp_Nominations_Med_Edit", parameters);
    }
    public DataTable GetFuelClaimDetailsEdit_COS(int renid, int claimsid, string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "getempFuelclaimdetailsEidt_COS"),
            new SqlParameter("@rem_id", renid),
            new SqlParameter("@claimsid", claimsid),
            new SqlParameter("@empcode", strempcode)
        };
        return ExecuteDataTable("GetFuelClaimDetailsEdit_COS","SP_GETALLreembursement_DETAILS", "getempFuelclaimdetailsEidt_COS", parameters);
    }
    public DataTable GetFuelClaimDetailsEdit_Outstation(int renid, int claimsid, string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getempFuelclaimdetailsOut_Edit"),
            new SqlParameter("@rem_id", renid),
            new SqlParameter("@claimsid", claimsid),
            new SqlParameter("@empcode", strempcode)
        };
        return ExecuteDataTable("GetFuelClaimDetailsEdit_Outstation","SP_GETALLreembursement_DETAILS", "sp_getempFuelclaimdetailsOut_Edit", parameters);
    }
    public DataTable InsertFuelRembursement(string frm_date, decimal quantity, decimal outtravel, decimal amount, decimal eligibility, decimal Outquantity, decimal totElig, decimal balElig, string empcode, int status,
        int conditionid, string uploadfile, string strremid, decimal dtollcharges, decimal airport_parking, decimal parkwash_elg, decimal parkwash_claimed)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@Rem_Sub_Date", frm_date),
            new SqlParameter("@Total_Quantity_Claimed", quantity),
            new SqlParameter("@Outstation_Travel", outtravel),
            new SqlParameter("@TotalAmount_Claimed", amount),
            new SqlParameter("@Eligible_Qty", eligibility),
            new SqlParameter("@Outstation_Quantity", Outquantity),
            new SqlParameter("@Total_Eligibility", totElig),
            new SqlParameter("@Balance_Eligibility", balElig),
            new SqlParameter("@Rem_Status", status),
            new SqlParameter("@Fuel_Conditionid", conditionid),
            new SqlParameter("@UploadFile", uploadfile),
            new SqlParameter("@airport_parking", airport_parking),
            new SqlParameter("@parkwash_elg", parkwash_elg),
            new SqlParameter("@parkwash_claimed", parkwash_claimed),
            new SqlParameter("@qtype", "Insert"),
            new SqlParameter("@toll_Charges", dtollcharges)
         };
        if (Convert.ToString(strremid).Trim() != "" && Convert.ToString(strremid).Trim() != "0")
        {
            parameters.Add(new SqlParameter("@Rem_id", strremid));
        }

        return ExecuteDataTable("InsertFuelRembursement","SP_Insert_Fuel_RemDetails", "Insert", parameters.ToArray());
    }

    public DataTable InsertNominations(string Nom_Sub_Date, string empcode, string uploadfile, string strremid,string for_year, string MaritalStatus)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@Nom_Sub_Date", Nom_Sub_Date),
            new SqlParameter("@UploadFile", uploadfile),
            new SqlParameter("@for_year", for_year),
            new SqlParameter("@qtype", "Insert"),
            new SqlParameter("@MaritalStatus", MaritalStatus)
        };
        if (Convert.ToString(strremid).Trim() != "" && Convert.ToString(strremid).Trim() != "0")
        {
            parameters.Add(new SqlParameter("@Nom_id", strremid));
        }
        return ExecuteDataTable("InsertNominations","SP_Insert_Nominations", "Insert", parameters.ToArray());
    }
    public DataTable getFeulRem_MngList(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_geMngFeulRem_List"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("getFeulRem_MngList","SP_GETALLreembursement_DETAILS", "sp_geMngFeulRem_List", parameters);
    }
    public DataTable GetFuelInbox(string empcode)
    {
        var parameters = new[]
        {
        new SqlParameter("@stype", "sp_GetTravelInboxlist"),
        new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetFuelInbox","SP_GETALLreembursement_DETAILS", "sp_GetTravelInboxlist", parameters);
    }
    public DataTable GetMobileInbox(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_GetMobileInboxlist"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetMobileInbox","SP_GETALLreembursement_DETAILS", "sp_GetMobileInboxlist", parameters);
    }
    public DataTable GetPaymentVoucherInbox(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_GetPaymentVoucherInboxlist"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetPaymentVoucherInbox","SP_GETALLreembursement_DETAILS", "sp_GetPaymentVoucherInboxlist", parameters);
    }
    public DataTable GetCurrentApprIDFuel(int tripid, string strempcode)
    {
        var parameters = new[]
       {
            new SqlParameter("@stype", "Sp_getCurrentApprID"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@rem_id", tripid)
        };
        return ExecuteDataTable("GetCurrentApprIDFuel","SP_GETALLreembursement_DETAILS", "Sp_getCurrentApprID", parameters);
    }
    public DataTable GetCurrentApprIDMobile(int tripid, string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "Sp_getCurrentApprIDMobile"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@rem_id", tripid)
        };
        return ExecuteDataTable("GetCurrentApprIDMobile","SP_GETALLreembursement_DETAILS", "Sp_getCurrentApprIDMobile", parameters);
    }
    public DataTable GetCurrentApprIDPayment(int tripid, string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "Sp_getCurrentApprIDPayment"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@rem_id", tripid)
        };
        return ExecuteDataTable("GetCurrentApprIDPayment","SP_GETALLreembursement_DETAILS", "Sp_getCurrentApprIDPayment", parameters);
    }
    public DataTable GetFuelApproverStatus(string empcode, int remid, int tr_conditionid)
    {
        var parameters = new[]
        {
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@trip_id", remid),
            new SqlParameter("@tr_conditionid", tr_conditionid)
        };
        return ExecuteDataTable("GetFuelApproverStatus","GETFUELAPPROVERSTATUS","", parameters);
    }
    public DataTable GetMobileApproverStatus(string empcode, int remid, int tr_conditionid)
    {
        var parameters = new[]
        {
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@trip_id", remid),
            new SqlParameter("@tr_conditionid", tr_conditionid)
        };
        return ExecuteDataTable("GetMobileApproverStatus","GETMOBILEAPPROVERSTATUS","", parameters);
    }
    public DataTable GetFuelNextApproverDetails(string empcode, int remid, int trcondition)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_NextApproverDetails_mail"),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@rem_id", remid),
            new SqlParameter("@trip_dtls_id", trcondition)
        };
        return ExecuteDataTable("GetFuelNextApproverDetails","SP_GETALLreembursement_DETAILS", "get_NextApproverDetails_mail", parameters);
    }
    public DataTable GetMobilelNextApproverDetails(string empcode, int remid, int trcondition)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_MobileNextApproverDetails_mail"),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@rem_id", remid),
            new SqlParameter("@trip_dtls_id", trcondition)
        };
        return ExecuteDataTable("GetMobilelNextApproverDetails","SP_GETALLreembursement_DETAILS", "get_MobileNextApproverDetails_mail", parameters);
    }
    public DataTable GetPaymentlNextApproverDetails(string empcode, int remid, int trcondition)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_PaymentNextApproverDetails_mail"),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@rem_id", remid),
            new SqlParameter("@trip_dtls_id", trcondition)
        };
        return ExecuteDataTable("GetPaymentlNextApproverDetails","SP_GETALLreembursement_DETAILS", "get_PaymentNextApproverDetails_mail", parameters);
    }
    public DataTable GetMobilelEligibilityMatrix(string grade)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "getMobileEligibilitybyGrade"),
            new SqlParameter("@grade", grade),
            new SqlParameter("@rem_id", 1)
        };
        return ExecuteDataTable("GetMobilelEligibilityMatrix","SP_GETALLreembursement_DETAILS", "getMobileEligibilitybyGrade", parameters);
    }
    public DataTable GetMobilelEligibilityMatrix_Emp_Grade(string grade, string emp_code, string sclaimdate)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "getMobileEligibilitybyGrade_Emp"),
            new SqlParameter("@grade", grade),
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@ClaimDate", sclaimdate),
            new SqlParameter("@rem_id", 1)
        };
        return ExecuteDataTable("GetMobilelEligibilityMatrix_Emp_Grade","SP_GETALLreembursement_DETAILS", "getMobileEligibilitybyGrade_Emp", parameters);
    }
    public DataTable GetMobilelEligibilityMatrix_Emp_Grade(string grade, string emp_code)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "getMobileEligibilitybyGrade_Emp"),
            new SqlParameter("@grade", grade),
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@rem_id", 1)
        };
        return ExecuteDataTable("GetMobilelEligibilityMatrix_Emp_Grade","SP_GETALLreembursement_DETAILS", "getMobileEligibilitybyGrade_Emp", parameters);
    }
    public DataTable FuelPreviousIntermidaterDetails(string strempcode, int apprid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_PreviousIntermidaterDetails_mail"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@trip_dtls_id", apprid)
        };
        return ExecuteDataTable("FuelPreviousIntermidaterDetails","SP_GETALLreembursement_DETAILS", "get_PreviousIntermidaterDetails_mail", parameters);
    }
    public DataTable FuelPreviousApproverDetails(string strempcode, int remid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_PreviousApproverDetails_mail"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@rem_id", remid)
        };
        return ExecuteDataTable("FuelPreviousApproverDetails","SP_GETALLreembursement_DETAILS", "get_PreviousApproverDetails_mail", parameters);
    }
    public void UpdateFuelAppRequest(int tripid, string status, string comment, string finalstatus, int apprid,decimal cosamount, string strapprType)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@QUERYMODE", "UPDATE"),
            new SqlParameter("@Trip_ID", tripid),
            new SqlParameter("@ACTION", status),
            new SqlParameter("@appr_comments", comment),
            new SqlParameter("@appr_type", strapprType),            
            new SqlParameter("@APPR_ID", apprid),
            new SqlParameter("@CosAmount", cosamount)
        };
        if (Convert.ToString(finalstatus).Trim() != "")
            parameters.Add(new SqlParameter("@finalstatus", finalstatus));

        ExecuteNonQuery("UpdateFuelAppRequest","usp_InsertFuelApprDetails", "UPDATE", parameters.ToArray());
    }
    public void UpdateMobileAppRequest(int tripid, string status, string comment, string finalstatus, int apprid,decimal recm_amount, int cond_id)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@QUERYMODE", "UPDATE"),
            new SqlParameter("@Trip_ID", tripid),
            new SqlParameter("@ACTION", status),
            new SqlParameter("@appr_comments", comment),
            new SqlParameter("@recm_amount", recm_amount), 
            new SqlParameter("@APPR_ID", apprid),
            new SqlParameter("@Condition_id", cond_id)
        };
        if (Convert.ToString(finalstatus).Trim() != "")
            parameters.Add(new SqlParameter("@finalstatus", finalstatus));

        ExecuteNonQuery("UpdateMobileAppRequest","usp_InsertMobileApprDetails", "UPDATE", parameters.ToArray());

    }
    public void UpdatePaymentAppRequest(int tripid, string status, string comment, string finalstatus, int apprid,decimal recm_amount, int cond_id)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@QUERYMODE", "UPDATE"),
            new SqlParameter("@Trip_ID", tripid),
            new SqlParameter("@ACTION", status),
            new SqlParameter("@appr_comments", comment),
            new SqlParameter("@recm_amount", recm_amount),
            new SqlParameter("@condition_id", cond_id), 
            new SqlParameter("@APPR_ID", apprid)
       };
        if (Convert.ToString(finalstatus).Trim() != "")
            parameters.Add(new SqlParameter("@finalstatus", finalstatus));

        ExecuteNonQuery("UpdatePaymentAppRequest","usp_InsertPaymentVoucherApprDetails", "UPDATE", parameters.ToArray());
    }
    public void InsertFuelApproverDetails(string apprcode, int apprid, int MaxTriptId, string Isappstatus)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", "INSERT"),
            new SqlParameter("@Trip_id", MaxTriptId),
            new SqlParameter("@APPR_EMP_CODE", apprcode),
            new SqlParameter("@Action", "Pending"),
            new SqlParameter("@SYSTEM_APP", "N"),
            new SqlParameter("@APPR_ID", apprid)
        };
        ExecuteNonQuery("InsertFuelApproverDetails","usp_InsertFuelApprDetails", "INSERT", parameters);
    }
    public void InsertFuelUploaded_Files(decimal MaxTriptId, Boolean blncheck, string strfilename, string strfiletype, int fsrno)
    {
        var parameters = new List<SqlParameter>
       {
            new SqlParameter("@QUERYMODE", "INSERT"),
            new SqlParameter("@t_id", MaxTriptId),
            new SqlParameter("@fsrno", fsrno),
            new SqlParameter("@filepath", strfilename),
            new SqlParameter("@filetype", strfiletype),
        };
        if (blncheck == false)
            parameters.Add(new SqlParameter("@delete", "deletefiles"));
        else
            parameters.Add(new SqlParameter("@delete", "notrequiredfiles"));

        ExecuteNonQuery("InsertFuelUploaded_Files","usp_InsertFuel_Files", "INSERT", parameters.ToArray());
    }
    public Int32 getFuelUploaded_Files(decimal MaxTriptId)
    {
        Int32 file_cnt = 0;
        DataTable dtlvInbox = new DataTable();

        var parameters = new[]
        {
            new SqlParameter("@t_id", MaxTriptId),
            new SqlParameter("@filetype", "GetFuelClaim")
        };
        dtlvInbox = ExecuteDataTable("getFuelUploaded_Files","usp_InsertFuel_Files", "GetFuelClaim", parameters);
        if (dtlvInbox.Rows.Count > 0)
        {
            file_cnt = (Int32)dtlvInbox.Rows[0]["cnt"];
        }
        return file_cnt;
    }
    public void InsertNomination_Files(decimal MaxTriptId, Boolean blncheck, string strfilename, string strfiletype, int fsrno)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@QUERYMODE", "INSERT"),
            new SqlParameter("@t_id", MaxTriptId),
            new SqlParameter("@fsrno", fsrno),
            new SqlParameter("@filepath", strfilename),
            new SqlParameter("@filetype", strfiletype),
        };
        if (blncheck == false)
            parameters.Add(new SqlParameter("@delete", "deletefiles"));
        else
            parameters.Add(new SqlParameter("@delete", "notrequiredfiles"));

        ExecuteNonQuery("InsertNomination_Files","usp_InsertFuel_Files", "INSERT", parameters.ToArray());
    }
    public void InsertpaymentUploaded_Files(decimal MaxTriptId, Boolean blncheck, string strfilename, string strfiletype, int fsrno, string strempcode, Int32 iclaimid)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@QUERYMODE", "INSERT"),
            new SqlParameter("@t_id", MaxTriptId),
            new SqlParameter("@fsrno", fsrno),
            new SqlParameter("@filepath", strfilename),
            new SqlParameter("@filetype", strfiletype),
        };
        if (blncheck == false)
            parameters.Add(new SqlParameter("@delete", "deletefiles"));
        else
            parameters.Add(new SqlParameter("@delete", "notrequiredfiles"));

        if (Convert.ToString(strempcode).Trim() != "")
            parameters.Add(new SqlParameter("@empcode", strempcode));

        if (Convert.ToString(iclaimid).Trim() != "")
            parameters.Add(new SqlParameter("@claimid", iclaimid));

        ExecuteNonQuery("InsertpaymentUploaded_Files","usp_InsertFuel_Files", "INSERT", parameters.ToArray());
    }

    //public DataTable GeTfuelApproverEmailID(string empcode, string Grade, int Leaveconditionid, Decimal remid)
    //{

    //    try
    //    {
    //        sql.con.ConnectionString = connection;
    //        if (sql.con.State == ConnectionState.Closed || sql.con.State == ConnectionState.Broken)
    //            sql.con.Open();
    //        sql.cmd6.Connection = sql.con;
    //        sql.cmd6.CommandType = CommandType.StoredProcedure;
    //        sql.cmd6.CommandText = "[SP_GETFUELLAPPROVERSEMAIL]";
    //        sql.cmd6.Parameters.Clear();
    //        sql.adp4.SelectCommand = sql.cmd6;
    //        sql.cmd6.Parameters.AddWithValue("@Emp_code", empcode);
    //        sql.cmd6.Parameters.AddWithValue("@Grade", Grade);
    //        sql.cmd6.Parameters.AddWithValue("@Conditiontype_id", Leaveconditionid);

    //        if (Convert.ToString(remid).Trim() != "0")
    //            sql.cmd6.Parameters.AddWithValue("@rem_id", remid);

    //        dtApproverEmailId = new DataTable();
    //        sql.adp4.Fill(dtApproverEmailId);
    //        return dtApproverEmailId;
    //    }
    //    catch (Exception)
    //    {

    //        throw;
    //    }

    //    finally
    //    {
    //        sql.con.Close();

    //    }

    //}
    
    public DataTable GeTfuelApproverEmailID(string empcode, string Grade, int Leaveconditionid, Decimal remid, string comp_code, int dept_id)
    {
        var parameters = new List<SqlParameter>
        {
           new SqlParameter("@Emp_code", empcode),
           new SqlParameter("@Grade", Grade),
           new SqlParameter("@Conditiontype_id", Leaveconditionid),
           new SqlParameter("@DeptId", dept_id),
           new SqlParameter("@Comp_Code", comp_code)
        };
        if (Convert.ToString(remid).Trim() != "0")
            parameters.Add(new SqlParameter("@rem_id", remid));

        return ExecuteDataTable("GeTfuelApproverEmailID","SP_GETFUELLAPPROVERSEMAIL_COMP","", parameters.ToArray());
    }
    public DataTable GeTPaymentVoucherApproverEmailID(string empcode, string Grade, int Leaveconditionid, Decimal remid)
    {
        var parameters = new List<SqlParameter>
        {
           new SqlParameter("@Emp_code", empcode),
           new SqlParameter("@Grade", Grade),
           new SqlParameter("@Conditiontype_id", Leaveconditionid)
        };
        if (Convert.ToString(remid).Trim() != "0")
            parameters.Add(new SqlParameter("@rem_id", remid));

        return ExecuteDataTable("GeTPaymentVoucherApproverEmailID", "SP_GETPAYMENTVOUCHERAPPROVERSEMAIL", "", parameters.ToArray());
    }
    public void RrejectFuelrequest(int remid, string emp_code, int apprid, string comments, string stype)
    {
        var parameters = new List<SqlParameter>
        {
             new SqlParameter("@empcode", emp_code),
             new SqlParameter("@rem_id", remid),
             new SqlParameter("@stype", stype)
       };

        if (stype == "Canceltravelrequest")
            parameters.Add(new SqlParameter("@apprid", DBNull.Value));
        else
            parameters.Add(new SqlParameter("@apprid", apprid));


        if (stype == "Canceltravelrequest")
            parameters.Add(new SqlParameter("@Status_id", 3));

        if (stype == "Canceltravelrequest")
            parameters.Add(new SqlParameter("@comments", DBNull.Value));
        else
            parameters.Add(new SqlParameter("@comments", comments));

        if (stype == "rejectFuelReimbursementrequest")
            parameters.Add(new SqlParameter("@Status_id", 4));

        if (stype == "CorrectionFuelReimbursementrequest")
            parameters.Add(new SqlParameter("@Status_id", 5));


        ExecuteNonQuery("RrejectFuelrequest","sp_RejectFuelRequest", stype, parameters.ToArray());
    }
    public void RrejectMobilerequest(int remid, string emp_code, int apprid, string comments, string stype)
    {
        var parameters = new List<SqlParameter>
        {
             new SqlParameter("@Emp_Code", emp_code),
             new SqlParameter("@rem_id", remid),
             new SqlParameter("@stype", stype)
       };

        if (stype == "Canceltravelrequest")
            parameters.Add(new SqlParameter("@apprid", DBNull.Value));
        else
            parameters.Add(new SqlParameter("@apprid", apprid));

        if (stype == "Canceltravelrequest")
            parameters.Add(new SqlParameter("@Status_id", 3));
        else if (stype == "rejecttravelrequest")
            parameters.Add(new SqlParameter("@Status_id", 4));
        else if (stype == "rejectFuelReimbursementrequest")
            parameters.Add(new SqlParameter("@Status_id", 4));
        else
            parameters.Add(new SqlParameter("@Status_id", 5));


        if (stype == "Canceltravelrequest")
            parameters.Add(new SqlParameter("@comments", DBNull.Value));
        else
            parameters.Add(new SqlParameter("@comments", comments));

        ExecuteNonQuery("RrejectMobilerequest","sp_RejectMobileRequest", stype,parameters.ToArray());
    }
    public void RrejectPaymentrequest(int remid, string emp_code, int apprid, string comments, string stype)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Emp_Code", emp_code),
            new SqlParameter("@rem_id", remid),
            new SqlParameter("@stype", stype)
        };

        if (stype == "Canceltravelrequest")
        {
            parameters.Add(new SqlParameter("@apprid", DBNull.Value));
        }
        else
        {
            parameters.Add(new SqlParameter("@apprid", apprid));
        }

        if (stype == "Canceltravelrequest")
            parameters.Add(new SqlParameter("@Status_id", 3));
        else if (stype == "rejecttravelrequest")
            parameters.Add(new SqlParameter("@Status_id", 4));
        else if (stype == "rejectFuelReimbursementrequest")
            parameters.Add(new SqlParameter("@Status_id", 4));
        else
            parameters.Add(new SqlParameter("@Status_id", 5));

        if (stype == "Canceltravelrequest")
            parameters.Add(new SqlParameter("@comments", DBNull.Value));
        else
            parameters.Add(new SqlParameter("@comments", comments));

        ExecuteNonQuery("RrejectPaymentrequest","sp_RejectPaymentRequest", stype, parameters.ToArray());
    }
    public void InsertMobileApproverDetails(string apprcode, int apprid, int MaxTriptId, string Isappstatus)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", "INSERT"),
            new SqlParameter("@Trip_id", MaxTriptId),
            new SqlParameter("@APPR_EMP_CODE", apprcode),
            new SqlParameter("@Action", "Pending"),
            new SqlParameter("@SYSTEM_APP", "N"),
            new SqlParameter("@APPR_ID", apprid)
        };
        ExecuteNonQuery("InsertMobileApproverDetails","usp_InsertMobileApprDetails", "INSERT", parameters);
    }
    public void InsertPaymentVoucherApproverDetails(string apprcode, int apprid, int MaxTriptId, string Isappstatus)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", "INSERT"),
            new SqlParameter("@Trip_id", MaxTriptId),
            new SqlParameter("@APPR_EMP_CODE", apprcode),
            new SqlParameter("@Action", "Pending"),
           new SqlParameter("@SYSTEM_APP", "N"),
           new SqlParameter("@APPR_ID", apprid)
        };
        ExecuteNonQuery("InsertPaymentVoucherApproverDetails","usp_InsertPaymentVoucherApprDetails", "INSERT", parameters);
    }
    public DataTable GeTfuelApproverEmailID_OrgFuel(string empcode, string Grade, int Leaveconditionid, Decimal remid)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Emp_code", empcode),
            new SqlParameter("@Grade", Grade),
            new SqlParameter("@Conditiontype_id", Leaveconditionid)
        };
        if (Convert.ToString(remid).Trim() != "0")
        {
            parameters.Add(new SqlParameter("@rem_id", remid));
        }
        return ExecuteDataTable("GeTfuelApproverEmailID_OrgFuel","SP_GETFUELLAPPROVERSEMAIL_OrgFuel","", parameters.ToArray());
    }
    public DataTable GetEmployeeData_Email_FuelType(string email_Id)
    {
        var parameters = new[]
        {
           new SqlParameter("@stype", "get_employee_details_bylogin_id_FuelType"),
           new SqlParameter("@emp_login_id", email_Id)
        };
        return ExecuteDataTable("GetEmployeeData_Email_FuelType","Usp_getEmployee_Details_All", "get_employee_details_bylogin_id_FuelType",parameters);
    }
    public DataTable GetFuelClaimDetailsEdit_OutstationCOS(int renid, int claimsid, string strempcode)
    {
        var parameters = new[]
       {
           new SqlParameter("@stype", "sp_getempFuelclaimdetailsOut_EditCOS"),
           new SqlParameter("@rem_id", renid),
           new SqlParameter("@claimsid", claimsid),
           new SqlParameter("@empcode", strempcode)
        };
        return ExecuteDataTable("GetFuelClaimDetailsEdit_OutstationCOS","SP_GETALLreembursement_DETAILS", "sp_getempFuelclaimdetailsOut_EditCOS", parameters);
    }

    #endregion

    #region Reembursement Emails
    #region E-mail to Next Approvers
    //public void Fuel_send_mailto_Next_Approver(string ReqMailID, string toMailIDs, string strsubject, string Quantity, string amount, string applist, string Empployee_Name, string strmobileRemUrl, string strclaim_month)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    //string Emp_Name = "";
    //    //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    strsubject = strsubject + " of " + Empployee_Name;
    //    try
    //    {
    //        strbuild = new StringBuilder();

    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            if (strsubject.Contains("Fuel bill"))
    //                strbuild.Append("<tr><td> " + Empployee_Name + "  has submitted Fuel bills for reimbursement as per the details below. Request your approval please.</td></tr>");
    //            else
    //                strbuild.Append("<tr><td> " + Empployee_Name + "  has submitted Mobile bills for reimbursement as per the details below. Request your approval please..</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Arial;font-style:Regular>");
    //            if (strsubject.Contains("Fuel bill"))
    //                strbuild.Append("<tr><td>Type :</td><td colspan=2>Fuel</td></tr>");
    //            else
    //                strbuild.Append("<tr><td>Type :</td><td colspan=2>Mobile</td></tr>");
    //            if (strsubject.Contains("Fuel bill"))
    //            {
    //                strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
    //                strbuild.Append("<tr><td>Total Quantity claimed :</td><td> " + Quantity + "</td></tr>");
    //                strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
    //            }
    //            else
    //            {
    //                strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
    //                strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
    //            }
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
    //            strbuild.Append("</table>");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            //strbuild.Append("<tr><td style='height:20px'><a herf='#' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'><a href='" + strmobileRemUrl + "'> Please click here to review / approve </a></td></tr>");
    //            strbuild.Append("</table>");

    //        }


    //        sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");

    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}

    public void Fuel_send_mailto_Next_Approver(string ReqMailID, string toMailIDs, string strsubject, string Quantity, string amount, string applist, string Empployee_Name, string strmobileRemUrl, string strclaim_month)
    {
        StringBuilder strbuild = new StringBuilder();
        //string Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Empployee_Name;

        if (amount.Contains(","))
        {

        }
        else
        {
            decimal parsed = decimal.Parse(amount, CultureInfo.InvariantCulture);
            CultureInfo hindi = new CultureInfo("hi-IN");
            amount = string.Format(hindi, "{0:#,#0.00}", parsed);
        }

        try
        {
            strbuild = new StringBuilder();

            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                if (strsubject.Contains("Fuel bill"))
                    strbuild.Append("<tr><td> " + Empployee_Name + "  has submitted Fuel bills for reimbursement as per the details below. Request your approval please.</td></tr>");
                else
                    strbuild.Append("<tr><td> " + Empployee_Name + "  has submitted Mobile bills for reimbursement as per the details below. Request your approval please..</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                if (strsubject.Contains("Fuel bill"))
                    strbuild.Append("<tr><td>Type :</td><td colspan=2>Fuel</td></tr>");
                else
                    strbuild.Append("<tr><td>Type :</td><td colspan=2>Mobile</td></tr>");
                if (strsubject.Contains("Fuel bill"))
                {
                    strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
                    strbuild.Append("<tr><td>Total Quantity claimed :</td><td> " + Quantity + "</td></tr>");
                    strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
                }
                else
                {
                    strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
                    strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
                }
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'><a herf='#' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strmobileRemUrl + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }

    //public void Payment_send_mailto_Next_Approver(string ReqMailID, string toMailIDs, string strsubject, string Quantity, string amount, string applist, string Empployee_Name, string strmobileRemUrl, string strclaim_month)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    //string Emp_Name = "";
    //    //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    strsubject = strsubject + " of " + Empployee_Name;

    //    if (amount.Contains(","))
    //    {

    //    }
    //    else
    //    {
    //        decimal parsed = decimal.Parse(amount, CultureInfo.InvariantCulture);
    //        CultureInfo hindi = new CultureInfo("hi-IN");
    //        amount = string.Format(hindi, "{0:#,#0.00}", parsed);
    //    }


    //    try
    //    {
    //        strbuild = new StringBuilder();

    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td> " + Empployee_Name + "  has submitted Payment Voucher for reimbursement as per the details below. Request your approval please..</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Arial;font-style:Regular>");
    //            strbuild.Append("<tr><td>Type :</td><td colspan=2>Payment Voucher</td></tr>");
    //            strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
    //            strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
    //            strbuild.Append("</table>");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            //strbuild.Append("<tr><td style='height:20px'><a herf='#' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'><a href='" + strmobileRemUrl + "'> Please click here to review / approve </a></td></tr>");
    //            strbuild.Append("</table>");

    //        }


    //        sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");

    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}

    public void Payment_send_mailto_Next_Approver(string ReqMailID, string toMailIDs, string strsubject, string Quantity, string amount, string applist, string Empployee_Name, string strmobileRemUrl, string strclaim_month)
    {
        StringBuilder strbuild = new StringBuilder();
        //string Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Empployee_Name;

        if (amount.Contains(","))
        {

        }
        else
        {
            decimal parsed = decimal.Parse(amount, CultureInfo.InvariantCulture);
            CultureInfo hindi = new CultureInfo("hi-IN");
            amount = string.Format(hindi, "{0:#,#0.00}", parsed);
        }


        try
        {
            strbuild = new StringBuilder();

            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Empployee_Name + "  has submitted Payment Voucher for reimbursement as per the details below. Request your approval please..</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Type :</td><td colspan=2>Payment Voucher</td></tr>");
                strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
                strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'><a herf='#' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strmobileRemUrl + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail to 1st Approver
    //public void Fuel_send_mailto_RM_Approver(string ReqMailID, string toMailIDs, string strsubject, string Quantity, string amount, string applist, string Empployee_Name, string ccmailid, string strmobileRemUrl, string strclaimtable, string strclaim_month)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    //Emp_Name = "";
    //    //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();

    //    strsubject = strsubject + " of " + Empployee_Name;
    //    try
    //    {
    //        strbuild = new StringBuilder();
    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");

    //            if (strsubject.Contains("Fuel"))
    //                strbuild.Append("<tr><td> " + Empployee_Name + "  has submitted Fuel reimbursement as per the details below. Request your approval please.</td></tr>");
    //            else
    //                strbuild.Append("<tr><td> " + Empployee_Name + "  has submitted Mobile bills for reimbursement as per the details below. Request your approval please..</td></tr>");

    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='width:40%';'color:#000000;font-size:11pt;font-family:Arial;font-style:Regular>");

    //            if (strsubject.Contains("Fuel bill"))
    //            {
    //                strbuild.Append("<tr><td>Type :</td><td colspan=2>Fuel</td></tr>");
    //                strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
    //                strbuild.Append("<tr><td>Total Quantity claimed :</td><td> " + Quantity + "</td></tr>");
    //                strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
    //            }
    //            else
    //            {
    //                strbuild.Append("<tr><td>Type :</td><td colspan=2>Mobile</td></tr>");
    //                strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
    //                strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
    //            }

    //            if (Convert.ToString(strclaimtable).Trim() != "")
    //            {
    //                strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //                strbuild.Append("<tr><td colspan=2>" + Convert.ToString(strclaimtable).Trim() + "</td></tr>");
    //            }
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");

    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            //strbuild.Append("<tr><td style='height:20px'><a herf='InboxLeave_Req.aspx' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'><a href='" + strmobileRemUrl + "'> Please click here to review / approve </a></td></tr>");
    //            strbuild.Append("</table>");
    //        }

    //        sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);


    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}

    public void Fuel_send_mailto_RM_Approver(string ReqMailID, string toMailIDs, string strsubject, string Quantity, string amount, string applist, string Empployee_Name, string ccmailid, string strmobileRemUrl, string strclaimtable, string strclaim_month)
    {
        StringBuilder strbuild = new StringBuilder();
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();

        strsubject = strsubject + " of " + Empployee_Name;

        if (amount.Contains(","))
        {

        }
        else
        {
            decimal parsed = decimal.Parse(amount, CultureInfo.InvariantCulture);
            CultureInfo hindi = new CultureInfo("hi-IN");
            amount = string.Format(hindi, "{0:#,#0.00}", parsed);
        }
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");

                if (strsubject.Contains("Fuel"))
                    strbuild.Append("<tr><td> " + Empployee_Name + "  has submitted Fuel reimbursement as per the details below. Request your approval please.</td></tr>");
                else
                    strbuild.Append("<tr><td> " + Empployee_Name + "  has submitted Mobile bills for reimbursement as per the details below. Request your approval please..</td></tr>");

                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:40%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");

                if (strsubject.Contains("Fuel bill"))
                {
                    strbuild.Append("<tr><td>Type :</td><td colspan=2>Fuel</td></tr>");
                    strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
                    strbuild.Append("<tr><td>Total Quantity claimed :</td><td> " + Quantity + "</td></tr>");
                    strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
                }
                else
                {
                    strbuild.Append("<tr><td>Type :</td><td colspan=2>Mobile</td></tr>");
                    strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
                    strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
                }

                if (Convert.ToString(strclaimtable).Trim() != "")
                {
                    strbuild.Append("<tr><td style='height:20px'></td></tr>");
                    strbuild.Append("<tr><td colspan=2>" + Convert.ToString(strclaimtable).Trim() + "</td></tr>");
                }
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");

                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'><a herf='InboxLeave_Req.aspx' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strmobileRemUrl + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }

    //public void PaymentVoucher_send_mailto_RM_Approver(string ReqMailID, string toMailIDs, string strsubject, string Quantity, string amount, string applist, string Empployee_Name, string ccmailid, string strmobileRemUrl, string strclaimtable, string strclaim_month)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    //Emp_Name = "";
    //    //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();

    //    strsubject = strsubject + " of " + Empployee_Name;
    //    try
    //    {
    //        strbuild = new StringBuilder();
    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");

    //            strbuild.Append("<tr><td> " + Empployee_Name + "  has submitted Payment Voucher bills for reimbursement as per the details below. Request your approval please..</td></tr>");

    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='width:40%';'color:#000000;font-size:11pt;font-family:Arial;font-style:Regular>");

    //            strbuild.Append("<tr><td>Type :</td><td colspan=2>Payment Voucher</td></tr>");
    //            strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
    //            strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");

    //            if (Convert.ToString(strclaimtable).Trim() != "")
    //            {
    //                strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //                strbuild.Append("<tr><td colspan=2>" + Convert.ToString(strclaimtable).Trim() + "</td></tr>");
    //            }
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");

    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            //strbuild.Append("<tr><td style='height:20px'><a herf='InboxLeave_Req.aspx' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'><a href='" + strmobileRemUrl + "'> Please click here to review / approve </a></td></tr>");
    //            strbuild.Append("</table>");
    //        }

    //        sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);


    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}

    public void PaymentVoucher_send_mailto_RM_Approver(string ReqMailID, string toMailIDs, string strsubject, string Quantity, string amount, string applist, string Empployee_Name, string ccmailid, string strmobileRemUrl, string strclaimtable, string strclaim_month)
    {
        StringBuilder strbuild = new StringBuilder();
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();

        strsubject = strsubject + " of " + Empployee_Name;

        if (amount.Contains(","))
        {

        }
        else
        {
            decimal parsed = decimal.Parse(amount, CultureInfo.InvariantCulture);
            CultureInfo hindi = new CultureInfo("hi-IN");
            amount = string.Format(hindi, "{0:#,#0.00}", parsed);
        }

        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");

                strbuild.Append("<tr><td> " + Empployee_Name + "  has submitted Payment Voucher bills for reimbursement as per the details below. Request your approval please..</td></tr>");

                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:40%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");

                strbuild.Append("<tr><td>Type :</td><td colspan=2>Payment Voucher</td></tr>");
                strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
                strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");

                if (Convert.ToString(strclaimtable).Trim() != "")
                {
                    strbuild.Append("<tr><td style='height:20px'></td></tr>");
                    strbuild.Append("<tr><td colspan=2>" + Convert.ToString(strclaimtable).Trim() + "</td></tr>");
                }
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");

                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'><a herf='InboxLeave_Req.aspx' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strmobileRemUrl + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail of Rejection to Previous level Approvers & Intermediates
    //public void Fuel_send_mail_Rejection_Correction(string ReqMailID, string ApprMailIDs, string strsubject, string Quantity, string amount, string strcc, string applist, string tRemarks, string Empployee_Name, string strclaim_month)
    //{

    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    string appr_name = "";
    //    string FuelType = "";
    //    string Ftype = "";
    //    //Emp_Name = "";
    //    dt_emp = GetEmployeeData_Email_FuelType(ReqMailID.ToString());
    //    //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    strsubject = strsubject + " of " + Empployee_Name;
    //    //dt_emp = null;
    //    //dt_emp = GetEmployeeData_Email(ApprMailIDs.ToString());
    //    //appr_name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    if (strsubject.Contains("Fuel"))
    //    {
    //        FuelType = Convert.ToString(dt_emp.Rows[0]["FuelType"]);
    //        if (FuelType == "P" || FuelType == "p")
    //        {
    //            Ftype = "Petrol";
    //        }
    //        else
    //        {
    //            Ftype = "Diesel";
    //        }
    //    }
    //    try
    //    {
    //        strbuild = new StringBuilder();
    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td >   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px' ></td></tr>");
    //            //strbuild.Append("<tr><td > Dear  " + Empployee_Name + ",</td></tr>");
    //            strbuild.Append("<tr><td  style='height:20px'> </td></tr>");
    //            if (strsubject.Contains("Fuel bill"))
    //            {
    //                strbuild.Append("<tr><td > This is to inform you that " + ApprMailIDs + " has <b>Rejected</b> the Fuel bill Reimbursement request of " + Empployee_Name + ".</td></tr>");
    //            }
    //            else if (strsubject.Contains("Fuel Reimbursement Correction"))
    //            {
    //                //  strbuild.Append("<tr><td> This is to inform you that " + appr_name + " has sent back the Travel request for correction of " + Empployee_Name + " as per the details below.</td></tr>");
    //                strbuild.Append("<tr><td > This is to inform you that " + ApprMailIDs + " has  sent back to the Fuel Reimbursement request for correction  of " + Empployee_Name + ".</td></tr>");
    //            }
    //            else if (strsubject.Contains("Mobile Reimbursement Correction"))
    //            {
    //                strbuild.Append("<tr><td > This is to inform you that " + ApprMailIDs + "  has sent back to the Mobile Reimbursement request for correction  of " + Empployee_Name + ".</td></tr>");
    //            }
    //            else
    //            {
    //                strbuild.Append("<tr><td > This is to inform you that " + ApprMailIDs + " has <b>Rejected</b> the Mobile bill Reimbursement request of " + Empployee_Name + ".</td></tr>");
    //            }

    //            strbuild.Append("<tr><td   style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td >");
    //            strbuild.Append("<tr><td style='height:20px' ></td></tr>");
    //            strbuild.Append("<tr><td >");
    //            strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Arial;font-style:Regular>");
    //            if (strsubject.Contains("Fuel bill"))
    //            {
    //                strbuild.Append("<tr><td >Type :</td><td colspan=2>Fuel</td></tr>");


    //            }
    //            else if (strsubject.Contains("Fuel Reimbursement Correction"))
    //            {
    //                strbuild.Append("<tr><td >Type :</td><td colspan=2>Fuel  (" + Ftype + ") </td></tr>");
    //            }
    //            else if (strsubject.Contains("Mobile Reimbursement Correction"))
    //            {
    //                strbuild.Append("<tr><td >Type :</td><td colspan=2>Mobile</td></tr>");
    //            }
    //            else
    //            {
    //                strbuild.Append("<tr><td >Type :</td><td colspan=2>Mobile</td></tr>");
    //            }
    //            if (strsubject.Contains("Fuel bill"))
    //            {
    //                strbuild.Append("<tr><td >Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
    //                strbuild.Append("<tr><td >Total Quantity claimed :</td><td> " + Quantity + "</td></tr>");
    //                strbuild.Append("<tr><td >Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
    //            }
    //            else if (strsubject.Contains("Fuel Reimbursement Correction"))
    //            {
    //                strbuild.Append("<tr><td >Claim Month :</td><td colspan=3>" + strclaim_month + "</td></tr>");
    //                strbuild.Append("<tr><td >Total Quantity claimed :</td><td> <B> " + Quantity + " L <B/></td></tr>");
    //                strbuild.Append("<tr><td >Total amount claimed :</td><td colspan=3> <B> &#8377 <B/>  " + amount + "</td></tr>");
    //            }
    //            else if (strsubject.Contains("Mobile Reimbursement Correction"))
    //            {
    //                strbuild.Append("<tr><td >Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
    //                strbuild.Append("<tr><td >Total amount claimed :</td><td colspan=2>  <B> &#8377 <B/> " + amount + "</td></tr>");
    //            }
    //            else
    //            {
    //                strbuild.Append("<tr><td >Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
    //                strbuild.Append("<tr><td >Total amount claimed :</td><td colspan=2>  <B> &#8377 <B/> " + amount + "</td></tr>");
    //            }
    //            strbuild.Append("<tr><td > Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
    //            if (strsubject.Contains("Fuel Reimbursement Correction"))
    //            {
    //                strbuild.Append("<tr><td >Status :</td><td colspan=2> " + applist + " </td></tr>");
    //            }
    //            else if (strsubject.Contains("Mobile Reimbursement Correction"))
    //            {
    //                strbuild.Append("<tr><td >Status :</td><td colspan=2> " + applist + " </td></tr>");
    //            }
    //            else
    //            {
    //                strbuild.Append("<tr><td >Status :</td><td colspan=2>" + applist + "</td></tr>");
    //            }
    //            strbuild.Append("<tr><td > For your information please.</td></tr>");
    //            strbuild.Append("</table>");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("</table>");
    //        }

    //        //sendMail("ashok.wani@highbartech.com", strsubject, Convert.ToString(strbuild).Trim(), "", "ashok.wani@highbartech.com");
    //        //sendMail("ashok.wani@highbartech.com", "ashok.wani@highbartech.com", "", "Send For Correction", Convert.ToString(strbuild).Trim(), "");
    //        sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", strcc);

    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}

    public void Fuel_send_mail_Rejection_Correction(string ReqMailID, string ApprMailIDs, string strsubject, string Quantity, string amount, string strcc, string applist, string tRemarks, string Empployee_Name, string strclaim_month)
    {

        StringBuilder strbuild = new StringBuilder();
        DataTable dt_emp = new DataTable();
        string FuelType = "";
        string Ftype = "";
        //Emp_Name = "";
        dt_emp = GetEmployeeData_Email_FuelType(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Empployee_Name;
        //dt_emp = null;
        //dt_emp = GetEmployeeData_Email(ApprMailIDs.ToString());
        //appr_name = dt_emp.Rows[0]["Emp_Name"].ToString();

        if (amount.Contains(","))
        {

        }
        else
        {
            decimal parsed = decimal.Parse(amount, CultureInfo.InvariantCulture);
            CultureInfo hindi = new CultureInfo("hi-IN");
            amount = string.Format(hindi, "{0:#,#0.00}", parsed);
        }

        if (strsubject.Contains("Fuel"))
        {
            FuelType = Convert.ToString(dt_emp.Rows[0]["FuelType"]);
            if (FuelType == "P" || FuelType == "p")
            {
                Ftype = "Petrol";
            }
            else
            {
                Ftype = "Diesel";
            }
        }
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td >   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px' ></td></tr>");
                //strbuild.Append("<tr><td > Dear  " + Empployee_Name + ",</td></tr>");
                strbuild.Append("<tr><td  style='height:20px'> </td></tr>");
                if (strsubject.Contains("Fuel bill"))
                {
                    strbuild.Append("<tr><td > This is to inform you that " + ApprMailIDs + " has <b>Rejected</b> the Fuel bill Reimbursement request of " + Empployee_Name + ".</td></tr>");
                }
                else if (strsubject.Contains("Fuel Reimbursement Correction"))
                {
                    //  strbuild.Append("<tr><td> This is to inform you that " + appr_name + " has sent back the Travel request for correction of " + Empployee_Name + " as per the details below.</td></tr>");
                    strbuild.Append("<tr><td > This is to inform you that " + ApprMailIDs + " has  sent back to the Fuel Reimbursement request for correction  of " + Empployee_Name + ".</td></tr>");
                }
                else if (strsubject.Contains("Mobile Reimbursement Correction"))
                {
                    strbuild.Append("<tr><td > This is to inform you that " + ApprMailIDs + "  has sent back to the Mobile Reimbursement request for correction  of " + Empployee_Name + ".</td></tr>");
                }
                else
                {
                    strbuild.Append("<tr><td > This is to inform you that " + ApprMailIDs + " has <b>Rejected</b> the Mobile bill Reimbursement request of " + Empployee_Name + ".</td></tr>");
                }

                strbuild.Append("<tr><td   style='height:20px'></td></tr>");
                strbuild.Append("<tr><td >");
                strbuild.Append("<tr><td style='height:20px' ></td></tr>");
                strbuild.Append("<tr><td >");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                if (strsubject.Contains("Fuel bill"))
                {
                    strbuild.Append("<tr><td >Type :</td><td colspan=2>Fuel</td></tr>");


                }
                else if (strsubject.Contains("Fuel Reimbursement Correction"))
                {
                    strbuild.Append("<tr><td >Type :</td><td colspan=2>Fuel  (" + Ftype + ") </td></tr>");
                }
                else if (strsubject.Contains("Mobile Reimbursement Correction"))
                {
                    strbuild.Append("<tr><td >Type :</td><td colspan=2>Mobile</td></tr>");
                }
                else
                {
                    strbuild.Append("<tr><td >Type :</td><td colspan=2>Mobile</td></tr>");
                }
                if (strsubject.Contains("Fuel bill"))
                {
                    strbuild.Append("<tr><td >Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
                    strbuild.Append("<tr><td >Total Quantity claimed :</td><td> " + Quantity + "</td></tr>");
                    strbuild.Append("<tr><td >Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
                }
                else if (strsubject.Contains("Fuel Reimbursement Correction"))
                {
                    strbuild.Append("<tr><td >Claim Month :</td><td colspan=3>" + strclaim_month + "</td></tr>");
                    strbuild.Append("<tr><td >Total Quantity claimed :</td><td> <B> " + Quantity + " L <B/></td></tr>");
                    strbuild.Append("<tr><td >Total amount claimed :</td><td colspan=3> <B> &#8377 <B/>  " + amount + "</td></tr>");
                }
                else if (strsubject.Contains("Mobile Reimbursement Correction"))
                {
                    strbuild.Append("<tr><td >Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
                    strbuild.Append("<tr><td >Total amount claimed :</td><td colspan=2>  <B> &#8377 <B/> " + amount + "</td></tr>");
                }
                else
                {
                    strbuild.Append("<tr><td >Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
                    strbuild.Append("<tr><td >Total amount claimed :</td><td colspan=2>  <B> &#8377 <B/> " + amount + "</td></tr>");
                }
                strbuild.Append("<tr><td > Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                if (strsubject.Contains("Fuel Reimbursement Correction"))
                {
                    strbuild.Append("<tr><td >Status :</td><td colspan=2> " + applist + " </td></tr>");
                }
                else if (strsubject.Contains("Mobile Reimbursement Correction"))
                {
                    strbuild.Append("<tr><td >Status :</td><td colspan=2> " + applist + " </td></tr>");
                }
                else
                {
                    strbuild.Append("<tr><td >Status :</td><td colspan=2>" + applist + "</td></tr>");
                }
                strbuild.Append("<tr><td > For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }

            //sendMail("ashok.wani@highbartech.com", strsubject, Convert.ToString(strbuild).Trim(), "", "ashok.wani@highbartech.com");
            //sendMail("ashok.wani@highbartech.com", "ashok.wani@highbartech.com", "", "Send For Correction", Convert.ToString(strbuild).Trim(), "");
            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", strcc);
        }
        catch (Exception ex)
        {

        }
    }

    public DataTable GetFuelClaimDetailsById_approver(int remid, string strinboxtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@rem_id", remid),
            new SqlParameter("@stype", (strinboxtype == "RCOS") ? (object)"sp_getempFuelclaimdetailsbyid_Approvr_COS" : (object)"sp_getempFuelclaimdetailsbyid_Approvr")
        };
        return ExecuteDataTable("GetFuelClaimDetailsById_approver","SP_GETALLreembursement_DETAILS", "sp_getempFuelclaimdetailsbyid_Approvr_COS", parameters);

    }


    //public void Payment_send_mail_Rejection_Correction(string ReqMailID, string ApprMailIDs, string strsubject, string Quantity, string amount, string strcc, string applist, string tRemarks, string Empployee_Name, string strclaim_month)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    string appr_name = "";
    //    //Emp_Name = "";
    //    //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    strsubject = strsubject + " of " + Empployee_Name;
    //    //dt_emp = null;
    //    //dt_emp = GetEmployeeData_Email(ApprMailIDs.ToString());
    //    //appr_name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    try
    //    {
    //        strbuild = new StringBuilder();
    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td> This is to inform you that " + ApprMailIDs + " has <b>Rejected</b> the Payment Voucher Reimbursement request of " + Empployee_Name + ".</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Arial;font-style:Regular>");
    //            strbuild.Append("<tr><td>Type :</td><td colspan=2>Payment Voucher</td></tr>");
    //            strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
    //            strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
    //            strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
    //            strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
    //            strbuild.Append("<tr><td> For your information please.</td></tr>");
    //            strbuild.Append("</table>");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("</table>");
    //        }

    //        sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", strcc);

    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}

    public void Payment_send_mail_Rejection_Correction(string ReqMailID, string ApprMailIDs, string strsubject, string Quantity, string amount, string strcc, string applist, string tRemarks, string Empployee_Name, string strclaim_month)
    {
        StringBuilder strbuild = new StringBuilder();
        DataTable dt_emp = new DataTable();
        string appr_name = "";
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Empployee_Name;
        //dt_emp = null;
        //dt_emp = GetEmployeeData_Email(ApprMailIDs.ToString());
        //appr_name = dt_emp.Rows[0]["Emp_Name"].ToString();

        if (amount.Contains(","))
        {

        }
        else
        {
            decimal parsed = decimal.Parse(amount, CultureInfo.InvariantCulture);
            CultureInfo hindi = new CultureInfo("hi-IN");
            amount = string.Format(hindi, "{0:#,#0.00}", parsed);
        }
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> This is to inform you that " + ApprMailIDs + " has <b>Rejected</b> the Payment Voucher Reimbursement request of " + Empployee_Name + ".</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Type :</td><td colspan=2>Payment Voucher</td></tr>");
                strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
                strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", strcc);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail of Approval to Previous level Approvers & Intermediates
    //public void Fuel_send_mailto_Next_Approver_Intermediate(string ReqMailID, string toMailIDs, string strsubject, string Quantity, string amount, string applist, string Empployee_Name, string AppMailID, string strclaim_month)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    //  string Emp_Name = "";
    //    string AppEmp_Name = "";

    //    //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    if (strsubject.Contains("Mobile"))
    //    {
    //        strsubject = strsubject;
    //    }
    //    else
    //    {
    //        strsubject = strsubject + " of " + Empployee_Name;
    //    }
    //    //dt_emp = new DataTable();
    //    //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
    //    //  AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();
    //    AppEmp_Name = AppMailID;

    //    try
    //    {
    //        strbuild = new StringBuilder();
    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            if (strsubject.Contains("Fuel bill"))
    //                strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has Approved the Fuel Reimbursement request of " + Empployee_Name + " as per the details below.</td></tr>");
    //            else
    //                strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + Empployee_Name + " as per the details below.</td></tr>");



    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Arial;font-style:Regular'>");
    //            if (strsubject.Contains("Fuel bill"))
    //                strbuild.Append("<tr><td>Type :</td><td colspan=2>Fuel</td></tr>");
    //            else
    //                strbuild.Append("<tr><td>Type :</td><td colspan=2>Mobile</td></tr>");
    //            if (strsubject.Contains("Fuel bill"))
    //            {
    //                strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
    //                strbuild.Append("<tr><td>Total Quantity claimed :</td><td> " + Quantity + "</td></tr>");
    //                strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
    //            }
    //            else
    //            {
    //                strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
    //                strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
    //            }
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
    //            strbuild.Append("<tr><td> For your information please.</td></tr>");
    //            strbuild.Append("</table>");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("</table>");

    //        }


    //        sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);

    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}

    public void Fuel_send_mailto_Next_Approver_Intermediate(string ReqMailID, string toMailIDs, string strsubject, string Quantity, string amount, string applist, string Empployee_Name, string AppMailID, string strclaim_month)
    {
        StringBuilder strbuild = new StringBuilder();
        //  string Emp_Name = "";
        string AppEmp_Name = "";

        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        if (strsubject.Contains("Mobile"))
        {
            strsubject = strsubject;
        }
        else
        {
            strsubject = strsubject + " of " + Empployee_Name;
        }
        //dt_emp = new DataTable();
        //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
        //  AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();
        AppEmp_Name = AppMailID;

        if (amount.Contains(","))
        {

        }
        else
        {
            decimal parsed = decimal.Parse(amount, CultureInfo.InvariantCulture);
            CultureInfo hindi = new CultureInfo("hi-IN");
            amount = string.Format(hindi, "{0:#,#0.00}", parsed);
        }

        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                if (strsubject.Contains("Fuel bill"))
                    strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has Approved the Fuel Reimbursement request of " + Empployee_Name + " as per the details below.</td></tr>");
                else
                    strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + Empployee_Name + " as per the details below.</td></tr>");

                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                if (strsubject.Contains("Fuel bill"))
                    strbuild.Append("<tr><td>Type :</td><td colspan=2>Fuel</td></tr>");
                else
                    strbuild.Append("<tr><td>Type :</td><td colspan=2>Mobile</td></tr>");
                if (strsubject.Contains("Fuel bill"))
                {
                    strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
                    strbuild.Append("<tr><td>Total Quantity claimed :</td><td> " + Quantity + "</td></tr>");
                    strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
                }
                else
                {
                    strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
                    strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
                }
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);
        }
        catch (Exception ex)
        {

        }
    }

    //public void Payment_send_mailto_Next_Approver_Intermediate(string ReqMailID, string toMailIDs, string strsubject, string Quantity, string amount, string applist, string Empployee_Name, string AppMailID, string strclaim_month)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    //  string Emp_Name = "";
    //    string AppEmp_Name = "";

    //    //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    strsubject = strsubject + " of " + Empployee_Name;
    //    //dt_emp = new DataTable();
    //    //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
    //    //  AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();
    //    AppEmp_Name = AppMailID;

    //    try
    //    {
    //        strbuild = new StringBuilder();
    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has Approved the Payment Voucher Reimbursement request of " + Empployee_Name + " as per the details below.</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Arial;font-style:Regular'>");
    //            strbuild.Append("<tr><td>Type :</td><td colspan=2>Payment Voucher</td></tr>");
    //            strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
    //            strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
    //            strbuild.Append("<tr><td> For your information please.</td></tr>");
    //            strbuild.Append("</table>");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("</table>");

    //        }


    //        sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);

    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}

    public void Payment_send_mailto_Next_Approver_Intermediate(string ReqMailID, string toMailIDs, string strsubject, string Quantity, string amount, string applist, string Empployee_Name, string AppMailID, string strclaim_month)
    {
        StringBuilder strbuild = new StringBuilder();
        //  string Emp_Name = "";
        string AppEmp_Name = "";

        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Empployee_Name;
        //dt_emp = new DataTable();
        //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
        //  AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();
        AppEmp_Name = AppMailID;

        if (amount.Contains(","))
        {

        }
        else
        {
            decimal parsed = decimal.Parse(amount, CultureInfo.InvariantCulture);
            CultureInfo hindi = new CultureInfo("hi-IN");
            amount = string.Format(hindi, "{0:#,#0.00}", parsed);
        }

        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has Approved the Payment Voucher Reimbursement request of " + Empployee_Name + " as per the details below.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Type :</td><td colspan=2>Payment Voucher</td></tr>");
                strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
                strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);
        }
        catch (Exception ex)
        {

        }
    }

    public DataTable FuelApproverDetails_Rejection_cancellation(string empcode, int tripid, string stype)
    {
        var parameters = new[]
       {
            new SqlParameter("@stype", stype),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@rem_id", tripid)
        };
        return ExecuteDataTable("FuelApproverDetails_Rejection_cancellation","SP_GETALLreembursement_DETAILS", stype, parameters);
    }
    public DataTable MobileApproverDetails_Rejection_cancellation(string empcode, int tripid, string stype)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@rem_id", tripid)
        };
        return ExecuteDataTable("MobileApproverDetails_Rejection_cancellation","SP_GETALLreembursement_DETAILS", stype,parameters);
    }
    public DataTable PaymentApproverDetails_Rejection_cancellation(string empcode, int tripid, string stype)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@rem_id", tripid)
        };
        return ExecuteDataTable("PaymentApproverDetails_Rejection_cancellation","SP_GETALLreembursement_DETAILS", stype,parameters);
    }
    public DataTable MobilePreviousApproverDetails(int remid)
    {
        var parameters = new[]
       {
            new SqlParameter("@stype", "get_MobileApproverDetails_mail_rejection_correction"),
            new SqlParameter("@rem_id", remid)
        };
        return ExecuteDataTable("MobilePreviousApproverDetails","SP_GETALLreembursement_DETAILS", "get_MobileApproverDetails_mail_rejection_correction", parameters);
    }

    public void clear_Reimbursement_temp_tables(string empcode, string stype)
    {
        var parameters = new[]
       {
            new SqlParameter("@Emp_Code", empcode.ToString().Trim()),
            new SqlParameter("@stype", stype)
        };
        ExecuteNonQuery("clear_Reimbursement_temp_tables","Usp_clear_Temp_Mobile_details", stype,parameters);

    }
    #endregion

    #region E-mail of Cancellation s level Approvers & Intermediates
    //public void Fuel_send_mail_Cancel(string ReqMailID, string ApprMailIDs, string strsubject, string Quantity, string amount, string strcc, string applist, string tRemarks, string Empployee_Name, string strclaimtable, string strclaim_month)
    //{
    //    MailMessage mail = new MailMessage();
    //    SmtpClient SmtpServer = new SmtpClient();
    //    StringBuilder strbuild = new StringBuilder();
    //    DataTable dt_emp = new DataTable();
    //    string appr_name = "";
    //    //Emp_Name = "";
    //    //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
    //    //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    strsubject = strsubject + " of " + ReqMailID;
    //    //dt_emp = null;
    //    //dt_emp = GetEmployeeData_Email(ApprMailIDs.ToString());
    //    //appr_name = dt_emp.Rows[0]["Emp_Name"].ToString();
    //    try
    //    {
    //        strbuild = new StringBuilder();
    //        if (loginUserid == "1")
    //        {
    //            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:100%'><tr><td>   ");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            if (strsubject.Contains("Fuel bill"))
    //                strbuild.Append("<tr><td> This is to inform you that " + ReqMailID + " has  <b>Cancelled</b> the Fuel bill Reimbursement request.</td></tr>");
    //            else if (strsubject.Contains("Payment Voucher"))
    //                strbuild.Append("<tr><td> This is to inform you that " + ReqMailID + " has  <b>Cancelled</b> the Payment Voucher Reimbursement request.</td></tr>");
    //            else
    //                strbuild.Append("<tr><td> This is to inform you that " + ReqMailID + " has <b>Cancelled</b> the Mobile bill Reimbursement request.</td></tr>");

    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("<tr><td>");
    //            strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Arial;font-style:Regular>");
    //            if (strsubject.Contains("Fuel bill"))
    //                strbuild.Append("<tr><td>Type :</td><td colspan=2>Fuel</td></tr>");
    //            else if (strsubject.Contains("Payment Voucher"))
    //                strbuild.Append("<tr><td>Type :</td><td colspan=2>Payment Voucher</td></tr>");
    //            else
    //                strbuild.Append("<tr><td>Type :</td><td colspan=2>Mobile</td></tr>");

    //            if (strsubject.Contains("Fuel bill"))
    //            {
    //                strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
    //                strbuild.Append("<tr><td>Total Quantity claimed :</td><td> " + Quantity + "</td></tr>");
    //                strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
    //            }
    //            else if (strsubject.Contains("Payment Voucher"))
    //            {

    //                strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
    //                strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
    //            }
    //            else
    //            {
    //                strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
    //                strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
    //            }

    //            if (Convert.ToString(strclaimtable).Trim() != "")
    //            {
    //                strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //                strbuild.Append("<tr><td colspan=2>" + Convert.ToString(strclaimtable).Trim() + "</td></tr>");
    //                strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            }
    //            if (strsubject.Contains("Fuel bill"))
    //                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
    //            else if (strsubject.Contains("Payment Voucher"))
    //                strbuild.Append("<tr><td>&nbsp;</td><td colspan=2> " + tRemarks + "</td></tr>");
    //            else
    //                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");

    //            // Commented by R1 on 01-10-2018
    //            //strbuild.Append("<tr><td>Approvers :</td><td colspan=2>" + applist + "</td></tr>");
    //            // Commented by R1 on 01-10-2018
    //            strbuild.Append("<tr><td> For your information please.</td></tr>");
    //            strbuild.Append("</table>");
    //            strbuild.Append("</td></tr>");
    //            strbuild.Append("<tr><td style='height:20px'></td></tr>");
    //            strbuild.Append("</table>");
    //        }

    //        sendMail(ApprMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");

    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}

    public void Fuel_send_mail_Cancel(string ReqMailID, string ApprMailIDs, string strsubject, string Quantity, string amount, string strcc, string applist, string tRemarks, string Empployee_Name, string strclaimtable, string strclaim_month)
    {
        StringBuilder strbuild = new StringBuilder();
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + ReqMailID;
        //dt_emp = null;
        //dt_emp = GetEmployeeData_Email(ApprMailIDs.ToString());
        //appr_name = dt_emp.Rows[0]["Emp_Name"].ToString();

        if (amount.Contains(","))
        {

        }
        else
        {
            decimal parsed = decimal.Parse(amount, CultureInfo.InvariantCulture);
            CultureInfo hindi = new CultureInfo("hi-IN");
            amount = string.Format(hindi, "{0:#,#0.00}", parsed);
        }

        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                if (strsubject.Contains("Fuel bill"))
                    strbuild.Append("<tr><td> This is to inform you that " + ReqMailID + " has  <b>Cancelled</b> the Fuel bill Reimbursement request.</td></tr>");
                else if (strsubject.Contains("Payment Voucher"))
                    strbuild.Append("<tr><td> This is to inform you that " + ReqMailID + " has  <b>Cancelled</b> the Payment Voucher Reimbursement request.</td></tr>");
                else
                    strbuild.Append("<tr><td> This is to inform you that " + ReqMailID + " has <b>Cancelled</b> the Mobile bill Reimbursement request.</td></tr>");

                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                if (strsubject.Contains("Fuel bill"))
                    strbuild.Append("<tr><td>Type :</td><td colspan=2>Fuel</td></tr>");
                else if (strsubject.Contains("Payment Voucher"))
                    strbuild.Append("<tr><td>Type :</td><td colspan=2>Payment Voucher</td></tr>");
                else
                    strbuild.Append("<tr><td>Type :</td><td colspan=2>Mobile</td></tr>");

                if (strsubject.Contains("Fuel bill"))
                {
                    strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
                    strbuild.Append("<tr><td>Total Quantity claimed :</td><td> " + Quantity + "</td></tr>");
                    strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
                }
                else if (strsubject.Contains("Payment Voucher"))
                {

                    strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
                    strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
                }
                else
                {
                    strbuild.Append("<tr><td>Claim Month :</td><td colspan=2>" + strclaim_month + "</td></tr>");
                    strbuild.Append("<tr><td>Total amount claimed :</td><td colspan=2> " + amount + "</td></tr>");
                }

                if (Convert.ToString(strclaimtable).Trim() != "")
                {
                    strbuild.Append("<tr><td style='height:20px'></td></tr>");
                    strbuild.Append("<tr><td colspan=2>" + Convert.ToString(strclaimtable).Trim() + "</td></tr>");
                    strbuild.Append("<tr><td style='height:20px'></td></tr>");
                }
                if (strsubject.Contains("Fuel bill"))
                    strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                else if (strsubject.Contains("Payment Voucher"))
                    strbuild.Append("<tr><td>&nbsp;</td><td colspan=2> " + tRemarks + "</td></tr>");
                else
                    strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");

                // Commented by R1 on 01-10-2018
                //strbuild.Append("<tr><td>Approvers :</td><td colspan=2>" + applist + "</td></tr>");
                // Commented by R1 on 01-10-2018
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(ApprMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #endregion

    #region Recruitment Process
    public void send_mailto_ScheduleInterviewBackout(string Emp_Name, string ReqMailID, string toMailIDs, string ccMailIDs, string strsubject, string interviewername, string name, string InterviewRound, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string Band, string NoOfPosition, string mailcontainoneline)
    {
        StringBuilder strbuild = new StringBuilder();
        strsubject = strsubject + "  ";
        try
        {
            strbuild = new StringBuilder();
            string contain = "Below Candidate names are Shortlilsted Please schedule the Interview";
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td> Dear  " + interviewername + ", </td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + mailcontainoneline + "</ td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
                strbuild.Append("<tr><td>--------------------------</td><td>--------------------------</td><td></td></tr>");
                //strbuild.Append("<tr><td> Candidate Name :</td><td> " + MultipleCandidateName + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Candidate name :</td><td> " + name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Interview Round :</td><td colspan=2> " + InterviewRound + "</td></tr>");
                //  strbuild.Append("<tr><td>Interview Date :</td><td> " + interviewdate.Replace("/", "-") + "</td><td></td></tr>");
                //  strbuild.Append("<tr><td>Interview Time  :</td><td> " + interviewtime + "</td><td></td></tr>");

                if (Convert.ToString(name).Trim() != "")
                    //  strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + MultipleCandidateName + "</td></tr>");
                    strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //  strbuild.Append("<tr><td style='height:20px'><a href='" + LINKURL + "'> Please click here to submit Interview Feedback. </a></td></tr>");
                strbuild.Append("</table>");

            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccMailIDs);
        }
        catch (Exception ex)
        {

        }
    }

    public void InsertRecruitmentUploaded_Files(decimal MaxTriptId, Boolean blncheck, string strfilename, string strfiletype, int fsrno, string strempcode, Int32 iclaimid)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@QUERYMODE", "INSERT"),
            new SqlParameter("@t_id", MaxTriptId),
            new SqlParameter("@fsrno", fsrno),
            new SqlParameter("@filepath", strfilename),
            new SqlParameter("@filetype", strfiletype)
        };
        if (blncheck == false)
        {
            parameters.Add(new SqlParameter("@delete", "deletefiles"));
        }
        else
        {
            parameters.Add(new SqlParameter("@delete", "notrequiredfiles"));
        }

        if (Convert.ToString(strempcode).Trim() != "")
            parameters.Add(new SqlParameter("@empcode", strempcode));

        if (Convert.ToString(iclaimid).Trim() != "")
            parameters.Add(new SqlParameter("@claimid", iclaimid));

        ExecuteNonQuery("InsertRecruitmentUploaded_Files","usp_InsertFuel_Files", "INSERT", parameters.ToArray());
    }

    public DataTable getSource_List()
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "sp_getSource_List")
        };
        return ExecuteDataTable("getSource_List","SP_Recruitment_Masters", "sp_getSource_List", parameters);
    }
    public DataTable getComm_Type()
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "sp_getComm_Type_List")
        };
        return ExecuteDataTable("getComm_Type","SP_Recruitment_Masters", "sp_getComm_Type_List", parameters);
    }
    public DataTable getComm_Way(string invalue)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "sp_getComm_Way_List"),
             new SqlParameter("@invalue", invalue)
        };
        return ExecuteDataTable("getComm_Way","SP_Recruitment_Masters", "sp_getComm_Way_List", parameters);
    }
    public DataTable getStatus()
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "sp_getStatus_List")
        };
        return ExecuteDataTable("getStatus","SP_Recruitment_Masters", "sp_getStatus_List", parameters);
    }
    public DataTable getDepartment_List()
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "sp_getDept_List")
        };
        return ExecuteDataTable("getDepartment_List","SP_Recruitment_Masters", "sp_getDept_List", parameters);
    }
    public DataTable getDataList_SQL(string strSQL)
    {
        return ExecuteRawSql_DataTable("getDataList_SQL", strSQL);
    }
    public void Insert_Recruitment_SQL(String strSql)
    {
        ExecuteRawSql_ExecuteNonQuery("Insert_Recruitment_SQL",strSql);
    }
    public DataTable getuserinfodetails_for_Recruitment(string strempcode)
    {
        var parameters = new[]
        {
             new SqlParameter("@emploginid", strempcode)
        };
        return ExecuteDataTable("getuserinfodetails_for_Recruitment","usp_Req_userlogin","", parameters);
    }
    public DataSet get_Recruitment_Location_Code(string tname, string stype)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@tName", tname)
        };
        return ExecuteDataSet("get_Recruitment_Location_Code","SP_Recruitment_Masters", stype, parameters);
    }
    public DataTable GetRecruitmentDetails_Reqstpage(int remid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getemp_Recruitment_details_dtls_formblRqst"),
            new SqlParameter("@rem_id", remid)
        };
        return ExecuteDataTable("GetRecruitmentDetails_Reqstpage","SP_Recruitment_Masters", "sp_getemp_Recruitment_details_dtls_formblRqst", parameters);
    }
    public DataTable Insert_Recruitment_Candidate_Details(Decimal interview_id, int Job_Location, int for_department, string cand_name, string cand_email,string cand_alternate_mail, string cand_address, int job_position, int cand_source, string in_location, string cand_mob, string cand_alternate_mob,string cand_qual, string cand_details, string cand_resume, string cand_source_details, string cand_exp, string cand_Birthdate, string cand_gender, string recruiter, int status, string strage, string strschrkeywords, string strconfidentialRecuriter, string isconfidential, string cand_CrntCTC, string strExemployee)
    {
        //this method not in use
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Job_Location", Job_Location),
            new SqlParameter("@for_department", for_department),
            new SqlParameter("@cand_name", cand_name),
            new SqlParameter("@cand_email", cand_email),
            new SqlParameter("@cand_alternate_mail", cand_alternate_mail),
            new SqlParameter("@cand_address", cand_address),
            new SqlParameter("@job_position", job_position),
            new SqlParameter("@cand_source", cand_source),
            new SqlParameter("@in_location", in_location),
            new SqlParameter("@cand_mob", cand_mob),
            new SqlParameter("@cand_alternate_mob", cand_alternate_mob),
            new SqlParameter("@cand_qual", cand_qual),
            new SqlParameter("@cand_details", cand_details),
            new SqlParameter("@cand_resume", cand_resume),
            new SqlParameter("@cand_Crnt_CTC", cand_CrntCTC),
            new SqlParameter("@ex_hcc_candidate", strExemployee),
            new SqlParameter("@cand_source_details", cand_source_details),
            new SqlParameter("@cand_Birthdate", cand_Birthdate),
            new SqlParameter("@cand_gender", cand_gender),
            new SqlParameter("@recruiter", recruiter),
            new SqlParameter("@status", status),
            new SqlParameter("@isConfidential", Convert.ToString(isconfidential))
        };

        if (Convert.ToString(cand_exp).Trim() != "" && Convert.ToString(cand_exp).Trim() != "0")
            parameters.Add(new SqlParameter("@cand_exp", cand_exp));
        
        if (Convert.ToString(strage).Trim() != "0" && Convert.ToString(strage).Trim() != "" && Convert.ToString(strage).Trim() != "")
            parameters.Add(new SqlParameter("@cand_age", strage));        

        if (Convert.ToString(strschrkeywords).Trim() != "")
            parameters.Add(new SqlParameter("@srch_keywords", strschrkeywords));

        if (Convert.ToString(interview_id).Trim() != "" && Convert.ToString(interview_id).Trim() != "0")
        {
            parameters.Add(new SqlParameter("@qtype", "Update"));
            parameters.Add(new SqlParameter("@Rem_id", interview_id));
        }
        else
        {
            parameters.Add(new SqlParameter("@qtype", "insert_Employee_Referral_resume"));            
        }

        return ExecuteDataTable("Insert_Recruitment_Candidate_Details","SP_Recruitment_Candidate_Insert", "insert_Employee_Referral_resume", parameters.ToArray());
    }

    public DataTable get_Recruitment_MngList(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_geMng_Recruitment_List"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("get_Recruitment_MngList","SP_Recruitment_Masters", "sp_geMng_Recruitment_List", parameters);
    }
    public void Insert_Recruitment_InterviewDetails(Decimal interview_id, string com_date, string emp_code, string qtype, string com_file, int com_sr_no, int com_sr_no_o, string com_time, int com_type, int com_way,string com_details, int com_status, string com_panel_mem1, string com_panel_mem2, string com_panel_mem3, string com_panel_mem4, string com_panel_mem5)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@com_sr_no", com_sr_no),
            new SqlParameter("@com_sr_no_o", com_sr_no_o),
            new SqlParameter("@com_time", com_time),
            new SqlParameter("@com_type", com_type),
            new SqlParameter("@com_way", com_way),
            new SqlParameter("@com_details", com_details),
            new SqlParameter("@com_status", com_status),
            new SqlParameter("@com_panel_mem1", com_panel_mem1),
            new SqlParameter("@com_panel_mem2", com_panel_mem2),
            new SqlParameter("@com_panel_mem3", com_panel_mem3),
            new SqlParameter("@com_panel_mem4", com_panel_mem4),
            new SqlParameter("@com_panel_mem5", com_panel_mem5),
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@interview_id", interview_id),
            new SqlParameter("@com_date", com_date),
            new SqlParameter("@qtype", qtype)
        };
        if (Convert.ToString(com_file).Trim() != "")
            parameters.Add(new SqlParameter("@com_file", com_file));

        ExecuteNonQuery("Insert_Recruitment_InterviewDetails","SP_Recruitment_InterviewDetails", qtype, parameters.ToArray());
    }
    public void Insert_Reqcuritment_Functions(Decimal interview_id, string sfunction_name, string emp_code, int ifunction_id, string sqtype)
    {
        var parameters = new[]
        {
           new SqlParameter("@Rem_id", interview_id),
           new SqlParameter("@funtion_name", sfunction_name),
           new SqlParameter("@funtion_id", ifunction_id),
           new SqlParameter("@recruiter", emp_code),
           new SqlParameter("@qtype", sqtype)
        };
        ExecuteNonQuery("Insert_Reqcuritment_Functions","SP_Recruitment_Candidate_Insert", sqtype, parameters);
    }
    public void Insert_Candidate_Qualification(Decimal interview_id, string sQualificationName, string sQualificationType, string sQualificationInstittute, string sqtype, string spggraduateDiploma)
    {
        var parameters = new[]
        {
            new SqlParameter("@Rem_id", interview_id),
            new SqlParameter("@can_qualfication", sQualificationName),
            new SqlParameter("@can_qualfication_type", sQualificationType),
            new SqlParameter("@can_qualfication_institute", sQualificationInstittute),
            new SqlParameter("@pg_grdute_others_type", spggraduateDiploma),
            new SqlParameter("@qtype", sqtype)
        };
        ExecuteNonQuery("Insert_Candidate_Qualification","SP_Recruitment_Candidate_Insert", sqtype, parameters);
    }
    public DataTable getFunction_List()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getFunctions_List")
        };
        return ExecuteDataTable("getFunction_List","SP_Recruitment_Masters", "sp_getFunctions_List", parameters);
    }
    public DataTable getPosition_List()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getPositions_List")
        };
        return ExecuteDataTable("getPosition_List","SP_Recruitment_Masters", "sp_getPositions_List", parameters);
    }
    public void Insert_Recruitment_JobPosition_dtls(Decimal interview_id, Decimal dDeptid, Decimal dLocationId, string strempcode, string strQtype, string strfrmdate, string strtodate, int psrno, string strremarks)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@jobposition_id", interview_id),
            new SqlParameter("@dept_id", dDeptid),
            new SqlParameter("@loc_code", dLocationId),
            new SqlParameter("@qtype", strQtype),
            new SqlParameter("@Recruiter_code", strempcode),
            new SqlParameter("@fromdate", strfrmdate),
            new SqlParameter("@todate", strtodate),
            new SqlParameter("@psrno", psrno)
        };
        if (Convert.ToString(strremarks).Trim() != "")
            parameters.Add(new SqlParameter("@remarks", strremarks));
        ExecuteNonQuery("Insert_Recruitment_JobPosition_dtls","SP_Recruitment_JobPosition_Insert", strQtype, parameters.ToArray());
    }
    public DataTable Insert_Recruitment_JobPosition(Decimal interview_id, string strtitle, string strjobdscp, string strempcode, string strloginempcode, string strQtype)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@jobposition_id", interview_id),
            new SqlParameter("@position_title", strtitle),
            new SqlParameter("@position_Desp", strjobdscp),
            new SqlParameter("@Recruiter_code", strempcode),
            new SqlParameter("@loginempcode_code", strloginempcode)
        };
        if (Convert.ToString(interview_id).Trim() != "" && Convert.ToString(interview_id).Trim() != "0")
        {
            parameters.Add(new SqlParameter("@qtype", "Update"));
        }
        else
        {
            parameters.Add(new SqlParameter("@qtype", "Insert"));
        }
        return ExecuteDataTable("Insert_Recruitment_JobPosition","SP_Recruitment_JobPosition_Insert", "Insert or update", parameters.ToArray());
    }
    public void Update_Release_Candidate_FromPosition(Decimal attach_positionNo, string strRecruiterCode, string candRelease, Decimal cand_forPosid, Decimal dptid, Decimal locationid, Decimal interview_id)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@attach_pos_no", attach_positionNo),
            new SqlParameter("@recruiter", strRecruiterCode),
            new SqlParameter("@cand_realse", candRelease),
            new SqlParameter("@qtype", "candidate_realse_form_position")
        };
        if (Convert.ToString(cand_forPosid).Trim() != "0")
        {
            parameters.Add(new SqlParameter("@cand_for_pos_id", cand_forPosid));
        }

        if (Convert.ToString(dptid).Trim() != "0")
        {
            parameters.Add(new SqlParameter("@cand_for_dept_id", dptid));
        }

        if (Convert.ToString(locationid).Trim() != "0")
        {
            parameters.Add(new SqlParameter("@cand_for_loc_code", locationid));
        }

        if (Convert.ToString(interview_id).Trim() != "0")
        {
            parameters.Add(new SqlParameter("@interview_id", interview_id));
        }

        ExecuteNonQuery("Update_Release_Candidate_FromPosition","SP_Recruitment_Candidate_Insert", "candidate_realse_form_position", parameters.ToArray());
    }
    public void Insert_Recruitment_Candidate_QualificationDtls(Double interview_id, string emp_code, string sQualificationName,string sQualificationType, int com_sr_no, string sQualification_Institue, string spg_grd_othersType, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@Recruiter_code", emp_code),
            new SqlParameter("@interview_id", interview_id),
            new SqlParameter("@qualification_name", sQualificationName),
            new SqlParameter("@qualifiation_type", spg_grd_othersType),
            new SqlParameter("@psrno", com_sr_no),
            new SqlParameter("@qualification_institue", sQualification_Institue),
            new SqlParameter("@pg_grdute_others_type", sQualificationType),
            new SqlParameter("@qtype", qtype)
        };
        ExecuteNonQuery("Insert_Recruitment_Candidate_QualificationDtls","SP_Recruitment_JobPosition_Insert", qtype, parameters);
    }
    public DataTable GetCandidateQualificationDetail(string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_get_candidate_Qualifications_dtls"),
            new SqlParameter("@empcode", strempcode)
        };
        return ExecuteDataTable("GetCandidateQualificationDetail","SP_Recruitment_Masters", "sp_get_candidate_Qualifications_dtls", parameters);
    }
    public DataSet getDatasetList_Recruitment(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataSet("getDatasetList_Recruitment",strspname,"", parameters);
    }
    public DataTable Get_Education_Detail_ByCandEducationID(string Stype, int CandEducationID, string Candidate_mobileNo)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", Stype),
            new SqlParameter("@CandEducationID", CandEducationID),
            new SqlParameter("@Candidate_mobileNo", Candidate_mobileNo)
        };
        return ExecuteDataTable("Get_Education_Detail_ByCandEducationID","SP_Rec_Temp_Candi_Education_INSERT", Stype, parameters);
    }
    public DataTable Update_Temp_Candid_Education_Detail(string Stype, int CandEducationID, int EducationTypeID,string CollegeName, string YearofPassing, string FinalScore, string PGType, string PGUniversityName,string PGDiscipline, string Candidate_mobileNo, string Candidate_Email, int Candidate_ID, string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", Stype),
            new SqlParameter("@CandEducationID", CandEducationID),
            new SqlParameter("@EducationTypeID", EducationTypeID),
            new SqlParameter("@CollegeName", CollegeName),
            new SqlParameter("@YearofPassing", YearofPassing),
            new SqlParameter("@FinalScore", FinalScore),
            new SqlParameter("@PGDiscipline", PGDiscipline),
            new SqlParameter("@PGUniversityName", PGUniversityName),
            new SqlParameter("@PGType", PGType),
            new SqlParameter("@Candidate_ID", Candidate_ID),
            new SqlParameter("@Candidate_mobileNo", Candidate_mobileNo),
            new SqlParameter("@CanEmail", Candidate_Email),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("Update_Temp_Candid_Education_Detail","SP_Rec_Temp_Candi_Education_INSERT", Stype, parameters);
    }
    public DataTable Get_Company_Detail_ByCandCompanyID(string Stype, int CandCompanyID, string Candidate_mobileNo)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", Stype),
            new SqlParameter("@CandCompanyID", CandCompanyID),
            new SqlParameter("@Candidate_mobileNo", Candidate_mobileNo)
       };
        return ExecuteDataTable("Get_Company_Detail_ByCandCompanyID","SP_Rec_Temp_Candi_Company_INSERT", Stype, parameters);
    }
    public DataTable Update_Temp_Candid_Company_Detail(string Stype, int CandCompanyID, string NameofCompany, string CandDesignation,string StartDate, string EndDate, string Candidate_mobileNo, string Candidate_Email, int Candidate_ID, string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", Stype),
            new SqlParameter("@CandCompanyID", CandCompanyID),
            new SqlParameter("@NameofCompany", NameofCompany),
            new SqlParameter("@CandDesignation", CandDesignation),
            new SqlParameter("@StartDate", StartDate),
            new SqlParameter("@EndDate", EndDate),
            new SqlParameter("@Candidate_mobileNo", Candidate_mobileNo),
            new SqlParameter("@CanEmail", Candidate_Email),
            new SqlParameter("@Candidate_ID", Candidate_ID),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("Update_Temp_Candid_Company_Detail","SP_Rec_Temp_Candi_Company_INSERT", Stype, parameters);
    }
    public DataTable IsEmailExistsInMaster(string CanEmail)
    {
        var parameters = new[]
        {
            new SqlParameter("@mode", "IsEmailExistsInMaster"),
            new SqlParameter("@CanEmail", CanEmail)
        };
        return ExecuteDataTable("IsEmailExistsInMaster","sp_RecCreateCandidate", "IsEmailExistsInMaster", parameters);
    }
    public DataTable IsMobileExistsInMaster(string CanMobile)
    {
        var parameters = new[]
        {
            new SqlParameter("@mode", "IsMobileExistsInMaster"),
            new SqlParameter("@CanMobile", CanMobile)
        };
        return ExecuteDataTable("IsMobileExistsInMaster","sp_RecCreateCandidate", "IsMobileExistsInMaster", parameters);
    }
    #endregion  Recruitment

    #region Payslip_Provident Fund_Superannuation Fund_Form 16
    public static DataSet getDocumentDetail(string gid, string dtype, string tyear, int PageIndex, int PageSize, out int RecordCount)
    {
        //DbCommand comm = GenericDataAccess.CreateCommand();
        string dataProviderName = ConfigurationManager.ConnectionStrings["sqlconnection"].ProviderName;
        string connectionString = ConfigurationManager.ConnectionStrings["sqlconnection"].ConnectionString;
        // Create a new data provider factory
        DbProviderFactory factory = DbProviderFactories.GetFactory(dataProviderName);
        // Obtain a database specific connection object
        DbConnection conn = factory.CreateConnection();
        // Set the connection string
        conn.ConnectionString = connectionString;
        // Create a database specific command object
        DbCommand comm = conn.CreateCommand();
        // Set the command type to stored procedure
        comm.CommandType = CommandType.StoredProcedure;

        comm.CommandText = "GET_EMPWISE_DOCUMENT";
        // create a new parameter
        DbParameter param = comm.CreateParameter();
        param = comm.CreateParameter();
        param.ParameterName = "@EMP_ID";
        param.Value = gid;
        param.DbType = DbType.String;
        comm.Parameters.Add(param);

        param = comm.CreateParameter();
        param.ParameterName = "@sDocumentType";
        param.Value = dtype;
        param.DbType = DbType.String;
        comm.Parameters.Add(param);

        param = comm.CreateParameter();
        param.ParameterName = "@sYear";
        param.Value = tyear;
        param.DbType = DbType.String;
        comm.Parameters.Add(param);

        // create a new parameter
        param = comm.CreateParameter();
        param.ParameterName = "@PageIndex";
        param.Value = PageIndex;
        param.DbType = DbType.Int32;
        comm.Parameters.Add(param);

        param = comm.CreateParameter();
        param.ParameterName = "@PageSize";
        param.Value = PageSize;
        param.DbType = DbType.Int32;
        comm.Parameters.Add(param);

        param = comm.CreateParameter();
        param.ParameterName = "@RecordCount";
        param.Value = PageSize;
        param.DbType = DbType.Int32;
        param.Direction = ParameterDirection.Output;
        comm.Parameters.Add(param);

        DataSet dt = GenericDataAccess.ExecuteSelectCmd(comm);
        RecordCount = Convert.ToInt32(comm.Parameters["@RecordCount"].Value);
        return dt;
    }
    #endregion    

    #region Apprisal SP
    public DataSet Get_DateRange_ValidationResult(string trfromdate, string trtodate, string FromDate, string ToDate, string assessfromdt, string assesstodt)
    {
        var parameters = new[]
       {
            new SqlParameter("@fromdate", FromDate),
            new SqlParameter("@todate", ToDate),
            new SqlParameter("@trFromDate", string.IsNullOrWhiteSpace(trfromdate) ? DBNull.Value :(object)trfromdate),
            new SqlParameter("@trToDate", string.IsNullOrWhiteSpace(trfromdate) ? DBNull.Value :(object)trfromdate),
            new SqlParameter("@assessfromdt", string.IsNullOrWhiteSpace(assessfromdt) ? DBNull.Value :(object)assessfromdt),            
            new SqlParameter("@assesstodt", string.IsNullOrWhiteSpace(assessfromdt) ? DBNull.Value :(object)assessfromdt)
        };
        return ExecuteDataSet("Get_DateRange_ValidationResult","Usp_DateRange_Validation","", parameters, DBConnectionStrings.AppraisalConnection);
    }
    public void InsertAssessMainDetails(string fromDate, string toDate, string Empcode, int App_Year_id, string review_Comment, string qtype, string fromvalid, string tovalid, decimal EmpPosMappId, string p_s, string pyear)
    {
        var parameters = new[]
        {
           new SqlParameter("@empcode", Empcode),
           new SqlParameter("@from_date", fromDate),
           new SqlParameter("@todate", toDate),
           new SqlParameter("@stype", qtype),
           new SqlParameter("@App_Year_id", App_Year_id),
           new SqlParameter("@EmpPosMappId", EmpPosMappId),
           new SqlParameter("@fromvalid", fromvalid),
           new SqlParameter("@tovalid", tovalid),
           new SqlParameter("@p_s", p_s),
           new SqlParameter("@pyear", pyear)
        };
        ExecuteNonQuery("InsertAssessMainDetails","SP_GETALL_Appraisal_DETAILS", qtype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public void UpdateAssessMainDetails(decimal assessid, string review_Comment, decimal assessTypeId, decimal reviewerTypeId,string AssessStatus, string NextReviewer, decimal NextAssessTypeId, decimal NextReviewerTypeId, string NextAssessstatus, string qtype)
    {
        var parameters = new[]
        {
          new SqlParameter("@Assess_id", assessid),
          new SqlParameter("@stype", qtype),
          new SqlParameter("@review_Comment", review_Comment),
          new SqlParameter("@assessTypeId", assessTypeId),
          new SqlParameter("@reviewerTypeId", reviewerTypeId),
          new SqlParameter("@AssessStatus", AssessStatus),
          new SqlParameter("@NextReviewer", NextReviewer),
          new SqlParameter("@NextAssessTypeId", NextAssessTypeId),
          new SqlParameter("@NextReviewerTypeId", NextReviewerTypeId),
          new SqlParameter("@NextAssessstatus", NextAssessstatus)
        };
        ExecuteNonQuery("UpdateAssessMainDetails","SP_GETALL_Appraisal_DETAILS", qtype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public void UpdateRevieweeCommentAssessMainDetails(decimal assessid, string review_Comment, string qtype)
    {
        var parameters = new[]
        {
          new SqlParameter("@Assess_id", assessid),
          new SqlParameter("@stype", qtype),
          new SqlParameter("@review_Comment", review_Comment)
        };
        ExecuteNonQuery("UpdateRevieweeCommentAssessMainDetails","SP_GETALL_Appraisal_DETAILS", qtype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public void UpdateTra_Assess_Review_Detail(decimal assessid, string Comment, string qtype, string colNm)
    {
        var parameters = new[]
        {
          new SqlParameter("@Assess_id", assessid),
          new SqlParameter("@stype", qtype),
          new SqlParameter("@review_Comment", Comment),
          new SqlParameter("@colNm", colNm)
        };
        ExecuteNonQuery("UpdateTra_Assess_Review_Detail","SP_GETALL_Appraisal_DETAILS", qtype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public void InsertAssessKRADetails(decimal accessid, string KRA_Header, string Description, string KPI,decimal pointsAll, string DescriptionAch, decimal pointsAllAch, int App_Year_id, string unit, string qty,string dt, string qtype, string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Assess_id", accessid),
            new SqlParameter("@KRA_Header", KRA_Header),
            new SqlParameter("@KRA_Description", Description),
            new SqlParameter("@KPI", KPI),
            new SqlParameter("@KRA_Target_Achieved_Dec", DescriptionAch),
            new SqlParameter("@KRA_Points_Alloted", pointsAll),
            new SqlParameter("@KRA_Target_Achieved_Points", pointsAllAch),
            new SqlParameter("@unit_desc", unit),
            new SqlParameter("@qty_desc", string.IsNullOrWhiteSpace(qty) ? DBNull.Value : (object)qty),
            new SqlParameter("@from_date", string.IsNullOrWhiteSpace(dt) ? DBNull.Value : (object)dt),
            new SqlParameter("@stype", qtype),
            new SqlParameter("@empcode", empcode)
        };
        ExecuteNonQuery("InsertAssessKRADetails","SP_GETALL_Appraisal_DETAILS", qtype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public void InsertAssessKRADetailsReviewer(decimal accessid, string KRA_Header, string Description, string KPI, decimal pointsAll, string DescriptionAch, decimal pointsAllAch, int App_Year_id, string RDescriptionKRA, decimal RPointsAch, string qtype, string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Assess_id", accessid),
            new SqlParameter("@KRA_Header", KRA_Header),
            new SqlParameter("@KRA_Description", Description),
            new SqlParameter("@KPI", KPI),
            new SqlParameter("@KRA_Target_Achieved_Dec", DescriptionAch),
            new SqlParameter("@KRA_Points_Alloted", pointsAll),
            new SqlParameter("@KRA_Target_Achieved_Points", pointsAllAch),
            new SqlParameter("@KRA_DescriptionReviewer", RDescriptionKRA),
            new SqlParameter("@KRA_Points_AllotedReviewer", RPointsAch),
            new SqlParameter("@stype", qtype),
            new SqlParameter("@empcode", empcode)
        };
        ExecuteNonQuery("InsertAssessKRADetailsReviewer","SP_GETALL_Appraisal_DETAILS", qtype,parameters, DBConnectionStrings.AppraisalConnection);
    }
    public void UpdateAssessKRADetails(decimal assessid, decimal dtlkraid, string KRA_Header, string Description, string KPI, decimal pointsAll, string DescriptionAch, decimal pointsAllAch, int App_Year_id, string unit, string qty, string dt, string qtype, string empcode)
    {
        var parameters = new[]
       {
            new SqlParameter("@Assess_id", assessid),
            new SqlParameter("@KRA_Det_id", dtlkraid),
            new SqlParameter("@KRA_Header", KRA_Header),
            new SqlParameter("@KRA_Description", Description),
            new SqlParameter("@KPI", KPI),
            new SqlParameter("@KRA_Target_Achieved_Dec", DescriptionAch),
            new SqlParameter("@KRA_Points_Alloted", pointsAll),
            new SqlParameter("@KRA_Target_Achieved_Points", pointsAllAch),
            new SqlParameter("@unit_desc", unit),
            new SqlParameter("@qty_desc", string.IsNullOrWhiteSpace(qty) ? DBNull.Value : (object)qty),
            new SqlParameter("@from_date", string.IsNullOrWhiteSpace(dt) ? DBNull.Value : (object)dt),
            new SqlParameter("@stype", qtype),
            new SqlParameter("@empcode", empcode)
        };
        ExecuteNonQuery("UpdateAssessKRADetails","SP_GETALL_Appraisal_DETAILS", qtype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public void InsertKRADetails(decimal assessid, decimal KRABuckID, decimal KRADet)
    {
        var parameters = new[]
        {
            new SqlParameter("@Assess_id", assessid),
            new SqlParameter("@KRA_Buk_id", KRABuckID),
            new SqlParameter("@KRA_det_id", KRADet),
            new SqlParameter("@stype", "sp_InsertKRAtemplateDetailsToTrans")
        };
        ExecuteNonQuery("InsertKRADetails","SP_GETALL_Appraisal_DETAILS", "sp_InsertKRAtemplateDetailsToTrans", parameters, DBConnectionStrings.AppraisalConnection);
    }
    public void UpdateAssessKRADetailsReviewer(decimal assessid, decimal dtlkraid, string Description, decimal pointsAllR, string DescriptionKRA, string DescriptionAch, decimal pointsAll, decimal pointsAllAch, string qtype, string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Assess_id", assessid),
            new SqlParameter("@KRA_Det_id", dtlkraid),
            new SqlParameter("@KRA_DescriptionReviewer", Description),
            new SqlParameter("@KRA_Points_AllotedReviewer", pointsAllR),
            new SqlParameter("@KRA_Points_Alloted", pointsAll),
            new SqlParameter("@KRA_Target_Achieved_Points", pointsAllAch),
            new SqlParameter("@KRA_Description", DescriptionKRA),
            new SqlParameter("@KRA_Target_Achieved_Dec", DescriptionAch),
            new SqlParameter("@stype", qtype),
            new SqlParameter("@empcode", empcode)
         };
        ExecuteNonQuery("UpdateAssessKRADetailsReviewer","SP_GETALL_Appraisal_DETAILS", qtype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public void DeleteAssessKRADetails(decimal assessid, decimal dtlkraid, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@Assess_id", assessid),
            new SqlParameter("@KRA_Det_id", dtlkraid),
            new SqlParameter("@stype", qtype)
        };
        ExecuteNonQuery("DeleteAssessKRADetails","SP_GETALL_Appraisal_DETAILS", qtype,parameters, DBConnectionStrings.AppraisalConnection);
    }
    public void DeleteStrength(decimal assessid, decimal dtlkraid, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@Assess_id", assessid),
            new SqlParameter("@id1", dtlkraid),
            new SqlParameter("@stype", qtype)
        };
        ExecuteNonQuery("DeleteStrength","SP_GETALL_Appraisal_DETAILS", qtype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable GetTargetEvaluationDetails(decimal assess_id, string stype)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@assess_id", assess_id)
        };
        return ExecuteDataTable("GetTargetEvaluationDetails","SP_GETALL_Appraisal_DETAILS", stype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public Int32 add_KRA_Files(string strsql)
    {
        SqlTransaction strans;

        Int32 rec = 0;

        SqlConnection scon = new SqlConnection(DBConnectionStrings.AppraisalConnection);
        if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
            scon.Open();

        strans = scon.BeginTransaction();
        try
        {
            SqlCommand sCommand = new SqlCommand();
            sCommand.Connection = scon;
            sCommand.CommandText = Convert.ToString(strsql).Trim();
            sCommand.CommandType = CommandType.Text;
            sCommand.Transaction = strans;
            rec = sCommand.ExecuteNonQuery();
            strans.Commit();

        }
        catch (Exception ex)
        {
            strans.Rollback();
            scon.Close();
        }
        return rec;
    }
    public DataTable GetFileID(decimal id1, decimal id2)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_fileID"),
            new SqlParameter("@Assess_id", id1),
            new SqlParameter("@KRA_Det_id", id2)
        };
        return ExecuteDataTable("GetFileID","SP_GETALL_Appraisal_DETAILS", "get_fileID", parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable get_MaxKRA_Det_id(decimal id1)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_MaxKRA_Det_id"),
            new SqlParameter("@Assess_id", id1)
        };
        return ExecuteDataTable("get_MaxKRA_Det_id","SP_GETALL_Appraisal_DETAILS", "get_MaxKRA_Det_id", parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable getActiveAssessmentId(decimal id1, decimal id2)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_fileID"),
            new SqlParameter("@Assess_id", id1),
            new SqlParameter("@KRA_Det_id", id2)
        };
        return ExecuteDataTable("getActiveAssessmentId","SP_GETALL_Appraisal_DETAILS", "get_fileID", parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable getSelfAssess_MngList(string empcode, string stype)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("getSelfAssess_MngList","SP_GETALL_Appraisal_DETAILS", stype, parameters, DBConnectionStrings.AppraisalConnection);

    }
    public DataTable getSelfAssessList(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "getAssessmentApplicableforEmployee"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("getSelfAssessList","SP_GETALL_Appraisal_DETAILS", "getAssessmentApplicableforEmployee", parameters, DBConnectionStrings.AppraisalConnection);
    }
    //public void InsertCompetencyAssessTranReviewee(decimal assessid, decimal Comp_Buk_id, decimal Comp_head_id, decimal comp_det_id, decimal rating,bool IsSelected, string qtype)
    public void InsertCompetencyAssessTranReviewee(decimal assessid, decimal Comp_Buk_id, decimal Comp_head_id, decimal comp_det_id, decimal rating, decimal Revieweerating, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@Assess_id", assessid),
            new SqlParameter("@Comp_Buk_id", Comp_Buk_id),
            new SqlParameter("@Comp_Head_id", Comp_head_id),
            new SqlParameter("@Comp_Det_id", comp_det_id),
            new SqlParameter("@Rating", rating),
            new SqlParameter("@id1", Revieweerating),
            new SqlParameter("@stype", qtype)
        };
        ExecuteNonQuery("InsertCompetencyAssessTranReviewee","SP_GETALL_Appraisal_DETAILS", qtype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public void DeleteCompetencyAssessTranReviewee(decimal assessid, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@Assess_id", assessid),
            new SqlParameter("@stype", qtype)
        };
        ExecuteNonQuery("DeleteCompetencyAssessTranReviewee","SP_GETALL_Appraisal_DETAILS", qtype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable getAssessIDDetails(decimal assessid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getAssessmentdtlsEdit"),
            new SqlParameter("@Assess_id", assessid)
        };
        return ExecuteDataTable("getAssessIDDetails","SP_GETALL_Appraisal_DETAILS", "sp_getAssessmentdtlsEdit", parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable getKRATemplate(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getKRAtemplate"),
            new SqlParameter("@PositionId", empcode)
        };
        return ExecuteDataTable("getKRATemplate","SP_GETALL_Appraisal_DETAILS", "sp_getKRAtemplate", parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable getKRAUnit()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "getKRAUnit")
        };
        return ExecuteDataTable("getKRAUnit","SP_GETALL_Appraisal_DETAILS", "getKRAUnit", parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable getKRAQuantity()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "getKRAQuantity")
        };
        return ExecuteDataTable("getKRAQuantity","SP_GETALL_Appraisal_DETAILS", "getKRAQuantity", parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable GetKRADetailsFromTemplate(decimal KRAbuckid, string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getKRAtemplateDetails"),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@KRA_Buk_id", KRAbuckid)
        };
        return ExecuteDataTable("GetKRADetailsFromTemplate","SP_GETALL_Appraisal_DETAILS", "sp_getKRAtemplateDetails", parameters, DBConnectionStrings.AppraisalConnection);

    }
    public DataTable getDevPlanMethod()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "getMethod")
        };
        return ExecuteDataTable("getDevPlanMethod","SP_GETALL_Appraisal_DETAILS", "getMethod", parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable getDevPlanTimelines()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "getTimelines")
        };
        return ExecuteDataTable("getDevPlanTimelines","SP_GETALL_Appraisal_DETAILS", "getTimelines", parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable getDevPlanTrainingCode()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "getTrainingCode")
        };
        return ExecuteDataTable("getDevPlanTrainingCode","SP_GETALL_Appraisal_DETAILS", "getTrainingCode", parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable getStrength_List()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "getStrength_List")
        };
        return ExecuteDataTable("getStrength_List","SP_GETALL_Appraisal_DETAILS", "getStrength_List", parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable getRecommPreformRating(string stype, decimal assessid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@Assess_id", assessid)
        };
        return ExecuteDataTable("getRecommPreformRating","SP_GETALL_Appraisal_DETAILS", stype,parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable getPromoType(string stype, decimal assessid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@Assess_id", assessid)
        };
        return ExecuteDataTable("getPromoType","SP_GETALL_Appraisal_DETAILS", stype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable getCompetencyRatingMst(string stype, decimal id1, decimal id2)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@id1", id1),
            new SqlParameter("@id2", id2)
        };
        return ExecuteDataTable("getCompetencyRatingMst","SP_GETALL_Appraisal_DETAILS", stype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public void InsertDevelopmentPlan(decimal accessid, string Description, decimal methodid, decimal timelieid, decimal trainingcodeid, string trainingdesc, string encytxtMethodDesc, string qtype, string sempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Assess_id", accessid),
            new SqlParameter("@Dev_area", Description),
            new SqlParameter("@Method_id", methodid),
            new SqlParameter("@Timelines_id", timelieid),
            new SqlParameter("@id1", trainingcodeid),
            new SqlParameter("@otherTraining", trainingdesc),
            new SqlParameter("@review_Comment", encytxtMethodDesc),
            new SqlParameter("@stype", qtype),
            new SqlParameter("@empcode", sempcode)
        };
        ExecuteNonQuery("InsertDevelopmentPlan","SP_GETALL_Appraisal_DETAILS", qtype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public void UpdateDevelopmentPlan(decimal accessid, decimal dtlid, string Description, decimal methodid, decimal timelieid, decimal trainingcodeid, string trainingdesc, string encytxtMethodDesc, string qtype, string sempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Assess_id", accessid),
            new SqlParameter("@Assess_Dev_Plan_id", dtlid),
            new SqlParameter("@Dev_area", Description),
            new SqlParameter("@Method_id", methodid),
            new SqlParameter("@Timelines_id", timelieid),
            new SqlParameter("@id1", trainingcodeid),
            new SqlParameter("@otherTraining", trainingdesc),
            new SqlParameter("@review_Comment", encytxtMethodDesc),
            new SqlParameter("@stype", qtype),
            new SqlParameter("@empcode", sempcode)
        };
        ExecuteNonQuery("UpdateDevelopmentPlan","SP_GETALL_Appraisal_DETAILS", qtype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public void DeleteDevelopmentPlan(decimal assessid, decimal dtlid, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@Assess_id", assessid),
            new SqlParameter("@Assess_Dev_Plan_id", dtlid),
            new SqlParameter("@stype", qtype)
        };
        ExecuteNonQuery("DeleteDevelopmentPlan","SP_GETALL_Appraisal_DETAILS", qtype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public void InsertRecommendation(decimal accessid, string Description, decimal Perforid, decimal Promoid, decimal Promotypeid, string assessType, string empcode, string qtype, decimal id1)
    {
        var parameters = new[]
        {
            new SqlParameter("@Assess_id", accessid),
            new SqlParameter("@review_Comment", Description),
            new SqlParameter("@Perf_Rate_id", Perforid),
            new SqlParameter("@Prom_Rate_id", Promoid),
            new SqlParameter("@Prom_Type_id", Promotypeid),
            new SqlParameter("@assessType", assessType),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@id1", id1),
            new SqlParameter("@stype", qtype)
        };
        ExecuteNonQuery("InsertRecommendation","SP_GETALL_Appraisal_DETAILS", qtype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public void InsertRecommendation(decimal accessid, string Description, decimal Perforid, decimal Promoid, decimal Promotypeid, string assessType, string empcode, string qtype, decimal id1, string OverallPerformance_comments, string OverallPerformance_Attribute_comments, string OverallPromotion_Recommendation_comments)
    {
        var parameters = new[]
        {
            new SqlParameter("@Assess_id", accessid),
            new SqlParameter("@review_Comment", Description),
            new SqlParameter("@Perf_Rate_id", Perforid),
            new SqlParameter("@Prom_Rate_id", Promoid),
            new SqlParameter("@Prom_Type_id", Promotypeid),
            new SqlParameter("@assessType", assessType),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@id1", id1),
            new SqlParameter("@Overall_Performance_Comments", OverallPerformance_comments),
            new SqlParameter("@Overall_Pers_Attribute_Comments", OverallPerformance_Attribute_comments),
            new SqlParameter("@Overall_Promotion_Recm_Comments", OverallPromotion_Recommendation_comments),
            new SqlParameter("@stype", qtype)
        };
        ExecuteNonQuery("InsertRecommendation","SP_GETALL_Appraisal_DETAILS", qtype,parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable GetDevPlanDetails(decimal assess_id, string stype)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@assess_id", assess_id)
        };
        return ExecuteDataTable("GetDevPlanDetails","SP_GETALL_Appraisal_DETAILS", stype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable GeAppraApproverEmailID(decimal EmpPosMappId, string stype)
    {
        var parameters = new[]
         {
            new SqlParameter("@stype", stype),
            new SqlParameter("@assess_id", EmpPosMappId)
        };
        return ExecuteDataTable("GeAppraApproverEmailID","SP_GETALL_Appraisal_ApproverDetails", stype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable GetTransAppraApproverStatus(decimal assess_id, string stype)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@assess_id", assess_id)
        };
        return ExecuteDataTable("GetTransAppraApproverStatus","SP_GETALL_Appraisal_ApproverDetails", stype,parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable GetApprEmployeeData(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@stype", "SP_GETEMPDETAILS")
        };
        return ExecuteDataTable("GetApprEmployeeData","SP_GETALL_Appraisal_ApproverDetails", "SP_GETEMPDETAILS", parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable GetApprEmployeeDataAssessIDWise(decimal assessid)
    {
        var parameters = new[]
        {
            new SqlParameter("@assess_id", assessid),
            new SqlParameter("@stype", "SP_GETEMPDETAILSAssessIDWise")
        };
        return ExecuteDataTable("GetApprEmployeeDataAssessIDWise","SP_GETALL_Appraisal_ApproverDetails", "SP_GETEMPDETAILSAssessIDWise", parameters, DBConnectionStrings.AppraisalConnection);
    }
    public string Encrypt(string clearText)
    {
        string EncryptionKey = "MAKV2SPBNI99212";
        byte[] clearBytes = Encoding.Unicode.GetBytes(clearText);
        using (Aes encryptor = Aes.Create())
        {
            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });
            encryptor.Key = pdb.GetBytes(32);
            encryptor.IV = pdb.GetBytes(16);
            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(clearBytes, 0, clearBytes.Length);
                    cs.Close();
                }
                clearText = Convert.ToBase64String(ms.ToArray());
            }
        }
        return clearText;
    }
    public string Decrypt(string cipherText)
    {
        string EncryptionKey = "MAKV2SPBNI99212";
        byte[] cipherBytes = Convert.FromBase64String(cipherText);
        using (Aes encryptor = Aes.Create())
        {
            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });
            encryptor.Key = pdb.GetBytes(32);
            encryptor.IV = pdb.GetBytes(16);
            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(cipherBytes, 0, cipherBytes.Length);
                    cs.Close();
                }
                cipherText = Encoding.Unicode.GetString(ms.ToArray());
            }
        }
        return cipherText;
    }
    public int GetInboxPendingCount(string empcode, decimal assessTypeId)
    {
        int PendingCount = 0;
        DataTable dtInbox = new DataTable();

        var parameters = new[]
        {
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@stype", "getPendingCount"),
            new SqlParameter("@assessTypeId", assessTypeId)
        };
        dtInbox = ExecuteDataTable("GetInboxPendingCount","SP_GETALL_Appraisal_DETAILS", "getPendingCount", parameters, DBConnectionStrings.AppraisalConnection);
        if (dtInbox.Rows.Count > 0)
        {
            PendingCount = (int)dtInbox.Rows[0]["Count"];
        }
        return PendingCount;

    }
    public int GetInboxTotalCount(string empcode, decimal id1, decimal id2, decimal id3)
    {
        int TotalCount = 0;
        DataTable dtInbox = new DataTable();
        var parameters = new[]
        {
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@stype", "getTotalInboxCount"),
            new SqlParameter("@id1", id1),
            new SqlParameter("@id2", id2),
            new SqlParameter("@id3", id3)
        };
        dtInbox = ExecuteDataTable("GetInboxTotalCount","SP_GETALL_Appraisal_DETAILS", "getTotalInboxCount", parameters, DBConnectionStrings.AppraisalConnection);
        if (dtInbox.Rows.Count > 0)
        {
            TotalCount = (int)dtInbox.Rows[0]["TotalCount"];
        }
        return TotalCount;
    }
    public void send_mail_appraisal(string Empployee_Name, string toMailIDs, string assess_type, string assess_type1, string tFrom, string tTo, string ccMailIDs, string strinertmediaterList, string strAppraisalURL, string strempcode, string strempname, string strempGrade, string strempDept, string strdesig, string strLoc, string strapproverDtls)
    {
        StringBuilder strbuild = new StringBuilder();
        string strsubject = "Performance Appraisal : " + Empployee_Name + " " + assess_type;
        // string strsubject = "Appraisal 2018-19 ";
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<FONT COLOR='Black' style='font-size:11pt;font-family:Trebuchet MS;font-style:Regular;'>Dear Sir/Madam,</FONT><br><br>");

                strbuild.Append("<p>" + Empployee_Name + "" + assess_type + " </p> <br/>");
                strbuild.Append("<table width='60%' border=1 style='font-size:11pt;font-family:Trebuchet MS;font-style:Regular;' cellpadding='0' cellspacing='0' >  ");
                strbuild.Append("<tr style='height: 30px'> <td width='30%'> <b>Emp. Code  </b></td><td width='70%'>&nbsp;" + strempcode + " </td></tr>");
                strbuild.Append("<tr style='height: 30px'><td width='30%'> <b>Name  </b></td><td width='70%'>&nbsp;" + strempname + " </td></tr>");
                strbuild.Append("<tr style='height: 30px' ><td width='30%'> <b>Grade  </b></td><td width='70%'>&nbsp;" + strempGrade + " </td></tr>");
                strbuild.Append("<tr style='height: 30px'><td width='30%'> <b>Designation  </b></td><td width='70%' >&nbsp;" + strdesig + " </td></tr>");
                strbuild.Append("<tr style='height: 30px'><td width='30%'> <b>Department </b></td><td width='70%'>&nbsp;" + strempDept + " </td></tr>");
                strbuild.Append("<tr style='height: 30px'><td width='30%'> <b>Location </b></td><td width='70%'>&nbsp;" + strLoc + " </td></tr>");
                strbuild.Append("</table><br/>");

                if (Convert.ToString(strapproverDtls).Trim() != "")
                {
                    strbuild.Append("<table  width='60%' border=1  style='font-size:11pt;font-family:Trebuchet MS;font-style:Regular;'  cellpadding='0' cellspacing='0' >   ");

                    strbuild.Append(strapproverDtls);

                    strbuild.Append("</table><br/>");
                }

                // strbuild.Append("<tr><td>" + assess_type1 + " </td></tr>");
                // strbuild.Append("<tr><td></td></tr>");
                // strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td>  Reviewee : " + Empployee_Name + ".</td></tr>");
                //strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td>");
                //  strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Arial;font-style:Regular;width:95%'>");
                //strbuild.Append("<tr><td>Assessment Type :</td><td colspan=2> " + assess_type + "</td></tr>");
                //strbuild.Append("<tr><td>From :</td><td> " + tFrom + "</td></tr>");
                //strbuild.Append("<tr><td>To :</td><td> " + tTo + "</td></tr>");
                //strbuild.Append("<tr><td>Mail To :" + ccMailIDs + "</td></tr>");
                //strbuild.Append("<tr><td>Mail CC :</td><td> " + toMailIDs + "</td></tr>");


                //strbuild.Append("</td></tr>");
                //strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<div style='height:20px;color:Black;font-size:11pt;font-family:Trebuchet MS !important;font-style:Regular;'>" + assess_type1 + " </div><br/>");
                if (Convert.ToString(strAppraisalURL).Trim() != "")
                    strbuild.Append("<div style='height:20px;color:Black;font-size:11pt;font-family:Trebuchet MS !important;font-style:Regular;'><a href='" + strAppraisalURL + "'> Please click here to review </a></div>");
                //strbuild.Append("</table>");
            }

            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccMailIDs);
        }
        catch (Exception ex)
        {

        }
    }
    public DataTable apprgetDataList(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataTable("apprgetDataList",strspname,"", parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataSet ApprgetDatasetList(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataSet("ApprgetDatasetList",strspname,"", parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable GetDevPlanDetails_View(decimal assess_id, string stype, decimal reviewerType)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@assess_id", assess_id),
            new SqlParameter("@reviewerTypeId", reviewerType)
        };
        return ExecuteDataTable("GetDevPlanDetails_View","SP_GETALL_Appraisal_DETAILS", stype, parameters, DBConnectionStrings.AppraisalConnection);
    }
    public DataTable getSelfAssess_HODList(string empcode, string stype, string companyid, string locationid, string departmentid, string searchempid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@compid", string.IsNullOrWhiteSpace(companyid) ? DBNull.Value :(object)companyid),
            new SqlParameter("@locid", string.IsNullOrWhiteSpace(locationid) ? DBNull.Value :(object)locationid),
            new SqlParameter("@deptid", string.IsNullOrWhiteSpace(departmentid) ? DBNull.Value :(object)departmentid),
            new SqlParameter("@searchemp", string.IsNullOrWhiteSpace(searchempid) ? DBNull.Value :(object)searchempid)
        };
        return ExecuteDataTable("getSelfAssess_HODList","SP_GETALL_Appraisal_DETAILS", stype, parameters, DBConnectionStrings.AppraisalConnection);
    }

    #endregion
    
    #region Service Request Section
    //Create Method 18-01-2021 Vidhyadhar Galande
    public object InsertServiceRequestDetails(string emp_code, string ServicesDescripation, string qtype, string FilePath, string AssignedTo, char Is_Escalated, int ServiceDepartment, int Status, int ActionStatus, string Actionby, char Escalation_Type, int idCategory)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@ServicesDescripation", ServicesDescripation),
            new SqlParameter("@FilePath", FilePath),
            new SqlParameter("@AssignedTo", AssignedTo),
            new SqlParameter("@Is_Escalated", Is_Escalated),
            new SqlParameter("@ServiceDepartment", ServiceDepartment),
            new SqlParameter("@Status", Status),
            new SqlParameter("@ActionStatus", ActionStatus),
            new SqlParameter("@ActionBy", Actionby),
            new SqlParameter("@Escalation_Type", Escalation_Type),
            new SqlParameter("@CategoryId", idCategory)
        };
        return ExecuteScalar("InsertServiceRequestDetails","SP_INSERTSERVICE_REQUEST", qtype, parameters);
    }
    public DataTable GetSPOCData(int id)
    {
        var parameters = new[]
        {
          new SqlParameter("@qtype", "GETSPOCDETAIL"),
          new SqlParameter("@id", id)
        };
        return ExecuteDataTable("GetSPOCData","SP_INSERTSERVICE_REQUEST", "GETSPOCDETAIL", parameters);
    }
    public DataTable GetSerivesRequestSPOCInbox(string empCode)
    {
        var parameters = new[]
        {
          new SqlParameter("@qtype", "GETEMPSERVICELIST"),
          new SqlParameter("@emp_code", empCode)
        };
        return ExecuteDataTable("GetSerivesRequestSPOCInbox","SP_INSERTSERVICE_REQUEST", "GETEMPSERVICELIST", parameters);
    }
    public DataTable GetSerivesRequestMyInbox(string empCode)
    {
        var parameters = new[]
        {
          new SqlParameter("@qtype", "GETMYSERVICELIST"),
          new SqlParameter("@emp_code", empCode)
        };
        return ExecuteDataTable("GetSerivesRequestMyInbox","SP_INSERTSERVICE_REQUEST", "GETMYSERVICELIST", parameters);
    }
    public DataTable GetSerivesRequestDepartment()
    {
        var parameters = new[]
        {
          new SqlParameter("@qtype", "DDLDEPARTMENT")
        };
        return ExecuteDataTable("GetSerivesRequestDepartment","SP_INSERTSERVICE_REQUEST", "DDLDEPARTMENT", parameters);
    }
    public DataSet getServiceRequestDetail(int id, string empCode)
    {
        var parameters = new[]
        {
          new SqlParameter("@emp_code", empCode),
          new SqlParameter("@id", id),
          new SqlParameter("@qtype", "GETApprovelPageDetail")
        };
        return ExecuteDataSet("getServiceRequestDetail","SP_INSERTSERVICE_REQUEST", "GETApprovelPageDetail", parameters);
    }
    public DataTable GetEmpDepartment(int ServiceDepartment)
    {
        var parameters = new[]
        {
          new SqlParameter("@qtype", "GETDDLFORSERVICECREATE"),
          new SqlParameter("@ServiceDepartment", ServiceDepartment)
        };
        return ExecuteDataTable("GetEmpDepartment","SP_INSERTSERVICE_REQUEST", "GETDDLFORSERVICECREATE", parameters);
    }
    public void AssgineServiceRequestDetails(string emp_code, string ServicesDescripation, string qtype, string FilePath, string AssignedTo, char Is_Escalated, int ServiceDepartment, int Status, int ActionStatus, string Actionby, char Escalation_Type, int id, int CategoryId)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", id),
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@ServicesDescripation", ServicesDescripation),
            new SqlParameter("@FilePath", FilePath),
            new SqlParameter("@AssignedTo", AssignedTo),
            new SqlParameter("@Is_Escalated", Is_Escalated),
            new SqlParameter("@ServiceDepartment", ServiceDepartment),
            new SqlParameter("@Status", Status),
            new SqlParameter("@ActionStatus", ActionStatus),
            new SqlParameter("@ActionBy", Actionby),
            new SqlParameter("@Escalation_Type", Escalation_Type),
            new SqlParameter("@CategoryId", CategoryId)
        };
        ExecuteNonQuery("AssgineServiceRequestDetails","SP_INSERTSERVICE_REQUEST", qtype,parameters);
    }
    public DataTable GETSPOCEXISTS(string empCode)
    {
        var parameters = new[]
        {
          new SqlParameter("@qtype", "GETSPOCDETAILS"),
          new SqlParameter("@emp_code", empCode)
        };
        return ExecuteDataTable("GETSPOCEXISTS","SP_INSERTSERVICE_REQUEST", "GETSPOCDETAILS", parameters);
    }
    public DataTable GETHISTORYBYID(int id)
    {
        var parameters = new[]
        {
          new SqlParameter("@qtype", "GETSERVICEHISTORY"),
          new SqlParameter("@id", id)
        };
        return ExecuteDataTable("GETHISTORYBYID","SP_INSERTSERVICE_REQUEST", "GETSERVICEHISTORY", parameters);
    }
    public DataTable GetDEPARTMENTHOD(int id)
    {
        var parameters = new[]
        {
          new SqlParameter("@qtype", "GETDEPTHOD"),
          new SqlParameter("@id", id)
        };
        return ExecuteDataTable("GetDEPARTMENTHOD","SP_INSERTSERVICE_REQUEST", "GETDEPTHOD", parameters);
    }
    public DataTable GetCEOEmpCode()
    {
        var parameters = new[]
        {
          new SqlParameter("@qtype", "GETCEO")
        };
        return ExecuteDataTable("GetCEOEmpCode","SP_INSERTSERVICE_REQUEST", "GETCEO", parameters);
    }
    public DataTable Get_CSH_CEOEmpCode()
    {
        var parameters = new[]
        {
          new SqlParameter("@qtype", "GETCEO_CSH")
        };
        return ExecuteDataTable("Get_CSH_CEOEmpCode","SP_INSERTSERVICE_REQUEST", "GETCEO_CSH", parameters);
    }
    public void ServiceRequest_send_mailto_SPOC(string serviceRequestno, string toMailIDs, string employeeName, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "New Service Request " + serviceRequestno + " is created, your action is required";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px;'></td></tr>");
            strbuild.Append("<tr><td>Dear Team,</td></tr>");
            strbuild.Append("<tr><td> This is to inform you that " + employeeName + " has created new Service Request with following details. Please take appropriate action</td></tr>");
            strbuild.Append("<tr><td style='height:20px;'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80% !important;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Service Request No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Employee Name : </td><td width='75%'>" + employeeName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created For Department :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Latest Comments :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'>Please click here to take action on Service Request</a></td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void ServiceRequest_send_mailto_AssignedAgent(int isEscalated, string serviceRequestno, string toMailIDs, string employeeName, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "";
        if (isEscalated == 1)
        {
            strsubject = "Escalated Service Request " + serviceRequestno + " is assigned to you, your action is required ";
        }
        else
        {
            strsubject = "Service Request " + serviceRequestno + " is assigned to you, your action is required";
        }

        try
        {
            strbuild = new StringBuilder();
            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            if (isEscalated == 1)
            {
                strbuild.Append("<tr><td> This is to inform you that escalated Service Request of " + employeeName + " with following details is assigned to you. Please take appropriate action</td></tr>");

            }
            else
            {
                strbuild.Append("<tr><td> This is to inform you that " + employeeName + " has created new Service Request with following details.Please take appropriate action</td></tr>");

            }
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Service Request No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Employee Name : </td><td width='75%'>" + employeeName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created For Department :</td><td width='75%'>" + department + "</td></tr>");
            if (isEscalated == 1)
            {
                strbuild.Append("<tr><td width='25%'>Latest Comments:</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td width='25%'>Latest Comments :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");

            }
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'>Please click here to take action on Service Request</a></td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void ServiceRequest_send_mailto_AssignToEmployee(int IsExceletd, string serviceRequestno, string toMailIDs, string actionName, string actionBy, string assgineTo, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "";
        if (IsExceletd == 0)
        {
            strsubject = "Action update on your Service Request " + serviceRequestno + "";
        }
        else
        {
            strsubject = "Action update on your escalated Service Request " + serviceRequestno + "";
        }

        //var strsubject = "Action update on your Service Request "+ serviceRequestno + "";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            strbuild.Append("<tr><td>This is to inform you that following action has been taken on your Service Request " + serviceRequestno + ".</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Action Taken : </td><td width='75%'>" + actionName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken By : </td><td width='75%'>" + actionBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Assigned To : </td><td width='75%'>" + assgineTo + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Service Request No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created For Department :</td><td width='75%'>" + department + "</td></tr>");
            if (IsExceletd == 0)
            {
                strbuild.Append("<tr><td width='25%'>Latest Comments :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td width='25%'>Latest Comments</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            }
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to view Service Request</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void ServiceRequest_send_mailto_ActionToEmployee(int IsExceletd, string serviceRequestno, string toMailIDs, string actionName, string actionBy, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription)
    {
        StringBuilder strbuild = new StringBuilder();
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        var strsubject = "";
        if (IsExceletd == 0)
        {
            strsubject = "Action update on your Service Request " + serviceRequestno + "";
        }
        else
        {
            strsubject = "Action update on your escalated Service Request " + serviceRequestno + "";
        }

        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            strbuild.Append("<tr><td>This is to inform you that following action has been taken on your Service Request " + serviceRequestno + ".</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Action Taken : </td><td width='75%'>" + actionName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken By : </td><td width='75%'>" + actionBy + "</td></tr>");
            //strbuild.Append("<tr><td>Assigned To : </td><td >" + assgineTo + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Service Request No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created For Department :</td><td width='75%'>" + department + "</td></tr>");
            if (IsExceletd == 0)
            {
                strbuild.Append("<tr><td width='25%'>Latest Comments :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td width='25%'>Latest Comments: </td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            }

            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            if (IsExceletd == 0)
            {
                strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to View/Esclate Service Request</td></tr>");
            }
            else if (IsExceletd == 1)
            {
                strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to View Service Request</td></tr>");
            }
            else if (IsExceletd == 2)
            {
                strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to View Service Request</td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to View Service Request</td></tr>");
            }
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");


            sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void ServiceRequest_send_mailto_EscalationHeadOrCEO(int IsCEO, string serviceRequestno, string toMailIDs, string employeeName, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription, string actiondate)
    {
        StringBuilder strbuild = new StringBuilder();
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();

        var strsubject = "Escalation of Service Request " + serviceRequestno + "";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            if (IsCEO == 1)
            {
                strbuild.Append("<tr><td>Dear Sir,</td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            }

            strbuild.Append("<tr><td>This is to inform you that " + employeeName + " has escalated Service Request with following details to you. Please take appropriate action</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            // strbuild.Append("<tr><td>Action Taken : </td><td >" + actionName + "</td></tr>");
            // strbuild.Append("<tr><td>Action Taken By : </td><td >" + actionBy + "</td></tr>");
            //strbuild.Append("<tr><td>Assigned To : </td><td >" + assgineTo + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Service Request No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created For Department :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Date :</td><td width='75%'>" + actiondate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action By :</td><td width='75%'>" + employeeName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Latest Comments :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to take action on Service Request</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void ServiceRequest_send_mailto_HeadOrCEOToSPOC(int IsCEO, string serviceRequestno, string toMailIDs, string employeeName, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription, string actiondate, string actionBy)
    {
        StringBuilder strbuild = new StringBuilder();
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();

        var strsubject = "Sent Back Of Service Request " + serviceRequestno + "";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            if (IsCEO == 1)
            {
                strbuild.Append("<tr><td>This is to inform you that CEO has forwarded escalated request of " + employeeName + " to you. Please take appropriate action</td></tr>");
            }
            else if (IsCEO == 0)
            {
                strbuild.Append("<tr><td>This is to inform you that " + department + " head has forwarded escalated request of " + employeeName + " to you. Please take appropriate action</td></tr>");

            }
            else
            {
                strbuild.Append("<tr><td>This is to inform you that " + actionBy + "  has forwarded service request of " + employeeName + " to you. Please take appropriate action</td></tr>");

            }
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            // strbuild.Append("<tr><td>Action Taken : </td><td >" + actionName + "</td></tr>");
            // strbuild.Append("<tr><td>Action Taken By : </td><td >" + actionBy + "</td></tr>");
            //strbuild.Append("<tr><td>Assigned To : </td><td >" + assgineTo + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Service Request No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created For Department :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Date :</td><td width='75%'>" + actiondate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action By :</td><td width='75%'>" + actionBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Latest Comments :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to take action on Service Request </td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public DataTable GetServiceRequestById(int id)
    {
        var parameters = new[]
        {
          new SqlParameter("@qtype", "GETSERVICEDETAILBYID_ID"),
          new SqlParameter("@id", id)
        };
        return ExecuteDataTable("GetServiceRequestById","SP_INSERTSERVICE_REQUEST", "GETSERVICEDETAILBYID_ID",parameters);
    }
    public DataTable GetEscalationServiceCount(string location, DateTime startDate, DateTime endDate)
    {
        var parameters = new[]
        {
          new SqlParameter("@qtype", "GETEscalationCOUNT"),
          new SqlParameter("@StartDate", startDate),
          new SqlParameter("@EndDate", endDate),
          new SqlParameter("@Location", location)
        };
        return ExecuteDataTable("GetEscalationServiceCount","SP_GetEscalation_SR_Count", "GETEscalationCOUNT", parameters);
    }
    public DataTable GetCategoryDepartment(int departmentId)
    {
        var parameters = new[]
        {
          new SqlParameter("@qtype", "DDLDEPARTMENTCategory"),
          new SqlParameter("@ServiceDepartment", departmentId)
        };
        return ExecuteDataTable("GetCategoryDepartment","SP_INSERTSERVICE_REQUEST", "DDLDEPARTMENTCategory", parameters);
    }
    public DataTable GetInboxServiceRequestRCH(string assgimentTo, string fromdate, string todate)
    {
        var parameters = new[]
        {
          new SqlParameter("@qtype", "GETEMPSERVICELISTARC"),
          new SqlParameter("@AssignedTo", assgimentTo),
          new SqlParameter("@fromDate", fromdate),
          new SqlParameter("@toDate", todate)
        };
        return ExecuteDataTable("GetInboxServiceRequestRCH","SP_INSERTSERVICE_REQUEST", "GETEMPSERVICELISTARC", parameters);
    }
    public DataTable getServiceRequestReport(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataTable("getServiceRequestReport",strspname,"", parameters);
    }
    public DataTable GetStatusList()
    {
        var parameters = new[]
        {
          new SqlParameter("@qtype", "DDLSTATUSLIST")
        };
        return ExecuteDataTable("GetStatusList","SP_INSERTSERVICE_REQUEST", "DDLSTATUSLIST", parameters);
    }
    public DataTable GETEMPFORHODHR()
    {
        var parameters = new[]
        {
          new SqlParameter("@qtype", "GETEMPFORHODHR")
        };
        return ExecuteDataTable("GETEMPFORHODHR","SP_INSERTSERVICE_REQUEST", "GETEMPFORHODHR" ,parameters);
    }
    public DataSet getServiceRequestReportCount(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataSet("getServiceRequestReportCount",strspname,"", parameters);
    }
    #endregion
    
    #region Resignation Methods
    public void InsertResignationClaimDetails(int Rem_id, string Rem_Month, decimal Amount, string emp_code, decimal EligibleAmount, string qtype, string Remarks, string UploadFile, string dclaimid, string RcptFile, string Reason, string Billno, string Billtype)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@empcode", emp_code),
            new SqlParameter("@Rem_id", Rem_id),
            new SqlParameter("@Rem_Month", Rem_Month),
            new SqlParameter("@Amount", Amount),
            new SqlParameter("@EligibleAmount", EligibleAmount),
            new SqlParameter("@Remarks", Remarks),
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Billno", Billno),
            new SqlParameter("@Billtype", Billtype),
            new SqlParameter("@Reason", Reason)
        };
        if (Convert.ToString(UploadFile).Trim() != "")
            parameters.Add(new SqlParameter("@UploadFile", UploadFile));

        if (Convert.ToString(dclaimid).Trim() != "")
            parameters.Add(new SqlParameter("@Claims_id", dclaimid));

        if (Convert.ToString(RcptFile).Trim() != "")
            parameters.Add(new SqlParameter("@rcptFile", RcptFile));

        ExecuteNonQuery("InsertResignationClaimDetails","SP_Insert_Resignation_ClaimDetails", qtype,parameters.ToArray());
    }
    public DataTable InsertResignationMain(string frm_date, decimal amount, string reason, string empcode, int status, int conditionid, string strmobremid, string Project, string Department, string Frm_Date, string To_Date)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Rem_Sub_Date", frm_date),
            new SqlParameter("@TotalAmount_Claimed", amount),
            new SqlParameter("@Reason", reason),
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@Ren_status", status),
            new SqlParameter("@Rem_Conditionid", conditionid),
            new SqlParameter("@qtype", "Insert"),
            new SqlParameter("@Project", Project),
            new SqlParameter("@Department", Department),
            new SqlParameter("@Frm_Date", Frm_Date),
            new SqlParameter("@To_Date", To_Date)
        };
        if (Convert.ToString(strmobremid).Trim() != "" && Convert.ToString(strmobremid).Trim() != "0")
            parameters.Add(new SqlParameter("@Rem_id", strmobremid));

        return ExecuteDataTable("InsertResignationMain","SP_INSERT_Resignation_REQUEST", "Insert", parameters.ToArray());
    }
    public void InsertResignationApproverDetails(string apprcode, int apprid, int MaxTriptId, string Isappstatus)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", "INSERT"),
            new SqlParameter("@Trip_id", MaxTriptId),
            new SqlParameter("@APPR_EMP_CODE", apprcode),
            new SqlParameter("@Action", "Pending"),
            new SqlParameter("@SYSTEM_APP", "N"),
            new SqlParameter("@APPR_ID", apprid)
       };
        ExecuteNonQuery("InsertResignationApproverDetails","usp_InsertResignationApprDetails", "INSERT",parameters);
    }
    public void Resignation_send_mailto_RM_Approver(string ReqMailID, string toMailIDs, string strsubject, string Quantity, string amount, string applist, string Empployee_Name, string ccmailid, string strmobileRemUrl, string strclaimtable, string strclaim_month)
    {
        StringBuilder strbuild = new StringBuilder();
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();

        strsubject = strsubject + " of " + Empployee_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> This is to inform you that " + Empployee_Name + " has Resigned from the services. Kindly take necessary action.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:40%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");

                if (Convert.ToString(strclaimtable).Trim() != "")
                {
                    strbuild.Append("<tr><td style='height:20px'></td></tr>");
                    strbuild.Append("<tr><td colspan=2>" + Convert.ToString(strclaimtable).Trim() + "</td></tr>");
                }
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'><a herf='InboxLeave_Req.aspx' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strmobileRemUrl + "'> Please click here to review / Accept </a></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void Resignation_send_mailto_Others(string ReqMailID, string toMailIDs, string strsubject, string Quantity, string amount, string applist, string Empployee_Name, string ccmailid, string strmobileRemUrl, string strclaimtable, string strclaim_month)
    {
        StringBuilder strbuild = new StringBuilder();
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();

        strsubject = strsubject + " of " + Empployee_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> This is to inform you that " + Empployee_Name + " has Resigned from the services.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:40%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");

                if (Convert.ToString(strclaimtable).Trim() != "")
                {
                    strbuild.Append("<tr><td style='height:20px'></td></tr>");
                    strbuild.Append("<tr><td colspan=2>" + Convert.ToString(strclaimtable).Trim() + "</td></tr>");
                }
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void Resignation_send_mail_Cancellation(string ReqMailID, string toMailIDs, string strsubject, string Quantity, string amount, string applist, string Empployee_Name, string ccmailid, string strmobileRemUrl, string strclaimtable, string strclaim_month)
    {
        StringBuilder strbuild = new StringBuilder();
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();

        strsubject = strsubject + " of " + Empployee_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> This is to inform you that " + Empployee_Name + " has Taken Back the Resignation.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:40%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");

                if (Convert.ToString(strclaimtable).Trim() != "")
                {
                    strbuild.Append("<tr><td style='height:20px'></td></tr>");
                    strbuild.Append("<tr><td colspan=2>" + Convert.ToString(strclaimtable).Trim() + "</td></tr>");
                }
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public DataTable GeTResignationApproverEmailID(string empcode, string Grade, int Leaveconditionid, Decimal remid)
    {
        var parameters = new List<SqlParameter>
        {
             new SqlParameter("@Emp_code", empcode),
             new SqlParameter("@Grade", Grade),
             new SqlParameter("@Conditiontype_id", Leaveconditionid)
         };
        if (Convert.ToString(remid).Trim() != "0")
            parameters.Add(new SqlParameter("@rem_id", remid));

        return ExecuteDataTable("GeTResignationApproverEmailID","SP_GET_RESIGNATION_PPROVERSEMAIL","", parameters.ToArray());
    }
    public DataTable getData_FromCode(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataTable("getData_FromCode",strspname, "",parameters);
    }
    public DataTable getResignation_MngList(string empcode)
    {
        var parameters = new[]
        {
         new SqlParameter("@stype", "sp_geMngResignation_List"),
         new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("getResignation_MngList","SP_GETALLreembursement_DETAILS", "sp_geMngResignation_List", parameters);
    }
    public DataTable GetResignationInbox(string empcode)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "sp_GetResignationInboxlist"),
             new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetResignationInbox","SP_GETALLreembursement_DETAILS", "sp_GetResignationInboxlist", parameters);
    }
    public DataTable GetResignationInbox_Arch(string empcode)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "sp_GetResignationInboxlist_Arch"),
             new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetResignationInbox_Arch","SP_GETALLreembursement_DETAILS", "sp_GetResignationInboxlist_Arch", parameters);
    }
    public DataTable GetResignationClaimDetails_ForApprover(string empcode, string strremid)
    {
        var parameters = new[]
         {
             new SqlParameter("@stype", "sp_getMainResignationRequest_forApproval"),
             new SqlParameter("@empcode", empcode),
             new SqlParameter("@rem_id", strremid)
        };
        return ExecuteDataTable("GetResignationClaimDetails_ForApprover","SP_GETALLreembursement_DETAILS", "sp_getMainResignationRequest_forApproval", parameters);
    }
    public void UpdateResignationAppRequest(int tripid, string status, string comment, string finalstatus, int apprid, decimal recm_amount, int cond_id)
    {
        var parameters = new List<SqlParameter>
        {
           new SqlParameter("@QUERYMODE", "UPDATE"),
           new SqlParameter("@Trip_ID", tripid),
           new SqlParameter("@ACTION", status),
           new SqlParameter("@appr_comments", comment),
           new SqlParameter("@recm_amount", recm_amount),
           new SqlParameter("@APPR_ID", apprid),
           new SqlParameter("@Condition_id", cond_id)
        };
        if (Convert.ToString(finalstatus).Trim() != "")
            parameters.Add(new SqlParameter("@finalstatus", finalstatus));

        ExecuteNonQuery("UpdateResignationAppRequest","usp_InsertResignationApprDetails", "UPDATE", parameters.ToArray());
    }
    public void Resignation_send_mailto_Next_Approver_Intermediate(string ReqMailID, string toMailIDs, string strsubject, string Quantity, string amount, string applist, string Empployee_Name, string AppMailID, string strclaim_month)
    {
        StringBuilder strbuild = new StringBuilder();
        //  string Emp_Name = "";
        string AppEmp_Name = "";
        AppEmp_Name = AppMailID;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + Empployee_Name + " as per the details below.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");

            }
            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);
        }
        catch (Exception ex)
        {

        }
    }
    public DataTable GetCurrentApprIDResignation(int tripid, string strempcode)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "Sp_getCurrentApprIDResignation"),
             new SqlParameter("@empcode", strempcode),
             new SqlParameter("@rem_id", tripid)
        };
        return ExecuteDataTable("GetCurrentApprIDResignation","SP_GETALLreembursement_DETAILS", "Sp_getCurrentApprIDResignation", parameters);
    }
    public void Insert_Data(SqlParameter[] parameters, string strspname)
    {
        ExecuteNonQuery("Insert_Data",strspname, "",parameters);
    }
    public DataTable CheckDuplicateResignationDetails(string emp_code, string qtype)
    {
        var parameters = new[]
        {
         new SqlParameter("@empcode", emp_code),
         new SqlParameter("@qtype", qtype)
         };
        return ExecuteDataTable("CheckDuplicateResignationDetails","SP_Insert_Resignation_ClaimDetails", qtype, parameters);
    }

    #endregion

    #region CustomerFirst
    public DataTable GetHOD_INBOX(string HOD)
    {
        var parameters = new[]
        {
         new SqlParameter("@qtype", "GET_HOD_INBOX"),
         new SqlParameter("@HOD", HOD)
        };
        return ExecuteDataTable("GetHOD_INBOX","SP_CF_CustomerFirst", "GET_HOD_INBOX", parameters);
    }
    public DataSet GetSurveyDetails(int id)
    {
        var parameters = new[]
        {
             new SqlParameter("@qtype", "GET_CustomerPage_BYID"),
             new SqlParameter("@ID", id)
        };
        return ExecuteDataSet("GetSurveyDetails","SP_CF_CustomerFirst", "GET_CustomerPage_BYID", parameters);
    }
    public DataTable GetCEO_INBOX()
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GET_CEO_INBOX")
        };
        return ExecuteDataTable("GetCEO_INBOX","SP_CF_CustomerFirst", "GET_CEO_INBOX", parameters);
    }
    public DataTable GetHOD_AllSurveyList(string HOD)
    {
        var parameters = new[]
        {
             new SqlParameter("@qtype", "GET_HOD_AllSurveyList"),
             new SqlParameter("@HOD", HOD)
        };
        return ExecuteDataTable("GetHOD_AllSurveyList","SP_CF_CustomerFirst", "GET_HOD_AllSurveyList", parameters);
    }
    public DataTable GetCEO_AllSurveyList()
    {
        var parameters = new[]
        {
         new SqlParameter("@qtype", "GET_CEO_AllSurveyList")
        };
        return ExecuteDataTable("GetCEO_AllSurveyList","SP_CF_CustomerFirst", "GET_CEO_AllSurveyList", parameters);
    }
    public void updateHODCEOReplySurvey(string qtype, int id, string remark, string HODComment, string updatedBy)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@ID", id),
            new SqlParameter("@HODComment", HODComment),
            new SqlParameter("@Remark", remark),
            new SqlParameter("@UpdatedBy", updatedBy),
            new SqlParameter("@CreatedBy", updatedBy)
        };
        ExecuteNonQuery("updateHODCEOReplySurvey","SP_CF_SAVE_MAILSENT_DETAILS", qtype,parameters);
    }
    public void updateSendSurvey(int id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "UpdateEmailSend"),
            new SqlParameter("@ID", id)
        };
        ExecuteNonQuery("updateSendSurvey","SP_CF_SAVE_MAILSENT_DETAILS", "UpdateEmailSend", parameters);
    }
    public DataTable GetHistorySurveyDetails(int id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GET_CustomerPage_HistoryBYID"),
            new SqlParameter("@ID", id)
        };
        return ExecuteDataTable("GetHistorySurveyDetails","SP_CF_CustomerFirst", "GET_CustomerPage_HistoryBYID", parameters);
    }
    public DataTable GetDepartmentDetailsForCF()
    {
        return ExecuteDataTable("GetDepartmentDetailsForCF","SP_CF_GETDEPARTMENT_DETAILS","");
    }
    public DataTable GetViewSurveyReport(string empid, string surveyno, string fromdate, string todate, int? departmentID, string responseStatus)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "ViewSurveyReport"),
            new SqlParameter("@Hod", empid),
            new SqlParameter("@DepartmentId", departmentID),
            new SqlParameter("@SurveyNo", surveyno),
            new SqlParameter("@fromDate", fromdate),
            new SqlParameter("@toDate", todate),
            new SqlParameter("@ResponseStatus", responseStatus)
        };
        return ExecuteDataTable("GetViewSurveyReport","SP_CF_CustomerFirst", "ViewSurveyReport", parameters);
    }
    public DataTable CheckCustomerFIRSTHOD(string HODId)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "CheckHODExist"),
            new SqlParameter("@HOD", HODId)
        };
        return ExecuteDataTable("CheckCustomerFIRSTHOD","SP_CF_CustomerFirst", "CheckHODExist", parameters);
    }
    public DataTable GetPM_INBOX(string HOD)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GET_PM_INBOX"),
            new SqlParameter("@HOD", HOD)
        };
        return ExecuteDataTable("GetPM_INBOX","SP_CF_CustomerFirst", "GET_PM_INBOX", parameters);
    }
    public DataTable GetPM_AllSurveyList(string HOD)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GET_PM_AllSurveyList"),
            new SqlParameter("@HOD", HOD)
        };
        return ExecuteDataTable("GetPM_AllSurveyList","SP_CF_CustomerFirst", "GET_PM_AllSurveyList", parameters);
    }
    public DataTable GetPMORHOD_INBOX(string HOD)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "HODANDPMINBOX"),
            new SqlParameter("@HOD", HOD)
        };
        return ExecuteDataTable("GetPMORHOD_INBOX","SP_CF_CustomerFirst", "HODANDPMINBOX", parameters);
    }
    public DataTable GetPMORHOD_AllSurveyList(string HOD)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "HODANDPMAllSurveyList"),
            new SqlParameter("@HOD", HOD)
        };
        return ExecuteDataTable("GetPMORHOD_AllSurveyList","SP_CF_CustomerFirst", "HODANDPMAllSurveyList", parameters);
    }
    #endregion

    #region StaticAlert
    public void CloseTaskNotification(int SubTaskId, string TaskId, string empid, string nextReminderDate, string actionDate, string ownerRemarks, string strfileName, string taskStatus, string actionBy)
    {
        var parameters = new[]
        {
             new SqlParameter("@qtype", "UpdateTaskDetailsHistory"),
             new SqlParameter("@SubTaskId", SubTaskId),
             new SqlParameter("@ClosingDate", actionDate),
             new SqlParameter("@NextReminderDate", nextReminderDate),
             new SqlParameter("@OwnerRemarks", ownerRemarks),
             new SqlParameter("@OwnerFileName", strfileName),
             new SqlParameter("@TaskStatus", taskStatus),
             new SqlParameter("@Actionby", actionBy)
         };
        ExecuteNonQuery("CloseTaskNotification","SP_Admin_StaticAlert", "UpdateTaskDetailsHistory", parameters);
    }
    public DataTable GetTaskDetails(string TaskId)
    {
        var parameters = new[]
        {
             new SqlParameter("@qtype", "GetTaskDetails"),
             new SqlParameter("@TaskId", TaskId)
        };
        return ExecuteDataTable("GetTaskDetails","SP_Admin_StaticAlert", "GetTaskDetails", parameters);
    }
    public DataTable GetTaskHistorydtlsBySubTakId(int SubTaskId)
    {
        var parameters = new[]
        {
             new SqlParameter("@qtype", "GetTaskDetailsHistoryBySubTaskId"),
             new SqlParameter("@SubTaskId", SubTaskId)
         };
        return ExecuteDataTable("GetTaskHistorydtlsBySubTakId","SP_Admin_StaticAlert", "GetTaskDetailsHistoryBySubTaskId", parameters);
    }    
    //hdnTaskOwnerId,hdnTaskSupervisor1Id,hdnTaskSupervisor2Id);
    public DataSet GetEmailIds(string empcode, string TaskSupervisor1Id, string TaskSupervisor2Id)
    {
        var parameters = new[]
        {
             new SqlParameter("@qtype", "GetEmailIds"),
             new SqlParameter("@TaskOwner", @empcode),
             new SqlParameter("@TaskSupervisor1", @TaskSupervisor1Id),
             new SqlParameter("@TaskSupervisor2", @TaskSupervisor2Id)
        };
        return ExecuteDataSet("GetEmailIds","SP_Admin_StaticAlert", "GetEmailIds", parameters);

    }
    #endregion StaticAlert

    #region Attendance 05_04_2021 vidhyadhar
    public DataTable GetRegularization(string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETLISTFORRegularization"),
            new SqlParameter("@emp_code", empCode)
         };
        return ExecuteDataTable("GetRegularization","SP_Attendance", "GETLISTFORRegularization", parameters);
    }
    public DataTable GetLeaveType()
    {
        var parameters = new[]
        {
             new SqlParameter("@qtype", "GETLEAVETYPEDDL")
        };
        return ExecuteDataTable("GetLeaveType","SP_Attendance", "GETLEAVETYPEDDL", parameters);
    }
    public DataTable GETEMPDETAIL_ATT(string emp_code)
    {
        var parameters = new[]
        {
        new SqlParameter("@qtype", "GETEMPDETAIL"),
        new SqlParameter("@Emp_Code", emp_code)
     };
        return ExecuteDataTable("GETEMPDETAIL_ATT","SP_Attendance", "GETEMPDETAIL", parameters);
    }
    public object InsertAttDetails(string emp_code, string qtype, int Reg_Id, int Leave_Req_id, string status, string Att_date, string Leave_Status, string CREATEDBY, string Remark, string app_Comment)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Reg_Id", Reg_Id),
            new SqlParameter("@Emp_Code", emp_code),
            new SqlParameter("@status", status),
            new SqlParameter("@Leave_Req_id", Leave_Req_id),
            new SqlParameter("@Att_date", Att_date),
            new SqlParameter("@Leave_Status", Leave_Status),
            new SqlParameter("@Remark", Remark),
            new SqlParameter("@appr_comments", app_Comment),
            new SqlParameter("@CREATEDBY", CREATEDBY),
            new SqlParameter("@UPDATEDBY", CREATEDBY),
        };
      return ExecuteScalar ("InsertAttDetails","SP_Attendance_Regular", qtype, parameters);
    }
    public DataTable GetAttRegInbox(string app_Code)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETRegularInboxLIst"),
            new SqlParameter("@approv_Emp_Code", app_Code)
        };
        return ExecuteDataTable("GetAttRegInbox","SP_Attendance_Regular", "GETRegularInboxLIst", parameters);
    }
    public DataTable GetRegularizationInboxDetail(int id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "RegularizationInboxDetail"),
            new SqlParameter("@Reg_Id", id)
        };
        return ExecuteDataTable("GetRegularizationInboxDetail","SP_Attendance_Regular", "RegularizationInboxDetail", parameters);
    }   
    public DataTable GetMyAttRegInbox(string app_Code)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETMyRegularInboxLIst"),
            new SqlParameter("@approv_Emp_Code", app_Code)
        };
        return ExecuteDataTable("GetMyAttRegInbox","SP_Attendance_Regular", "GETMyRegularInboxLIst", parameters);
    }
    public DataTable GetMyRegularizationInboxDetail(int id)
    {
        var parameters = new[]
        {
        new SqlParameter("@qtype", "MyRegularizationInboxDetail"),
        new SqlParameter("@Reg_Id", id)
     };
        return ExecuteDataTable("GetMyRegularizationInboxDetail","SP_Attendance_Regular", "MyRegularizationInboxDetail", parameters);
    }    
    public DataTable GetRMDETAIL(string emp_code)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETRMEMAIL"),
            new SqlParameter("@Emp_Code", emp_code)
        };
        return ExecuteDataTable("GetRMDETAIL","SP_Attendance_Regular", "GETRMEMAIL", parameters);
    }
    public void ATT_send_mailto_Employee(string toMailIDs, string empName, string redirectURL)
    { 
        StringBuilder strbuild = new StringBuilder();      
        var strsubject = "OneHR - Absentism Regularization for " + empName;
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            strbuild.Append("<tr><td>" + empName + " has submitted Attendance for regularization.</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            //strbuild.Append("<tr><td>");
            //strbuild.Append("<table style='width:60%;color:#000000;font-size:11pt;font-family:Trebuchet MS !important;font-style:Regular'>");
            //strbuild.Append("<tr><td>Date : </td><td >" + att_date + "</td></tr>");
            //strbuild.Append("<tr><td>Time : </td><td>" + att_Time + "</td></tr>");
            //strbuild.Append("<tr><td>Status : </td><td> " + att_Status + "</td></tr>");
            //strbuild.Append("<tr><td>Deduction : </td><td > " + Deduction + "</td></tr>");
            //strbuild.Append("</table>");
            //strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>Kindly Approve / Reject by clicking on following link</td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'>Click here</a></td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            //strbuild.Append("<tr><td style='height:20px'>Note: Miss Punch can only be regularized today itself.  </td></tr>");
            //strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {
            sendMailServiceRequest("sada2703@gmail.com", "ATT_send_mailto_Employee", ex.Message.ToString(), "", "");

        }
    }
    public void Att_Send_mailto_Emp_App(DataTable dtAtt, string toMailIDs, string empName)
    { 
        StringBuilder strbuild = new StringBuilder();      
        var strsubject = "OneHR - Attendance Regularization of " + empName;
        try
        {
            strbuild = new StringBuilder();
            if (dtAtt.Rows.Count > 0)
            {
                var count = 1;
                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Dear " + empName + ",</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>This is to inform you, following are the details of your Absentism regularization approval.</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("</table>");

                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;border-collapse: collapse !important;border: 1px solid black;'>");
                strbuild.Append("<tr style='text-align:left !important;height:50px;border: 1px solid black;'><th style='border: 1px solid black;'>Date</th><th style='border: 1px solid black;'>In / Out</th><th style='border: 1px solid black;'>Time</th><th style='border: 1px solid black;'>Status</th><th style='border: 1px solid black;'>Deduction</th><th style='border: 1px solid black;'>Regularization</th><th style='border: 1px solid black;'>Remark</th><th style='border: 1px solid black;'>Approve / Reject</th><th style='border: 1px solid black;'>Approver Comment</th></tr>");

                for (int irow = 0; irow < dtAtt.Rows.Count; irow++)
                {
                    strbuild.Append("<tr style='text-align:left !important;border: 1px solid black;'>");
                    strbuild.Append("<td style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["att_date"]).Trim() + "</td>");
                    strbuild.Append("<td style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["IN_OUT_TYPE"]).Trim() + "</td>");
                    strbuild.Append("<td style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["IN_OUT_TIME"]).Trim() + "</td>");
                    strbuild.Append("<td style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["IN_OUT_STATUS"]).Trim() + "</td>");
                    strbuild.Append("<td style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Deduction"]).Trim() + "</td>");
                    strbuild.Append("<td style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Leave_Status"]).Trim() + "</td>");
                    strbuild.Append("<td style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Remark"]).Trim() + "</td>");
                    strbuild.Append("<td style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["ApproveReject"]).Trim() + "</td>");
                    strbuild.Append("<td style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["ApproveRemark"]).Trim() + "</td>");
                    strbuild.Append("</tr>");
                    count++;
                }
                strbuild.Append("</table>");

                //sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
                sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
            }
        }
        catch (Exception)
        {
            throw;
        }
    }    
    //Timesheet 
    #region Timesheet
    public DataTable GetProjectTaskList(string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype)
        };
        return ExecuteDataTable("GetProjectTaskList","SP_Timesheet", qtype, parameters);
    }
    public void InsertTimeSheet(string qtype, double timesheet_id, string Emp_Code, string Timesheet_date, string ProjectName, int TaskId, string Hours, string status, string Description)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", timesheet_id),
            new SqlParameter("@TimesheetId", timesheet_id),
            new SqlParameter("@Emp_Code", Emp_Code),
            new SqlParameter("@Timesheet_date", Timesheet_date),
            new SqlParameter("@ProjectName", ProjectName),
            new SqlParameter("@TaskId", TaskId),
            new SqlParameter("@Hours", Hours),
            new SqlParameter("@status", status),
            new SqlParameter("@Description", Description)
        };
        ExecuteNonQuery("InsertTimeSheet","SP_Timesheet", qtype, parameters);

    }
    public DataTable GetTimesheetList(string qtype, string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Emp_Code", EmpCode)
        };
        return ExecuteDataTable("GetTimesheetList","SP_Timesheet", qtype, parameters);
    }
    public DataTable GetTimesheetDetailById(double id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetTimesheetDetailsById"),
            new SqlParameter("@Id", id)
        };
        return ExecuteDataTable("GetTimesheetDetailById","SP_Timesheet", "GetTimesheetDetailsById", parameters);
    }
    public DataTable GetTimesheetRegInbox(string app_Code)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetAppTimesheetList"),
            new SqlParameter("@app_Emp_Code", app_Code)
        };
        return ExecuteDataTable("GetTimesheetRegInbox","SP_Timesheet_Auto_Submit", "GetAppTimesheetList", parameters);
    }
    public DataSet GetTimesheetRMInboxDetail(double id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetAppTimesheetListDetail"),
            new SqlParameter("@Id", id)
        };
        return ExecuteDataSet("GetTimesheetRMInboxDetail","SP_Timesheet_Auto_Submit", "GetAppTimesheetListDetail", parameters);
    }
    public DataTable GetTimesheetRegInbox(string empCode, string date)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "IsCheckHoliday"),
            new SqlParameter("@Timesheet_date", date),
            new SqlParameter("@Emp_Code", empCode)
        };
        return ExecuteDataTable("GetTimesheetRegInbox","SP_Timesheet_Auto_Submit", "IsCheckHoliday", parameters);
    }
    public void ApproveCurrectionTimeSheet(string qtype, double timesheet_id, string Remark, string action)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", timesheet_id),
            new SqlParameter("@Remark", Remark),
            new SqlParameter("@Action", action)
        };
        ExecuteNonQuery("ApproveCurrectionTimeSheet","SP_Timesheet_Auto_Submit", qtype, parameters);
    }
    public DataTable GetMyTimesheetRegInbox(string Emp_Code)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetMyAppTimesheetList"),
            new SqlParameter("@Emp_Code", Emp_Code)
        };
        return ExecuteDataTable("GetMyTimesheetRegInbox","SP_Timesheet_Auto_Submit", "GetMyAppTimesheetList", parameters);
    }
    public DataSet GetMyTimesheetInboxDetails(double id, string emp_Code)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetMyAppTimesheetListDetail"),
            new SqlParameter("@Id", id),
            new SqlParameter("@Emp_Code", emp_Code)
        };
        return ExecuteDataSet("GetMyTimesheetInboxDetails","SP_Timesheet_Auto_Submit", "GetMyAppTimesheetListDetail", parameters);
    }
    public void SubmitCurrectionTimeSheet(double timesheet_id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "SUBMITCurrectionTIMESHEET"),
            new SqlParameter("@Id", timesheet_id)
        };
        ExecuteNonQuery("SubmitCurrectionTimeSheet","SP_Timesheet_Auto_Submit", "SUBMITCurrectionTIMESHEET", parameters);
    }
    public DataTable GetWeekStartDateEndDate(double TimesheetId)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETWeekSTARTDATEENDDATE"),
            new SqlParameter("@Id", TimesheetId)
        };
        return ExecuteDataTable("GetWeekStartDateEndDate","SP_Timesheet_Auto_Submit", "GETWeekSTARTDATEENDDATE", parameters);
    }
    public void Timesheet_Email_To_Employee(string toMailIDs, string empName, string app_Emp_name, string redirectURL, string subject, string startDate, string endDate, string remark, int isApp)
    { 
        StringBuilder strbuild = new StringBuilder();      
        var strsubject = subject;
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear " + empName + ",</td></tr>");
            strbuild.Append("<tr><td></td></tr>");
            if (redirectURL == "")
            {
                strbuild.Append("<tr><td>This is to inform you, " + app_Emp_name + " has approved your Timesheet for " + startDate + " - " + endDate + ".</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
            }
            else if (isApp == 0)
            {
                strbuild.Append("<tr><td>This is to inform you, " + app_Emp_name + " has sent back your Timesheet for correction from " + startDate + " - " + endDate + ".</td></tr>");
                strbuild.Append("<tr><td style='height:20px'>Remark :- " + remark + "</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'>Click here</a></td></tr>");
            }
            else
            {
                //strbuild.Append("<tr><td>This is to inform you that " + app_Emp_name + " has sent back Timesheet of dates " + startDate + " - " + endDate + " for your approval.</td></tr>");

                strbuild.Append("<tr><td>This is to inform you, " + app_Emp_name + " has sent back you Timesheet of dates " + startDate + " - " + endDate + " for your approval.</td></tr>");
                //strbuild.Append("<tr><td style='height:20px'>Remark :- " + remark + "</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'>Click here</a></td></tr>");
            }

            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {
            sendMailServiceRequest("sada2703@gmail.com", "Timesheet_Email_To_Employee", ex.Message.ToString(), "", "");

        }
    }
    public DataTable GetRMWeekDay(string date)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETWeekDayes"),
            new SqlParameter("@Timesheet_date", date)
        };
        return ExecuteDataTable("GetRMWeekDay","SP_Timesheet", "GETWeekDayes", parameters);
    }
    public void InsertMissTimesheet(string date, string emp_code)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTAUTOTIMESHEET"),
            new SqlParameter("@Emp_Code", emp_code),
            new SqlParameter("@Timesheet_date", date)
        };
        ExecuteNonQuery("InsertMissTimesheet","SP_Timesheet", "INSERTAUTOTIMESHEET", parameters);
    }
    public DataSet GetTimesheetDetailForDate(string date, string emp_code, string status)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETCurrentWeekDetail"),
            new SqlParameter("@Emp_Code", emp_code),
            new SqlParameter("@Timesheet_date", date),
            new SqlParameter("@status", status)
         };
        return ExecuteDataSet("GetTimesheetDetailForDate","SP_Timesheet", "GETCurrentWeekDetail", parameters);
    }
    public DataSet CheckIsSelfApprove(string empcode, int regId)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETSELFAPPROVEEMP"),
            new SqlParameter("@Emp_Code", empcode),
            new SqlParameter("@Reg_Id", regId)
        };
        return ExecuteDataSet("CheckIsSelfApprove","SP_Attendance_Regular", "GETSELFAPPROVEEMP", parameters);
    }
    public DataTable CheckIsEXISTSRegularization(string qtype, string date, string emp_code, int Leave_req_Id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Emp_Code", emp_code),
            new SqlParameter("@Att_date", date),
            new SqlParameter("@Leave_Req_id", Leave_req_Id)
         };
        return ExecuteDataTable("CheckIsEXISTSRegularization","SP_Attendance_Regular", qtype, parameters);
    }
    //Reporting 
    public DataSet GetTimesheetReportEmp(string date, string emp_code, string status, int day)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "TimesheetEmpReport"),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@FromDate", date),
            new SqlParameter("@status", status),
            new SqlParameter("@day", day)
        };
        return ExecuteDataSet("GetTimesheetReportEmp","SP_TimesheetCheckProjectANDTask", "TimesheetEmpReport", parameters);
    }
    public DataTable getTimesheetReport(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataTable("getTimesheetReport",strspname,"", parameters);
    }
    public DataTable getTimesheetEmpReport(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataTable("getTimesheetEmpReport",strspname,"", parameters);         
    }
    public DataTable getTeamReportAllDDL(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataTable("getTeamReportAllDDL",strspname,"", parameters); 
    }
    public DataTable getTeamReport(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataTable("getTeamReport",strspname,"", parameters);
    }
    public DataSet GetApprovedTimesheetRMInboxDetail(double id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetApprovedTimesheetListDetail"),
            new SqlParameter("@Id", id)
        };
        return ExecuteDataSet("GetApprovedTimesheetRMInboxDetail","SP_Timesheet_Auto_Submit", "GetApprovedTimesheetListDetail", parameters); 
    }
    #endregion

    #endregion

    #region IT asset Reports
    public DataTable GetAssetType()
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "FillAssetType")
        };
        return ExecuteDataTable("GetAssetType","SP_Admin_AssetInventory", "FillAssetType", parameters);
    }
    public DataTable GetStatus()
    {
        var parameters = new[]
        {
        new SqlParameter("@qtype", "FillAssetStatus")
        };
        return ExecuteDataTable("GetStatus","SP_Admin_AssetInventory", "FillAssetStatus", parameters);
    }
    public DataTable GetEmployeeList()
    {
        var parameters = new[]
        {
        new SqlParameter("@qtype", "Employee")
         };
        return ExecuteDataTable("GetEmployeeList","SP_Admin_GetDropdown", "Employee", parameters);
    }
    public DataTable CheckEmpAsCustodian(string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "ChkEmpAsCustodian"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("CheckEmpAsCustodian","SP_Admin_AssetInventory", "ChkEmpAsCustodian", parameters);
    }
    public DataTable CheckITHODExists(string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "CheckITHODExists"),
            new SqlParameter("@EmpCode", EmpCode)
         };
        return ExecuteDataTable("CheckITHODExists","SP_Admin_AssetInventory", "CheckITHODExists", parameters);
    }
    public DataTable GetAssetCategory()
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "FillAssetCategory")
         };
        return ExecuteDataTable("GetAssetCategory","SP_Admin_AssetInventory", "FillAssetCategory", parameters);
    }
    public DataTable GetAssetTypeByAssetCategory(int AssetCategoryId)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "FillAssetTypeByAssetCategory"),
            new SqlParameter("@AssetCategoryId", AssetCategoryId)
        };
        return ExecuteDataTable("GetAssetTypeByAssetCategory","SP_Admin_AssetInventory", "FillAssetTypeByAssetCategory", parameters);
    }
    #endregion
    
    #region Employee Transfer Request
    public DataTable getEmployeeTransferDDLData(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataTable("getEmployeeTransferDDLData",strspname,"",parameters);
    }
    public DataSet getEmployeeTransferEmailDetails(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataSet("getEmployeeTransferEmailDetails",strspname,"", parameters); 
    }
    public object InsertEmployeeTransferRequestTemp(string qtype, string emp_code, string deploymenttype, string CreatedBy, int id, int iBenchReasonId, string sbenchRemarks, string sBenchRM)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Emp_Code", emp_code),
            new SqlParameter("@DeploymentLocationTypeId", deploymenttype),
            new SqlParameter("@CREATEDBY", CreatedBy),
            new SqlParameter("@Id", id)
        };

        if(iBenchReasonId != 0)
            parameters.Add(new SqlParameter("@BenchReason_id", iBenchReasonId));        

        if (Convert.ToString(sbenchRemarks).Trim() != "")
            parameters.Add(new SqlParameter("@BenchReason_Remarks", sbenchRemarks));        

        if (Convert.ToString(sBenchRM).Trim() != "")
            parameters.Add(new SqlParameter("@RM", sBenchRM));

        var ETRid = ExecuteScalar("InsertEmployeeTransferRequestTemp","SP_EmployeeTransferRequest", qtype, parameters.ToArray());
        return ETRid;
    }
    public void InsertEmployeeTransferRequestDetail(string qtype, string emp_code, string CreatedBy, string newProjectCode, int newShiftId, string withEffectiveDate, string ETRequestId, string getdiptype, string RMStr, string sBenchReason_Remarks, int iBenchReason_Id)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Emp_Code", emp_code),
            new SqlParameter("@CREATEDBY", CreatedBy),
            new SqlParameter("@NewProjectCode", newProjectCode),
            new SqlParameter("@NewShiftId", newShiftId),
            new SqlParameter("@ETRequestId", ETRequestId),
            new SqlParameter("@DeploymentLocationTypeId", getdiptype),
            new SqlParameter("@EffectiveDate", withEffectiveDate)
         };
        if (Convert.ToString(RMStr).Trim() != "")
            parameters.Add(new SqlParameter("@RM", RMStr));

        if (Convert.ToString(sBenchReason_Remarks).Trim() != "")
            parameters.Add(new SqlParameter("@BenchReason_Remarks", sBenchReason_Remarks));

        if (iBenchReason_Id != 0)
            parameters.Add(new SqlParameter("@BenchReason_id", iBenchReason_Id));

        ExecuteNonQuery("InsertEmployeeTransferRequestDetail", "SP_EmployeeTransferRequest", qtype, parameters.ToArray());
    }

    public void SendEmailForEmployeeTransfer(DataSet ds, string newProject, string transferDate, string subject, string DeploymenttypeName)
    {
        try
        {
            if (ds != null)
            {
                DataTable dtEmpDetails = ds.Tables[0];
                DataTable dtApprovelDetails = ds.Tables[1];
                DataTable dtPendingTask = ds.Tables[2];
                var getEmp_Name = Convert.ToString(dtEmpDetails.Rows[0]["Emp_Name"]);
                var getEmp_EmailAddress = Convert.ToString(dtEmpDetails.Rows[0]["Emp_Emailaddress"]);

                var ccEmails = "";
                var toEmails = getEmp_EmailAddress;

                if (dtApprovelDetails.Rows.Count > 0)
                {
                    foreach (DataRow row in dtApprovelDetails.Rows)
                    {
                        if (ccEmails == "")
                        {
                            ccEmails = Convert.ToString(row["a_emp_email"]);
                        }
                        else
                        {
                            ccEmails = ccEmails + ";" + Convert.ToString(row["a_emp_email"]);
                        }
                    }
                }

                StringBuilder strbuild = new StringBuilder();

                // Start of the email body
                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;width:100%;table-layout:fixed;'>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Dear " + getEmp_Name + ",</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>&nbsp;</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>This is to inform you that you will be transferred to a new project <b>" + newProject + "</b> from <b>" + transferDate + "</b> and your deployment location will be <b>" + DeploymenttypeName + "</b>.</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Before you get transferred to the new project, please ensure that all pending requests (if any) are approved by the respective authorities of the current project.</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Failing to do so will cause cancellation of such pending requests on the Transfer Date, and you'll have to reapply for these requests and get approval from the new reporting hierarchy of the new project.</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>&nbsp;</td></tr>");
                strbuild.Append("</table>");

                // Add pending tasks table if available
                if (dtPendingTask.Rows.Count > 0)
                {
                    strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;width:100%;table-layout:fixed;border-collapse: collapse;'>");
                    strbuild.Append("<tr><td colspan='4'>Following is the list of your Pending Requests:</td></tr>");
                    strbuild.Append("<tr style='height:20px;'><td colspan='4'>&nbsp;</td></tr>");
                    strbuild.Append("<tr style='text-align:left;height:20px;border: 1px solid black;'>");
                    strbuild.Append("<th style='border: 1px solid black;padding: 5px;'>Request Type</th>");
                    strbuild.Append("<th style='border: 1px solid black;padding: 5px;'>Request Date</th>");
                    strbuild.Append("<th style='border: 1px solid black;padding: 5px;'>ID</th>");
                    strbuild.Append("<th style='border: 1px solid black;padding: 5px;'>Pending At</th>");
                    strbuild.Append("</tr>");

                    foreach (DataRow rows in dtPendingTask.Rows)
                    {
                        strbuild.Append("<tr style='text-align:left;border: 1px solid black;'>");
                        strbuild.Append("<td style='border: 1px solid black;padding: 5px;'>" + Convert.ToString(rows["RequestType"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;padding: 5px;'>" + Convert.ToString(rows["ReaquestDate"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;padding: 5px;'>" + Convert.ToString(rows["ID"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;padding: 5px;'>" + Convert.ToString(rows["PendingAt"]).Trim() + "</td>");
                        strbuild.Append("</tr>");
                    }

                    strbuild.Append("</table>");

                }
                strbuild.Append("<br><br><p style='color:#000000;font-size:9pt;font-family:Trebuchet MS;'>This is an auto generated email, please do not reply!</p>");

                // Send email
                sendMailServiceRequest(toEmails, subject, Convert.ToString(strbuild).Trim(), "", ccEmails);
            }
        }
        catch (Exception ex)
        {
            // Handle the exception or rethrow it as necessary
            throw;
        }
    }
    #endregion

    #region IT asset module workflow
    public DataTable GetEmpData(string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetEmpDataByEmpCode"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("GetEmpData","SP_Admin_AssetInventory", "GetEmpDataByEmpCode", parameters);
    }
    public DataTable GetDetails(int Id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetDetails"),
            new SqlParameter("@Id", Id)
        };
        return ExecuteDataTable("GetDetails","SP_Admin_AssetInventory", "GetDetails", parameters);
    }
    public DataTable FillDdlAssetNo()
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "AssetNoInStockWithDecisionPending")
        };
        return ExecuteDataTable("FillDdlAssetNo","SP_Admin_AssetInventory", "AssetNoInStockWithDecisionPending", parameters);
    }
    public DataTable SearchAssetNo(string AssetNumber, string SrNo, string Description)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "SearchAssetAllStock"),
            new SqlParameter("@AssetNumber", AssetNumber),
            new SqlParameter("@SrNo", SrNo),
            new SqlParameter("@Description", Description)
        };
        return ExecuteDataTable("SearchAssetNo","SP_Admin_AssetInventory", "SearchAssetAllStock", parameters);
    }
    public DataTable GetAllCustodianDetails()
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetAllCustodianDetails")
        };
        return ExecuteDataTable("GetAllCustodianDetails","SP_Admin_AssetInventory", "GetAllCustodianDetails" ,parameters);
    }
    public DataTable GetAssetAllocationReqNo()
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetAssetAllocationReqNo")
        };
        return ExecuteDataTable("GetAssetAllocationReqNo","SP_Admin_AssetInventory", "GetAssetAllocationReqNo", parameters);
    }
    public void InsertITAssetServiceRequestDetails(string CustCode, string Remarks, string AppRemarks, string qtype, string AssignedTo, int isAssigned, int Status, int ActionStatus, string Actionby, int id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@CustodianCode", CustCode),
            new SqlParameter("@Remarks", Remarks),
            new SqlParameter("@AppRemarks", AppRemarks),
            new SqlParameter("@AssignedTo", AssignedTo),
            new SqlParameter("@isAssigned", isAssigned),
            new SqlParameter("@Status", Status),
            new SqlParameter("@ActionStatus", ActionStatus),
            new SqlParameter("@ActionBy", Actionby),
            new SqlParameter("@id", id)
        };
        ExecuteScalar("InsertITAssetServiceRequestDetails","SP_Admin_AssetInventory", qtype, parameters);
    }
    public DataTable GetITHod()
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetITHOD")
        };
        return ExecuteDataTable("GetITHod","SP_Admin_AssetInventory", "GetITHOD", parameters);
    }
    public void InsertAssetOptionList(string AARNo, string AssetNumber)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "InsertAssetOptionList"),
            new SqlParameter("@AARNo", AARNo),
            new SqlParameter("@AssetNumber", AssetNumber)
        };
        ExecuteNonQuery("InsertAssetOptionList","SP_Admin_AssetInventory", "InsertAssetOptionList", parameters);
    }
    public void InsertAssetOptionListSentBack(string AARNo, string AssetNumber)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "InsertAssetOptionListSentBack"),
            new SqlParameter("@AARNo", AARNo),
            new SqlParameter("@AssetNumber", AssetNumber)
        };
        ExecuteNonQuery("InsertAssetOptionListSentBack","SP_Admin_AssetInventory", "InsertAssetOptionListSentBack", parameters);
    }
    public void InserITAssetRequestFiles(string AARNo, string EmpCode, string SenderCode, string strfilename)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "InsertFiles"),
            new SqlParameter("@AARNo", AARNo),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@SenderCode", SenderCode),
            new SqlParameter("@FileName", strfilename)
        };
        ExecuteNonQuery("InserITAssetRequestFiles","SP_Admin_AssetInventory", "InsertFiles", parameters);
    }
    public DataTable GetFileDetails(string AARNo, string EmpCode, string CustodianCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetFiles"),
            new SqlParameter("@AARNo", AARNo),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@SenderCode", CustodianCode)
        };
        return ExecuteDataTable("GetFileDetails","SP_Admin_AssetInventory", "GetFiles", parameters);
    }
    public DataTable GetOptionList(string AARNo)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetOptionList"),
            new SqlParameter("@AARNo", AARNo)
        };
        return ExecuteDataTable("GetOptionList","SP_Admin_AssetInventory", "GetOptionList", parameters);
    }
    public object UpdateAutoCheckInData(string AssignedTo, string AssetNumberID)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "UpdateAutoChkInData"),
            new SqlParameter("@AssignedTo", AssignedTo),
            new SqlParameter("@id", AssetNumberID)
        };
        return ExecuteDataSet("UpdateAutoCheckInData","SP_Admin_AssetInventory", "UpdateAutoChkInData", parameters);
    }
    public void UpdateAssetOptionList(string AARNo, string AssetNumber, string isSelected)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "UpdateAssetOptionList"),
            new SqlParameter("@AARNo", AARNo),
            new SqlParameter("@AssetNumber", AssetNumber),
            new SqlParameter("@isSelected", isSelected)
        };
        ExecuteNonQuery("UpdateAssetOptionList","SP_Admin_AssetInventory", "UpdateAssetOptionList", parameters);
    }
    public DataTable GetCheckInDataById(int AssetNumberID)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetCheckInDataById"),
            new SqlParameter("@id", AssetNumberID)
        };
        return ExecuteDataTable("GetCheckInDataById","SP_Admin_AssetInventory", "GetCheckInDataById", parameters);
    }
    public DataTable GetHODemailId()
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetHODemailId")
        };
        return ExecuteDataTable("GetHODemailId","SP_Admin_AssetInventory", "GetHODemailId", parameters);
    }
    public DataTable GetEmpDataByEmpCode(string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetEmpDataByEmpCode"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("GetEmpDataByEmpCode","SP_Admin_AssetInventory", "GetEmpDataByEmpCode", parameters);
    }
    public DataTable GetHrHOD()
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetHrHOD")
        };
        return ExecuteDataTable("GetHrHOD","SP_Admin_AssetInventory", "GetHrHOD", parameters);
    }
    public object UpdateNewJoineeFormStatus(string qType, int isSubmitted, int Id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qType),
            new SqlParameter("@isSubmitted", isSubmitted),
            new SqlParameter("@id", Id)
        };
        return ExecuteScalar("UpdateNewJoineeFormStatus","SP_Admin_AssetInventory", qType,parameters);
    }
    public DataTable GetITAssetServiceList(string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetITAssetServiceList"),
            new SqlParameter("@EmpCode", empCode)
        };
        return ExecuteDataTable("UpdateNewJoineeFormStatus","SP_Admin_AssetInventory", "GetITAssetServiceList", parameters);
    }
    public DataTable GETITAsseteEscalationCOUNT(string location, DateTime startDate, DateTime endDate)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETITAssetEscalationCOUNT"),
            new SqlParameter("@StartDate", startDate),
            new SqlParameter("@EndDate", endDate),
            new SqlParameter("@Location", location)
        };
        return ExecuteDataTable("GETITAsseteEscalationCOUNT","SP_GetEscalation_SR_Count", "GETITAssetEscalationCOUNT", parameters);
    }
    public DataSet ITAssetServiceReqData(int id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "ITAssetServiceReqData"),
            new SqlParameter("@Id", id)
        };
        return ExecuteDataSet("ITAssetServiceReqData","SP_Admin_AssetInventory", "ITAssetServiceReqData", parameters);
    }
    public DataTable GetSelectedAsset(string AARNo)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetSelectedAsset"),
            new SqlParameter("@AARNo", AARNo)
        };
        return ExecuteDataTable("GetSelectedAsset","SP_Admin_AssetInventory", "GetSelectedAsset", parameters);
    }
    public DataTable GetCustodianINBOX(string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "CustodianINBOX"),
            new SqlParameter("@EmpCode", empCode)
        };
        return ExecuteDataTable("GetCustodianINBOX","SP_Admin_AssetInventory", "CustodianINBOX", parameters);
    }
    public DataTable GetITHodINBOX(string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "ITHodINBOX"),
            new SqlParameter("@EmpCode", empCode)
        };
        return ExecuteDataTable("GetITHodINBOX","SP_Admin_AssetInventory", "ITHodINBOX", parameters);
    }
    public DataTable SearchEmp()
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "Employee")
        };
        return ExecuteDataTable("SearchEmp","SP_Admin_GetDropdown", "Employee", parameters);

    }
    public DataTable GetAllocatedAssetList(string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "AllocatedAssetListOfEmp"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("GetAllocatedAssetList","SP_Admin_AssetInventory", "AllocatedAssetListOfEmp", parameters);
    }
    public object InsertReqRepairReplacement(string CustCode, string Remarks, string AppRemarks, string qtype, string AssignedTo, int isAssigned, int Status, int ActionStatus, string Actionby, string ReqType, string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@CustodianCode", CustCode),
            new SqlParameter("@Remarks", Remarks),
            new SqlParameter("@AppRemarks", AppRemarks),
            new SqlParameter("@AssignedTo", AssignedTo),
            new SqlParameter("@isAssigned", isAssigned),
            new SqlParameter("@Status", Status),
            new SqlParameter("@ActionStatus", ActionStatus),
            new SqlParameter("@ActionBy", Actionby),
            new SqlParameter("@RequestType", ReqType),
            new SqlParameter("@EmpCode", EmpCode)
         };
        return ExecuteScalar("InsertReqRepairReplacement","SP_Admin_AssetInventory", qtype, parameters);         
    }
    public void InsertOldAssetOptionListForReplacement(string AARNo, string AssetNumber)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "InsertOldAssetOptionList"),
            new SqlParameter("@AARNo", AARNo),
            new SqlParameter("@AssetNumber", AssetNumber)
        };
        ExecuteNonQuery("InsertOldAssetOptionListForReplacement","SP_Admin_AssetInventory", "InsertOldAssetOptionList", parameters);
    }
    public DataTable GetITAssetRequestDetailsByAARNo(int AARNoId)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetITAssetRequestDetailsByAARNo"),
            new SqlParameter("@AARNoId", AARNoId)
        };
        return ExecuteDataTable("GetITAssetRequestDetailsByAARNo","SP_Admin_AssetInventory", "GetITAssetRequestDetailsByAARNo", parameters);
    }
    public DataTable GetOldOptionList(string AARNo)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetOldOptionList"),
            new SqlParameter("@AARNo", AARNo)
        };
        return ExecuteDataTable("GetOldOptionList","SP_Admin_AssetInventory", "GetOldOptionList", parameters);
    }
    public void UpdateReqRepairReplacement(string CustCode, string Remarks, string AppRemarks, string qtype, string AssignedTo, int isAssigned, int Status, int ActionStatus, string Actionby, string ReqType, string EmpCode, int id)
    {
        var parameters = new[]
        {
             new SqlParameter("@qtype", qtype),
             new SqlParameter("@CustodianCode", CustCode),
             new SqlParameter("@Remarks", Remarks),
             new SqlParameter("@AppRemarks", AppRemarks),
             new SqlParameter("@AssignedTo", AssignedTo),
             new SqlParameter("@isAssigned", isAssigned),
             new SqlParameter("@Status", Status),
             new SqlParameter("@ActionStatus", ActionStatus),
             new SqlParameter("@ActionBy", Actionby),
             new SqlParameter("@RequestType", ReqType),
             new SqlParameter("@EmpCode", EmpCode),
             new SqlParameter("@id", id)
        };
        ExecuteNonQuery("UpdateReqRepairReplacement","SP_Admin_AssetInventory", qtype, parameters);
    }
    public DataTable GetInboxProcessedReqList(string assgimentTo, string fromdate, string todate)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "InboxProcessedReqList"),
            new SqlParameter("@AssignedTo", assgimentTo),
            new SqlParameter("@fromDate", fromdate),
            new SqlParameter("@toDate", todate)
        };
        return ExecuteDataTable("GetInboxProcessedReqList","SP_Admin_AssetInventory", "InboxProcessedReqList", parameters);
    }
    public DataTable GetCustodianSerivesRequestMyInbox(string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "InboxCustodianITAssetserviceRequests"),
            new SqlParameter("@EmpCode", empCode)
        };
        return ExecuteDataTable("GetCustodianSerivesRequestMyInbox","SP_Admin_AssetInventory", "InboxCustodianITAssetserviceRequests", parameters);
    }

    #endregion

    #region GetRecruitment Requisition
    //added by bharat mainkar 11-04-21
    public DataTable Get_RecruiterChange_ExtraApprovalEmp(string empcode)
    {
        var parameters = new[]
        {
              new SqlParameter("@stype", "get_RecruiterChange"),
              new SqlParameter("@emp_code", empcode)
        };
        return ExecuteDataTable("Get_RecruiterChange_ExtraApprovalEmp","Usp_getRecruitmentEmp_Details_All", "get_RecruiterChange", parameters);
    }
    public DataTable GetRecruitment_PositionTitle()
    {
        var parameters = new[]
        {
              new SqlParameter("@stype", "sp_Req_PositionTitle")
        };
        return ExecuteDataTable("GetRecruitment_PositionTitle","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_PositionTitle", parameters);
    }
    public DataTable GetRecruitment_Req_PositionCriticality()
    {
        var parameters = new[]
        {
              new SqlParameter("@stype", "sp_Req_PositionCriticality")
        };
        return ExecuteDataTable("GetRecruitment_Req_PositionCriticality","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_PositionCriticality", parameters);
    }
    public DataTable GetRecruitment_Req_DepartmentMaster()
    {
        var parameters = new[]
        {
              new SqlParameter("@stype", "sp_Req_DepartmentMaster")
        };
        return ExecuteDataTable("GetRecruitment_Req_DepartmentMaster","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_DepartmentMaster", parameters);
    }
    public DataTable GetRecruitment_Req_company_Location()
    {
        var parameters = new[]
        {
              new SqlParameter("@stype", "sp_Req_company_Location")
        };
        return ExecuteDataTable("GetRecruitment_Req_company_Location","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_company_Location", parameters);
    }    
    public DataTable GetRecruitment_SkillsetName()
    {
        var parameters = new[]
        {
              new SqlParameter("@stype", "sp_Req_HRMS_MODULE_Name")
        };
        return ExecuteDataTable("GetRecruitment_SkillsetName","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_HRMS_MODULE_Name", parameters);
    }
    public DataTable GetRecruitment_Req_ReasonRequisition()
    {
        var parameters = new[]
        {
              new SqlParameter("@stype", "sp_Req_ReasonRequisition")
        };
        return ExecuteDataTable("GetRecruitment_Req_ReasonRequisition","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_ReasonRequisition", parameters);
    }
    public DataTable GetRecruitment_Req_DesignationMaster()
    {
        var parameters = new[]
        {
              new SqlParameter("@stype", "sp_Req_tbldesignationMaster")
        };
        return ExecuteDataTable("GetRecruitment_Req_DesignationMaster","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_tbldesignationMaster", parameters);
    }
    public DataTable GetRecruitment_Req_HRMS_Employment_Type()
    {
        var parameters = new[]
        {
              new SqlParameter("@stype", "sp_Req_HRMS_Employment_Type")
        };
        return ExecuteDataTable("GetRecruitment_Req_HRMS_Employment_Type","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_HRMS_Employment_Type", parameters);
    }
    public DataTable GetRecruitment_Req_HRMS_BAND_MASTER()
    {
        var parameters = new[]
        {
              new SqlParameter("@stype", "sp_Req_HRMS_BAND_MASTER")
        };
        return ExecuteDataTable("GetRecruitment_Req_HRMS_BAND_MASTER","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_HRMS_BAND_MASTER", parameters);
    }
    public DataTable GetRecruitment_Req_Employee_Mst()
    {
        var parameters = new[]
        {
              new SqlParameter("@stype", "sp_Req_Employee_Mst")
        };
        return ExecuteDataTable("GetRecruitment_Req_Employee_Mst","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_Employee_Mst", parameters);
    }
    public DataTable GetRecruitment_Req_Screeners_Mst(int ModuleId)
    {
        var parameters = new[]
        {
               new SqlParameter("@stype", "sp_Req_Screeners_Mst"),
               new SqlParameter("@moduleID", ModuleId)
        };
        return ExecuteDataTable("GetRecruitment_Req_Screeners_Mst","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_Screeners_Mst", parameters);
    }
    public DataTable GetRecruitment_Req_EducationType()
    {
        var parameters = new[]
        {
               new SqlParameter("@stype", "sp_Req_EducationType")
        };
        return ExecuteDataTable("GetRecruitment_Req_EducationType","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_EducationType", parameters);
    }
    public DataTable GetRecruitment_Req_JobSites()
    {
        var parameters = new[]
        {
               new SqlParameter("@stype", "sp_Req_Job_Sites")
        };
        return ExecuteDataTable("GetRecruitment_Req_JobSites","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_Job_Sites", parameters);
    }
    public DataTable GetRecruitment_Req_VendorDetails()
    {
        var parameters = new[]
        {
               new SqlParameter("@stype", "sp_Req_VenderDetails")
        };
        return ExecuteDataTable("GetRecruitment_Req_VendorDetails","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_VenderDetails", parameters);
    }
    public DataTable GetRecruitment_Recruiter()
    {
        var parameters = new[]
        {
               new SqlParameter("@stype", "sp_Req_Recruiter")
        };
        return ExecuteDataTable("GetRecruitment_Recruiter","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_Recruiter",parameters);
    }
    public DataTable GetRecruitment_Req_IRSheet_Rating()
    {
        var parameters = new[]
        {
               new SqlParameter("@stype", "IRSheet_Rating")
        };
        return ExecuteDataTable("GetRecruitment_Req_IRSheet_Rating","SP_GETREQUISTIONLIST_DETAILS", "IRSheet_Rating", parameters);
    }
    public DataTable InsertJDBankDetail(string Stype, int ModuleId, int PositionTitle_ID, string JobDescription, int JD_BankDetail_ID, string IsActive, string EmpCode)
    {
        var parameters = new[]
        {
               new SqlParameter("@stype", Stype),
               new SqlParameter("@JobDescription", JobDescription),
               new SqlParameter("@ModuleId", ModuleId),
               new SqlParameter("@PositionTitle_ID", PositionTitle_ID),
               new SqlParameter("@JD_BankDetail_ID", JD_BankDetail_ID),
               new SqlParameter("@IsActive", IsActive),
               new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("InsertJDBankDetail","SP_Rec_JDBankDetail_INSERT", Stype, parameters);
    }
    public DataTable GetJDBankDetail()
    {
        var parameters = new[]
        {
               new SqlParameter("@stype", "Select")
        };
        return ExecuteDataTable("GetJDBankDetail","SP_Rec_JDBankDetail_INSERT", "Select", parameters);
    }
    public DataTable Insert_Temp_Candid_Education_Detail(string Stype, int CandEducationID, int EducationTypeID, string CollegeName, string YearofPassing, string FinalScore, string PGType, string PGUniversityName, string PGDiscipline, string Candidate_mobileNo, string Candidate_Email, int Candidate_ID, string EmpCode)
    {
        var parameters = new[]
        {
               new SqlParameter("@stype", Stype),
               new SqlParameter("@CandEducationID", CandEducationID),
               new SqlParameter("@EducationTypeID", EducationTypeID),
               new SqlParameter("@CollegeName", CollegeName),
               new SqlParameter("@YearofPassing", YearofPassing),
               new SqlParameter("@FinalScore", FinalScore),
               new SqlParameter("@PGDiscipline", PGDiscipline),
               new SqlParameter("@PGUniversityName", PGUniversityName),
               new SqlParameter("@PGType", PGType),
               new SqlParameter("@Candidate_ID", Candidate_ID),
               new SqlParameter("@Candidate_mobileNo", Candidate_mobileNo),
               new SqlParameter("@CanEmail", Candidate_Email),
               new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("Insert_Temp_Candid_Education_Detail","SP_Rec_Temp_Candi_Education_INSERT", Stype, parameters);
    }
    public DataTable Insert_Temp_Candid_Company_Detail(string Stype, int CandCompanyID, string NameofCompany, string CandDesignation, string StartDate, string EndDate, string Candidate_mobileNo, string Candidate_Email, int Candidate_ID, string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", Stype),
            new SqlParameter("@CandCompanyID", CandCompanyID),
            new SqlParameter("@NameofCompany", NameofCompany),
            new SqlParameter("@CandDesignation", CandDesignation),
            new SqlParameter("@StartDate", StartDate),
            new SqlParameter("@EndDate", EndDate),
            new SqlParameter("@Candidate_mobileNo", Candidate_mobileNo),
            new SqlParameter("@CanEmail", Candidate_Email),
            new SqlParameter("@Candidate_ID", Candidate_ID),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("Insert_Temp_Candid_Company_Detail","SP_Rec_Temp_Candi_Company_INSERT", Stype, parameters);
    }
    public DataSet Get_Rec_Recruit_Dept_Report(string Stype, int Department_id, string Loc_Code, int PositionCriticality_ID, string Recruiter_Code, DateTime FromDate, DateTime ToDate, string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", Stype),
            new SqlParameter("@Department_id", Department_id),
            new SqlParameter("@comp_code", Loc_Code),
            new SqlParameter("@PositionCriticality_ID", PositionCriticality_ID),
            new SqlParameter("@Recruiter_Code", Recruiter_Code),
            new SqlParameter("@FromDate", FromDate),
            new SqlParameter("@ToDate", ToDate),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataSet("Get_Rec_Recruit_Dept_Report","SP_Get_Rec_Recruit_Dept_Report", Stype, parameters);
    }
    public DataSet Get_Rec_Recruit_IrSheetDetails(string Stype, int Recruitment_ReqID, int Candidate_ID)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", Stype),
            new SqlParameter("@Recruitment_ReqID", Recruitment_ReqID),
            new SqlParameter("@Candidate_ID", Candidate_ID)
        };
        return ExecuteDataSet("Get_Rec_Recruit_IrSheetDetails","SP_Get_Rec_IrSheetDetails", Stype, parameters);
    }
    public void Insert_Recruit_IrSheetDetails(string stype, int Main_Type_ID, int SubType_ID, int CandidateScheduleRound_ID, string Remark, int RatingID, int Overallrating, string Recommendation, string Notes, string InterviewrRemarks, int Candidate_ID, int Recruitment_ReqID, string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype ", stype),
            new SqlParameter("@Main_Type_ID", Main_Type_ID),
            new SqlParameter("@SubType_ID", SubType_ID),
            new SqlParameter("@CandidateScheduleRound_ID", CandidateScheduleRound_ID),
            new SqlParameter("@Remark", Remark),
            new SqlParameter("@RatingID", RatingID),
            new SqlParameter("@Overallrating", Overallrating),
            new SqlParameter("@Recommendation", Recommendation),
            new SqlParameter("@Notes", Notes),
            new SqlParameter("@InterviewrRemarks", InterviewrRemarks),
            new SqlParameter("@Candidate_ID", Candidate_ID),
            new SqlParameter("@Recruitment_ReqID", Recruitment_ReqID),
            new SqlParameter("@EmpCode", EmpCode)
        };
        ExecuteNonQuery("Insert_Recruit_IrSheetDetails","SP_Get_Rec_IrSheetDetails", stype, parameters);
    }
    public void InsertAssign_Questionnaire(string UploadData, int ModuleId, int PositionTitle_ID, int AssignQuestionnaire_ID)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "INSERT"),
            new SqlParameter("@UploadData", UploadData),
            new SqlParameter("@ModuleId", ModuleId),
            new SqlParameter("@PositionTitle_ID", PositionTitle_ID),
            new SqlParameter("@AssignQuestionnaire_ID", AssignQuestionnaire_ID)
        };
        ExecuteNonQuery("InsertAssign_Questionnaire","SP_Rec_Assign_Questionnaire", "INSERT", parameters);
    }
    public DataTable GetAssign_Questionnaire()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "Select")
        };
        return ExecuteDataTable("GetAssign_Questionnaire","SP_Rec_Assign_Questionnaire", "Select", parameters);
    }
    public DataTable Get_JobSites_Details()
    {
        var parameters = new[]
        {
               new SqlParameter("@stype", "Select")
        };
        return ExecuteDataTable("Get_JobSites_Details","SP_Rec_JobSites_Details", "Select", parameters);
    }
    public DataTable Get_Rec_VendorDetails()
    {
        var parameters = new[]
        {
               new SqlParameter("@stype", "Select")
        };
        return ExecuteDataTable("Get_Rec_VendorDetails","SP_Rec_Vendor_Details", "Select", parameters);

    }
    public DataTable InsertRecruitmentRequisition(Recruitment_Requisition_Parameter Req)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", Req.Stype),
            new SqlParameter("@RequisitionNumber", Req.RequisitionNumber),
            new SqlParameter("@RequisitionDate", Req.RequisitionDate),
            new SqlParameter("@Emp_Code", Req.Emp_Code),
            new SqlParameter("@PositionCriticality_ID", Req.PositionCriticality_ID),
            new SqlParameter("@PositionTitle_ID", Req.PositionTitle_ID),
            new SqlParameter("@NoOfPosition", Req.NoOfPosition),
            new SqlParameter("@Department_id", Req.Department_id),
            new SqlParameter("@PositionDesignationOther", Req.PositionDesignationOther),
            new SqlParameter("@loc_code", Req.loc_code),
            new SqlParameter("@OtherDepartment", Req.OtherDepartment),
            new SqlParameter("@ModuleId", Req.ModuleId),
            new SqlParameter("@ReasonRequisition_ID", Req.ReasonRequisition_ID),
            new SqlParameter("@AdditionalSkillset", Req.AdditionalSkillset),
            new SqlParameter("@Designation_ID", Req.Designation_ID),
            new SqlParameter("@PID", Req.PID),
            new SqlParameter("@BAND", Req.BAND),
            new SqlParameter("@SalaryRangefrom_Lakh_Year", Req.SalaryRangefrom_Lakh_Year),
            new SqlParameter("@SalaryRangeto_Lakh_Year", Req.SalaryRangeto_Lakh_Year),
            new SqlParameter("@ToBeFilledIn_Days", Req.ToBeFilledIn_Days),
            new SqlParameter("@EssentialQualification", Req.EssentialQualification),
            new SqlParameter("@DesiredQualification", Req.DesiredQualification),
            new SqlParameter("@Required_ExperienceFrom_Years", Req.Required_ExperienceFrom_Years),
            new SqlParameter("@Required_ExperienceTo_Years", Req.Required_ExperienceTo_Years),
            new SqlParameter("@RecommendedPerson", Req.RecommendedPerson),
            new SqlParameter("@JD_BankDetail_ID", Req.JD_BankDetail_ID),
            new SqlParameter("@Assign_Questionnaire_ID", Req.Assign_Questionnaire_ID),
            new SqlParameter("@Comments", Req.Comments),
            new SqlParameter("@Emp_Code_Inter1", Req.Emp_Code_Inter1),
            new SqlParameter("@Emp_Code_Inter1_OPT", Req.Emp_Code_Inter1_OPT),
            new SqlParameter("@Emp_Code_Inter2", Req.Emp_Code_Inter2),
            new SqlParameter("@Emp_Code_Inter2_OPT", Req.Emp_Code_Inter2_OPT),
            new SqlParameter("@RecruiterID", Req.RecruiterID),
            new SqlParameter("@Status_ID", Req.Status_ID),
            new SqlParameter("@ISDraft", Req.ISDraft),
            new SqlParameter("@Recruitment_ReqID", Req.Recruitment_ReqID)
         };
        return ExecuteDataTable("InsertRecruitmentRequisition","SP_Recruitment_Requisition_INSERT", Req.Stype, parameters);
    }
    public DataTable Insert_Req_Questionnaire_Files(string Stype, int ModuleId, int PositionTitle_ID, string strfilename, Int32 Questionnaire_ID, string IsActive, string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", Stype),
            new SqlParameter("@ModuleId", ModuleId),
            new SqlParameter("@PositionTitle_ID", PositionTitle_ID),
            new SqlParameter("@UploadData", strfilename),
            new SqlParameter("@AssignQuestionnaire_ID", Questionnaire_ID),
            new SqlParameter("@IsActive", IsActive),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("Insert_Req_Questionnaire_Files","SP_Rec_Assign_Questionnaire", Stype, parameters);
    }
    public DataTable Insert_Req_Vendor_Delete(string Stype, int VenderID)
    {
        var parameters = new[]
        {
               new SqlParameter("@stype", Stype),
               new SqlParameter("@VenderID", VenderID)
        };
        return ExecuteDataTable("Insert_Req_Vendor_Delete","SP_Rec_Vendor_Details", Stype,parameters);
    }
    public DataTable Insert_Req_JobSites_Delete(string Stype, int JobSitesID)
    {
        var parameters = new[]
        {
               new SqlParameter("@stype", Stype),
               new SqlParameter("@JobSitesID", JobSitesID)
        };
        return ExecuteDataTable("Insert_Req_JobSites_Delete","SP_Rec_JobSites_Details", Stype, parameters);
    }
    public DataTable Insert_Req_Vendor_Details(string Stype, int VenderID, string VenderName, string IsActive, string EmpCode)
    {
        var parameters = new[]
        {
               new SqlParameter("@stype", Stype),
               new SqlParameter("@VenderName", VenderName),
               new SqlParameter("@VenderID", VenderID),
               new SqlParameter("@IsActive", IsActive),
               new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("Insert_Req_Vendor_Details","SP_Rec_Vendor_Details", Stype,parameters);
    }
    public DataTable Insert_Req_JobSites_Details(string Stype, int JobSitesID, string JobSitesName, string IsActive, string EmpCode)
    {
        var parameters = new[]
        {
               new SqlParameter("@stype", Stype),
               new SqlParameter("@JobSitesName", JobSitesName),
               new SqlParameter("@JobSitesID", JobSitesID),
               new SqlParameter("@IsActive", IsActive),
               new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("Insert_Req_JobSites_Details","SP_Rec_JobSites_Details", Stype, parameters);
    }
    public DataTable GetAssign_QuestionnaireFilter(string Stype, int ModuleId, int PositionTitle_ID)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", Stype),
            new SqlParameter("@ModuleId", ModuleId),
            new SqlParameter("@PositionTitle_ID", PositionTitle_ID)
        };
        return ExecuteDataTable("GetAssign_QuestionnaireFilter","SP_Rec_Assign_Questionnaire", Stype, parameters);
    }
    public DataTable GetAssign_JDBankFilter(string Stype, int ModuleId, int PositionTitle_ID)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", Stype),
            new SqlParameter("@ModuleId", ModuleId),
            new SqlParameter("@PositionTitle_ID", PositionTitle_ID)
        };
        return ExecuteDataTable("GetAssign_JDBankFilter","SP_Rec_JDBankDetail_INSERT", Stype, parameters);
    }
    public DataTable GetReq_RequisitionList(string Emp_Code)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "Select_Recruitment_Requisition"),
            new SqlParameter("@Emp_Code", Emp_Code)
        };
        return ExecuteDataTable("GetReq_RequisitionList","SP_Recruitment_Requisition_INSERT", "Select_Recruitment_Requisition", parameters);
    }
    public int getRequisitionPending_InboxList_Count(string empcode)
    {
        int RequestCount = 0;
        DataTable dtAttlvInbox = new DataTable();

        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Recruitmen_Pending_approver_inboxlst_cnt"),
            new SqlParameter("@emp_code", empcode)
        };
        dtAttlvInbox= ExecuteDataTable("getRequisitionPending_InboxList_Count","SP_Recruitment_Requisition_INSERT", "get_Recruitmen_Pending_approver_inboxlst_cnt", parameters);
        if (dtAttlvInbox.Rows.Count > 0)
        {
            RequestCount = (int)dtAttlvInbox.Rows[0]["Recruitcnt"];
        }
        return RequestCount;          
    }
    public int getReq_Offer_Approval_Pending_InboxList_Count(string empcode)
    {
        int RequestCount = 0;
        DataTable dtAttlvInbox = new DataTable();
        var parameters = new[]
        {
            new SqlParameter("@mode", "get_Rec_Offer_approver_inboxlst_cnt"),
            new SqlParameter("@empCode", empcode)
        };
        dtAttlvInbox = ExecuteDataTable("getReq_Offer_Approval_Pending_InboxList_Count","sp_Offer_Approval_Details", "get_Rec_Offer_approver_inboxlst_cnt", parameters);
        if (dtAttlvInbox.Rows.Count > 0)
        {
            RequestCount = (int)dtAttlvInbox.Rows[0]["Recruitcnt"];
        }
        return RequestCount;         
    }
    public DataTable GetReq_RequisitionApprovalList(string Emp_Code, string stype)
    {
        var parameters = new[]
        {
               new SqlParameter("@stype", stype),
               new SqlParameter("@Emp_Code", Emp_Code)
        };
        return ExecuteDataTable("GetReq_RequisitionApprovalList","SP_Recruitment_Requisition_INSERT", stype,parameters);
    }
    public DataTable GetReq_Req_Offer_Approval_List(string Emp_Code, string stype)
    {
        var parameters = new[]
        {
               new SqlParameter("@mode", stype),
               new SqlParameter("@empCode", Emp_Code)
        };
        return ExecuteDataTable("GetReq_Req_Offer_Approval_List","sp_Offer_Approval_Details", stype,parameters);
    }

    //public DataTable GetRequisitionApproverStatus(string empcode, string Reqid,int DeptID)
    //    {
    //        DataTable dstapp = new DataTable();
    //        try
    //        {
    //            scon = new SqlConnection(ConfigurationManager.ConnectionStrings["sqlconnection"].ToString());
    //            if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
    //                scon.Open();
    //            sCommand = new SqlCommand();
    //            sCommand.Connection = scon;
    //            sCommand.CommandText = "GETREQUISITIONAPPROVERSTATUS";
    //            sCommand.CommandType = CommandType.StoredProcedure;
    //            new SqlParameter("@emp_code", empcode);
    //            new SqlParameter("@REQID", Reqid);
    //			new SqlParameter("@Dept_ID", DeptID);
    //			sadp = new SqlDataAdapter();
    //            sadp.SelectCommand = sCommand;

    //            sadp.Fill(dstapp);


    //        }
    //        catch (Exception ex)
    //        {
    //        }
    //        finally
    //        {
    //            scon.Close();
    //        }
    //        return dstapp;

    //    }

    public DataTable GetRequisitionApproverStatus(string empcode, string Reqid, int DeptID, string comp_code, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@REQID", Reqid),
            new SqlParameter("@Dept_ID", DeptID),
            new SqlParameter("@comp_code", comp_code)
        };
        return ExecuteDataTable("GetRequisitionApproverStatus",qtype,"", parameters);
    }
    public DataTable GetRequisitionApproverStatus_Cancellation(string empcode, string Reqid, int DeptID)
    {
        var parameters = new[]
        {
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@REQID", Reqid),
            new SqlParameter("@Dept_ID", DeptID)
        };
        return ExecuteDataTable("GetRequisitionApproverStatus_Cancellation","GETREQUISITIONAPPROVERSTATUS_Cancellation","", parameters);
    }
    public void Insert_Requisition_ApproverRequest(string apprcode, int apprid, int MaxRequestId)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", "INSERT"),
            new SqlParameter("@REQ_ID", MaxRequestId),
            new SqlParameter("@APPR_EMP_CODE", apprcode),
            new SqlParameter("@Action", "Pending"),
            new SqlParameter("@APPR_ID", apprid)
        };
        ExecuteNonQuery("Insert_Requisition_ApproverRequest","SP_SAVE_REQUISITION_APPR_STATUS", "INSERT", parameters);
    }
    public void Update_Req_Offer_AppRequest(int Offer_App_ID, string status, string comment, string EmpCode, int apprid, string OfferCondition)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", "UPDATE"),
            new SqlParameter("@Offer_App_ID", Offer_App_ID),
            new SqlParameter("@appr_comments", comment),
            new SqlParameter("@APPR_EMP_CODE", EmpCode),
            new SqlParameter("@Action", status),
            new SqlParameter("@APPR_ID", apprid),
           new SqlParameter("@OfferCondition", OfferCondition)
        };
        ExecuteNonQuery("Update_Req_Offer_AppRequest","SP_Save_Req_Offer_App_Status", "UPDATE", parameters);
    }
    public void Insert_Req_Offer_Approver_Request(string apprcode, int apprid, int MaxRequestId)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", "INSERT"),
            new SqlParameter("@Offer_App_ID", MaxRequestId),
            new SqlParameter("@APPR_EMP_CODE", apprcode),
            new SqlParameter("@Action", "Pending"),
            new SqlParameter("@APPR_ID", apprid)
        };
        ExecuteNonQuery("Insert_Req_Offer_Approver_Request","SP_Save_Req_Offer_App_Status", "INSERT", parameters);
    }
    public void Insert_Requisition_CancelRequest(string apprcode, int apprid, int MaxRequestId)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", "INSERT_Cancel"),
            new SqlParameter("@REQ_ID", MaxRequestId),
            new SqlParameter("@APPR_EMP_CODE", apprcode),
            new SqlParameter("@Action", "Pending"),
            new SqlParameter("@APPR_ID", apprid)
        };
        ExecuteNonQuery("Insert_Requisition_CancelRequest","SP_SAVE_REQUISITION_APPR_STATUS", "INSERT_Cancel", parameters);
    }
    //public DataTable Get_Requisition_ApproverEmailID(string empcode,int DeptID)
    //    {

    //        try
    //        {
    //            sql.con.ConnectionString = connection;
    //            sql.con.Open();
    //            sql.cmd6.Connection = sql.con;
    //            sql.cmd6.CommandType = CommandType.StoredProcedure;
    //            sql.cmd6.CommandText = "[SP_GETREQUIS_REQUESTER_APPMETRIX]";
    //            sql.adp4.SelectCommand = sql.cmd6;
    //            sql.cmd6.Parameters.Clear();
    //            sql.cmd6.Parameters.AddWithValue("@Emp_code", empcode);
    //            sql.cmd6.Parameters.AddWithValue("@QUERYMODE", null);
    //			sql.cmd6.Parameters.AddWithValue("@Dept_ID", DeptID);
    //			dtApproverEmailId = new DataTable();
    //            sql.adp4.Fill(dtApproverEmailId);
    //            return dtApproverEmailId;
    //        }
    //        catch (Exception)
    //        {

    //            throw;
    //        }

    //        finally
    //        {
    //            sql.con.Close();

    //        }

    //    }

    public DataTable Get_Requisition_ApproverEmailID(string empcode, int DeptID, string comp_code, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@Emp_code", empcode),
            new SqlParameter("@QUERYMODE", null),
            new SqlParameter("@Dept_ID", DeptID),
            new SqlParameter("@comp_code", comp_code)
        };
        return ExecuteDataTable("Get_Requisition_ApproverEmailID",qtype,"", parameters);
    }
    public void send_mailto_Req_Requisition_TEST(string ReqMailID, string toMailIDs, string strsubject, string JD, string EQualification, string DQualification, string Comments)
    { 
        StringBuilder strbuild = new StringBuilder();      
        strsubject = strsubject + " of " + " ";
        try
        {
            strbuild = new StringBuilder();
            strbuild.Append(JD);
            strbuild.Append("</br>");
            strbuild.Append("<b>Essential Qualification :</b>");
            strbuild.Append("</br>");
            strbuild.Append("<div>" + EQualification + "  </div>");
            strbuild.Append("</br>");
            strbuild.Append("<b> Desired Qualification :</b>");
            strbuild.Append("</br>");
            strbuild.Append("<div> " + DQualification + "  </div>");
            strbuild.Append("</br>");
            strbuild.Append("<b> Comments  :</b>");
            strbuild.Append("</br>");
            strbuild.Append("<div> " + Comments + " </div>");
            strbuild.Append("</br>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }

    #region E-mail Recruiter & Requisition to 1st Approver
    public void send_mailto_Req_Requisition_Approver(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string DesignationName, string Band, string tRemarks, string NoOfPosition, string ccmailid, string strLeaveReqstURL, string applist, string strinertmediaterList)
    { 
        StringBuilder strbuild = new StringBuilder();      
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Emp_Name + " has applied for new requisition as per the details below. Request your approval please.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:95%'>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'><a herf='InboxLeave_Req.aspx' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strLeaveReqstURL + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail Recruiter & Requisition to Next Approvers
    public void send_mailto_Req_Requisition_Next_Approver(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string DesignationName, string Band, string tRemarks, string NoOfPosition, string applist, string strinertmediaterList, string strLeaveReqstURL)
    { 
        StringBuilder strbuild = new StringBuilder();      
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();

            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Emp_Name + " has applied for new requisition as per the details below and is approved by following. Request your approval please.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strLeaveReqstURL + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");

            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail Recruiter & Requisition to Next Approvers for Cancellation Leave
    public void send_mailto_Req_RequisitionNext_Approver_Cancellation(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string DesignationName, string Band, string tRemarks, string NoOfPosition, string applist, string strinertmediaterList, string strLeaveReqstURL)
    { 
        StringBuilder strbuild = new StringBuilder();      
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();

            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Emp_Name + " has applied for cancellation of requisition as per the details below. Request your approval please.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strLeaveReqstURL + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail Recruiter & Requisition to Assign Recruite
    public void send_mailto_Req_Requisition_Assign_Recruite(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string DesignationName, string Band, string tRemarks, string NoOfPosition, string applist, string strinertmediaterList, string strLeaveReqstURL, string JD, string EQualification, string DQualification, string Comments)
    { 
        StringBuilder strbuild = new StringBuilder();
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();

            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Emp_Name + " has applied for new requisition as per the details below and is approved by following. Please start recruitment process.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strLeaveReqstURL + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</br>");
                strbuild.Append(JD);
                strbuild.Append("</br>");
                strbuild.Append("<b>Essential Qualification :</b>");
                strbuild.Append("</br>");
                strbuild.Append("<div>" + EQualification + "  </div>");
                strbuild.Append("</br>");
                strbuild.Append("<b> Desired Qualification :</b>");
                strbuild.Append("</br>");
                strbuild.Append("<div> " + DQualification + "  </div>");
                strbuild.Append("</br>");
                strbuild.Append("<b> Comments  :</b>");
                strbuild.Append("</br>");
                strbuild.Append("<div> " + Comments + " </div>");
                strbuild.Append("</br>");
            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail Recruiter & Requisition to Assign Recruite Cancel
    public void send_mailto_Req_Requisition_Assign_Recruite_cancel(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string DesignationName, string Band, string tRemarks, string NoOfPosition, string applist, string strinertmediaterList, string strLeaveReqstURL)
    { 
        StringBuilder strbuild = new StringBuilder();      
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();

            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Emp_Name + " has applied for cancellation requisition as per the details below and is approved by following. Please stop recruitment process.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'><a href='" + strLeaveReqstURL + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");

            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail of Recruiter & Requisition Approval to Previous level Approvers & Intermediates
    public void send_mailto_Req_Requisition_Next_Approver_Intermediate(string ReqMailID, string toMailIDs, string strsubject, string PositionTitle, string DepartmentName, string DesignationName, string Band, string tRemarks, string NoOfPosition, string AppMailID, string Rej_Remarks, string applist, string Emp_Name, string strinertmediaterList, string strTransferPLdtls)
    { 
        StringBuilder strbuild = new StringBuilder();
        //  string Emp_Name = "";
        string AppEmp_Name = "";
        strsubject = strsubject + " of " + Emp_Name;
        //dt_emp = new DataTable();    
        AppEmp_Name = AppMailID;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>This is to inform you that HR has assigned below said requisition to the recruiter.</td></tr>");
                //strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has Approved the " + "" + " request of " + Emp_Name + " as per the details below.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Position Title :</td><td> " + PositionTitle + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                //strbuild.Append("<tr><td>Designation :</td><td> " + DesignationName + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td colspan=2> " + NoOfPosition + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");

                if (Convert.ToString(strTransferPLdtls).Trim() != "")
                {
                    strbuild.Append("<tr><td style='height:20px'></td></tr>");
                    strbuild.Append(strTransferPLdtls);
                    strbuild.Append("<tr><td style='height:20px'></td></tr>");
                }
                else
                {
                    strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + Rej_Remarks + "</td></tr>");
                }
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("</table>");

            }

            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion
    #region E-mail of Recruiter & Requisition Approval  to Previous level Approvers & Intermediates for Cancellation 
    public void send_mailto_Req_Requisition_Next_Approver_Intermediate_Cancellation(string ReqMailID, string toMailIDs, string strsubject, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string DesignationName, string Band, string tRemarks, string NoOfPosition, string AppMailID, string Rej_Remarks, string applist, string Emp_Name, string strinertmediaterList, string strTransferPLdtls)
    { 
        StringBuilder strbuild = new StringBuilder();
        //  string Emp_Name = "";
        string AppEmp_Name = "";
        strsubject = strsubject + " of " + Emp_Name;
        AppEmp_Name = AppMailID;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has Approved the cancellation request of " + Emp_Name + " as per the details below.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");

                if (Convert.ToString(strTransferPLdtls).Trim() != "")
                {
                    strbuild.Append("<tr><td style='height:20px'></td></tr>");
                    strbuild.Append(strTransferPLdtls);
                    strbuild.Append("<tr><td style='height:20px'></td></tr>");
                }
                else
                {
                    strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + Rej_Remarks + "</td></tr>");
                }
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region E-mail of Recruiter & Requisition Rejection to Previous level Approvers & Intermediates
    public void send_mail_Req_Requisition__Rejection_Correction(string ReqMailID, string ApprMailIDs, string strsubject, string tType, string RequisitionDate, string RequiredByDate, string Location, string PositionTitle, string Module, string DepartmentName, string DesignationName, string Band, string NoOfPosition, string tRemarks, string strcc, string applist, string Emp_Name, string strinertmediaterList)
    { 
        StringBuilder strbuild = new StringBuilder();        
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                if (strsubject.Contains("Rejection"))
                    strbuild.Append("<tr><td> This is to inform you that " + ApprMailIDs + " has <b>Rejected</b> request " + tType + " of " + Emp_Name + " as per the details below. </td></tr>");
                else
                    strbuild.Append("<tr><td> This is to inform you that " + ApprMailIDs + " has sent back the " + tType + " request for correction . </td></tr>");//of " + Emp_Name + " as per the details below.

                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%  'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + tType + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", strcc);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion
    public void send_mailto_Cancel_Intermediate_Req_Requisition(string ReqMailID, string toMailIDs, string strsubject, string tType, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string DesignationName, string Band, string NoOfPosition, string tRemarks, string applist, string Emp_Name, string strinertmediaterList)
    { 
        StringBuilder strbuild = new StringBuilder();      
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Emp_Name + " has <b>Cancelled</b> " + tType + " request as per the details below.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%  'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + tType + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");

                strbuild.Append("<tr><td>Reason for Cancellation :</td><td colspan=2> " + tRemarks + "</td></tr>");
                // Commented by R1 on 01-10-2018
                //strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                //if (Convert.ToString(strinertmediaterList).Trim() != "")
                //    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                // Commented by R1 on 01-10-2018
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);
        }
        catch (Exception ex)
        {

        }
    }

    public void send_mailto_Req_Requisition_Offer_Approver(string Emp_Name, string Recruitername, string ToName, string ReqMailID, string toMailIDs, string strsubject, string Req_Name, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string CandidateName, string Band, string tRemarks, string FinalizedOn, string ccmailid, string strLeaveReqstURL, string applist, string strinertmediaterList, string TotalCTC, string NewCTC, string Exception, string OfferedBand, string ExceptionAmt, string RecruitmentCharges, string ProbableJoiningDate, string OfferPositionTitle, string OfferLocation)
    { 
        StringBuilder strbuild = new StringBuilder();
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td> Dear  " + ToName + ", </td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");

                strbuild.Append("<tr><td> " + Recruitername + " has sent an Offer for Approval for the following candidate. Request your approval please.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:95%'>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Req_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>-------------------------------</td><td>--------------------------------</td><td></td></tr>");
                strbuild.Append("<tr><td>Offer Position :</td><td> " + OfferPositionTitle + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Offer Position Location :</td><td> " + OfferLocation + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Offered Band :</td><td> " + OfferedBand + "</td></tr>");
                strbuild.Append("<tr><td>Candidate Name  :</td><td> " + CandidateName + "</td></tr>");
                strbuild.Append("<tr><td>Finalized On  :</td><td> " + FinalizedOn + "</td></tr>");
                strbuild.Append("<tr><td>Total CTC Offered ( LPA) :</td><td> " + TotalCTC + "</td></tr>");
                strbuild.Append("<tr><td>CTC as per band eligibility & other allowances ( Max Amount) LPA :</td><td> " + NewCTC + "</td></tr>");

                strbuild.Append("<tr><td>Exception Amount in LPA :</td><td> " + ExceptionAmt + "</td></tr>");
                strbuild.Append("<tr><td>Probable Joining Date :</td><td> " + ProbableJoiningDate + "</td></tr>");
                strbuild.Append("<tr><td>Recruitment Charges :</td><td> " + RecruitmentCharges + "</td></tr>");
                strbuild.Append("<tr><td>Is Exception  :</td><td> " + Exception + "</td></tr>");
                strbuild.Append("<tr><td>Recruiter Comments :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strLeaveReqstURL + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }

    public void send_mailto_Req_Requisition_Offer_Approval_Recruite(string Emp_Name, string RecruiterName, string ToName, string ReqMailID, string toMailIDs, string strsubject, string Req_Name, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string CandidateName, string Band, string tRemarks, string FinalizedOn, string applist, string strcc, string TotalCTC, string NewCTC, string Exception, string OfferedBand, string ExceptionAmt, string RecruitmentCharges, string ProbableJoiningDate, string OfferPositionTitle, string OfferLocation)
    { 
        StringBuilder strbuild = new StringBuilder();
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td> Dear  " + RecruiterName + ", </td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + ToName + " has approved the offer for the following Candidate. Please release the offer.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Req_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>-------------------------------</td><td>--------------------------------</td><td></td></tr>");
                strbuild.Append("<tr><td>Offer Position :</td><td> " + OfferPositionTitle + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Offer Position Location :</td><td> " + OfferLocation + "</td></tr>");
                strbuild.Append("<tr><td>Offer Band :</td><td> " + OfferedBand + "</td></tr>");
                strbuild.Append("<tr><td>Candidate Name  :</td><td> " + CandidateName + "</td></tr>");
                strbuild.Append("<tr><td>Finalized On  :</td><td> " + FinalizedOn + "</td></tr>");
                strbuild.Append("<tr><td>Total CTC Offered ( LPA) :</td><td> " + TotalCTC + "</td></tr>");
                strbuild.Append("<tr><td>CTC as per band eligibility & other allowances ( Max Amount) LPA :</td><td> " + NewCTC + "</td></tr>");
                strbuild.Append("<tr><td>Exception Amount in LPA :</td><td> " + ExceptionAmt + "</td></tr>");
                strbuild.Append("<tr><td>Probable Joining Date :</td><td> " + ProbableJoiningDate + "</td></tr>");
                strbuild.Append("<tr><td>Recruitment Charges :</td><td> " + RecruitmentCharges + "</td></tr>");
                strbuild.Append("<tr><td>Is Exception  :</td><td> " + Exception + "</td></tr>");
                strbuild.Append("<tr><td>Approver Comments :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td colspan=2> For your information please.</td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", strcc);
        }
        catch (Exception ex)
        {

        }
    }

    public void send_mail_Req_Offer_Rejection(string ReqMailID, string ApprMailIDs, string strsubject, string tType, string Req_Name, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string CandidateName, string Band, string FinalizedOn, string tRemarks, string strcc, string applist, string Emp_Name, string RecruiterName, string strinertmediaterList, string TotalCTC, string NewCTC, string Exception, string OfferedBand, string ExceptionAmt, string RecruitmentCharges, string ProbableJoiningDate, string OfferPositionTitle)
    { 
        StringBuilder strbuild = new StringBuilder();
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td> Dear  " + RecruiterName + ", </td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + ApprMailIDs + " has <b> rejected </b> the offer for the following Candidate. Please prepare & send another offer for approval.</ td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%  'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular'>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + tType + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Req_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>----------------------------------------</td><td>-----------------------------</td><td></td></tr>");

                strbuild.Append("<tr><td>Offer Position :</td><td> " + OfferPositionTitle + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Offered Band :</td><td> " + OfferedBand + "</td></tr>");
                strbuild.Append("<tr><td>Candidate Name  :</td><td> " + CandidateName + "</td></tr>");
                strbuild.Append("<tr><td>Finalized On  :</td><td> " + FinalizedOn + "</td></tr>");
                strbuild.Append("<tr><td>Total CTC Offered ( LPA) :</td><td> " + TotalCTC + "</td></tr>");
                strbuild.Append("<tr><td>CTC as per band eligibility & other allowances ( Max Amount) LPA :</td><td> " + NewCTC + "</td></tr>");

                strbuild.Append("<tr><td>Exception Amount in LPA :</td><td> " + ExceptionAmt + "</td></tr>");
                strbuild.Append("<tr><td>Probable Joining Date :</td><td> " + ProbableJoiningDate + "</td></tr>");
                strbuild.Append("<tr><td>Recruitment Charges :</td><td> " + RecruitmentCharges + "</td></tr>");
                strbuild.Append("<tr><td>Is Exception  :</td><td> " + Exception + "</td></tr>");
                strbuild.Append("<tr><td>Approver Comments :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", strcc);
        }
        catch (Exception ex)
        {

        }
    }

    public DataTable GetCurrentRec_Offer_ApprID(int Reqid, string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@mode", "check_Current_OfferAppr_Status"),
            new SqlParameter("@Offer_App_ID", Reqid),
            new SqlParameter("@empCode", strempcode)
        };
        return ExecuteDataTable("GetCurrentRec_Offer_ApprID","sp_Offer_Approval_Details", "check_Current_OfferAppr_Status", parameters);
    }
    public DataTable GetCurrentRecruitApprID(int Reqid, string strempcode)
    {
        var parameters = new[]
       {
            new SqlParameter("@stype", "check_CurrentReqAppr_Status"),
            new SqlParameter("@req_id", Reqid),
            new SqlParameter("@emp_code", strempcode)
        };
        return ExecuteDataTable("GetCurrentRecruitApprID","Usp_getRecruitmentEmp_Details_All", "check_CurrentReqAppr_Status", parameters);
    }
    public DataTable GetCurrentRecruit_CancellationID(int Reqid, string strempcode)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "Sp_getCurrentApprID_Cancellation"),
             new SqlParameter("@req_id", Reqid),
             new SqlParameter("@emp_code", strempcode)
        };
        return ExecuteDataTable("GetCurrentRecruit_CancellationID","Usp_getRecruitmentEmp_Details_All", "Sp_getCurrentApprID_Cancellation", parameters);
    }

    //public DataTable GetNextRecruit_ApproverDetails(string empcode, int Reqid,int DeptID)
    //    {
    //        DataTable dstapp = new DataTable();
    //        try
    //        {
    //            scon = new SqlConnection(ConfigurationManager.ConnectionStrings["sqlconnection"].ToString());
    //            if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
    //                scon.Open();
    //            sCommand = new SqlCommand();
    //            sCommand.Connection = scon;
    //            sCommand.CommandText = "Usp_getRecruitmentEmp_Details_All";
    //            sCommand.CommandType = CommandType.StoredProcedure;
    //            new SqlParameter("@stype", "get_NextApproverDetails_mail");
    //            new SqlParameter("@emp_code", empcode);
    //            new SqlParameter("@Req_id", Reqid);
    //			new SqlParameter("@Dept_id", DeptID);
    //			sadp = new SqlDataAdapter();
    //            sadp.SelectCommand = sCommand;
    //            sadp.Fill(dstapp);
    //        }
    //        catch (Exception ex)
    //        {
    //        }
    //        finally
    //        {
    //            scon.Close();
    //        }
    //        return dstapp;

    //    }

    public DataTable GetNextRecruit_ApproverDetails(string empcode, int Reqid, int DeptID, string comp_code, string qtype)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", qtype),
             new SqlParameter("@emp_code", empcode),
             new SqlParameter("@Req_id", Reqid),
             new SqlParameter("@Dept_id", DeptID),
             new SqlParameter("@comp_code", comp_code)
        };
        return ExecuteDataTable("GetNextRecruit_ApproverDetails","Usp_getRecruitmentEmp_Details_All", qtype, parameters);
    }

    //    public DataTable GetNextRecruit_ApproverDetails_Cancelltion(string empcode, int Reqid,int DeptID)
    //    {
    //        DataTable dstapp = new DataTable();
    //        try
    //        {
    //            scon = new SqlConnection(ConfigurationManager.ConnectionStrings["sqlconnection"].ToString());
    //            if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
    //                scon.Open();
    //            sCommand = new SqlCommand();
    //            sCommand.Connection = scon;
    //            sCommand.CommandText = "Usp_getRecruitmentEmp_Details_All";
    //            sCommand.CommandType = CommandType.StoredProcedure;
    //            new SqlParameter("@stype", "get_NextApproverDetails_mail_Cancellation");
    //            new SqlParameter("@emp_code", empcode);
    //            new SqlParameter("@Req_id", Reqid);
    //			new SqlParameter("@Dept_ID", DeptID);
    //			sadp = new SqlDataAdapter();
    //            sadp.SelectCommand = sCommand;
    //            sadp.Fill(dstapp);
    //        }
    //        catch (Exception ex)
    //        {
    //        }
    //        finally
    //        {
    //            scon.Close();
    //        }
    //        return dstapp;
    //}

    public DataTable GetNextRecruit_ApproverDetails_Cancelltion(string empcode, int Reqid, int DeptID)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "get_NextApproverDetails_mail_Cancellation"),
             new SqlParameter("@emp_code", empcode),
             new SqlParameter("@Req_id", Reqid),
             new SqlParameter("@Dept_ID", DeptID)
        };
        return ExecuteDataTable("GetNextRecruit_ApproverDetails_Cancelltion","Usp_getRecruitmentEmp_Details_All", "get_NextApproverDetails_mail_Cancellation", parameters);
    }
    public DataTable GetNextRecruit_IntermediateName(int nxt_apprid, int reqid, string Reqempcode)
    {
        var parameters = new[]
        {
             new SqlParameter("@nextapprid", nxt_apprid),
             new SqlParameter("@req_id", reqid),
             new SqlParameter("@Reqemp_code", Reqempcode)
        };
        return ExecuteDataTable("GetNextRecruit_IntermediateName","SP_GET_Recruit_APPINTERMIDATE","", parameters);
    }
    public DataTable GetPrevious_Recruit_ApproverDetails(string strempcode, int Reqid)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "get_PreviousApproverDetails_mail"),
             new SqlParameter("@emp_code", strempcode),
             new SqlParameter("@req_id", Reqid)
        };
        return ExecuteDataTable("GetPrevious_Recruit_ApproverDetails","Usp_getRecruitmentEmp_Details_All", "get_PreviousApproverDetails_mail", parameters);
    }
    public DataTable GetPrevious_Recruit_ApproverDetails_Cancellation(string strempcode, int Reqid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_PreviousApproverDetails_mail_Cancellation"),
            new SqlParameter("@emp_code", strempcode),
            new SqlParameter("@req_id", Reqid)
        };
        return ExecuteDataTable("GetPrevious_Recruit_ApproverDetails_Cancellation","Usp_getRecruitmentEmp_Details_All", "get_PreviousApproverDetails_mail_Cancellation", parameters);
    }
    public DataTable GetPrevious_Recruit_IntermidaterDetails(int apprid, string strempcode)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "get_PreviousIntermidaterDetails_mail"),
             new SqlParameter("@req_id", apprid),
             new SqlParameter("@emp_code", strempcode)
        };
        return ExecuteDataTable("GetPrevious_Recruit_IntermidaterDetails","Usp_getRecruitmentEmp_Details_All", "get_PreviousIntermidaterDetails_mail", parameters);
    }
    public void Rreject_Requisition_Request(int reqid, string emp_code, int apprid, string comments)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "Requisition_Update_Reject"),
            new SqlParameter("@Emp_Code", emp_code),
            new SqlParameter("@Req_id", reqid),
            new SqlParameter("@apprid", apprid),
            new SqlParameter("@Status_id", 4),
            new SqlParameter("@comments", comments)
         };
        ExecuteNonQuery("Rreject_Requisition_Request","sp_Update_Requisition_Request", "Requisition_Update_Reject", parameters);
    }
    public void Rreject_Requisition_Request_Cancel(int reqid, string emp_code, int apprid, string comments)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "Requisition_Update_Reject_Cancel"),
            new SqlParameter("@Emp_Code", emp_code),
            new SqlParameter("@Req_id", reqid),
            new SqlParameter("@apprid", apprid),
            new SqlParameter("@Status_id", 3),
            new SqlParameter("@comments", comments)
         };
        ExecuteNonQuery("Rreject_Requisition_Request_Cancel","sp_Update_Requisition_Request", "Requisition_Update_Reject_Cancel", parameters);
    }    
    public void Correction_Requisition_Request(int reqid, string emp_code, int apprid, string comments)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "Requisition_Update_Correction"),
            new SqlParameter("@Emp_Code", emp_code),
            new SqlParameter("@Req_id", reqid),
            new SqlParameter("@apprid", apprid),
            new SqlParameter("@Status_id", 5),
            new SqlParameter("@comments", comments)
         };
        ExecuteNonQuery("Correction_Requisition_Request","sp_Update_Requisition_Request", "Requisition_Update_Correction", parameters);
    }
    public void Reject_Req_Offer_Request(int reqid, string emp_code, int apprid, string comments, string strfalgisexception)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", "Offer_Update_Reject"),
            new SqlParameter("@APPR_EMP_CODE", emp_code),
            new SqlParameter("@Offer_App_ID", reqid),
            new SqlParameter("@APPR_ID", apprid),
            new SqlParameter("@Status_id", 4),
            new SqlParameter("@appr_comments", comments),
            new SqlParameter("@OfferCondition", strfalgisexception)
         };
        ExecuteNonQuery("Reject_Req_Offer_Request","SP_Save_Req_Offer_App_Status", "Offer_Update_Reject", parameters);
    }
    public void Update_Requisition_AppRequest(int reqid, string status, string comment, string finalstatus, int apprid)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@QUERYMODE", "UPDATE"),
            new SqlParameter("@REQ_ID", reqid),
            new SqlParameter("@ACTION", status),
            new SqlParameter("@appr_comments", comment),
            new SqlParameter("@APPR_ID", apprid)
        };
        if (Convert.ToString(finalstatus).Trim() != "")
        {
            parameters.Add(new SqlParameter("@finalstatus", finalstatus));
        }
        ExecuteNonQuery("Update_Requisition_AppRequest","SP_SAVE_REQUISITION_APPR_STATUS", "UPDATE", parameters.ToArray());
    }
    public void Update_Requisition_AppRequest_Cancel(int reqid, string status, string comment, string finalstatus, int apprid)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@QUERYMODE", "UPDATE_Cancel"),
            new SqlParameter("@REQ_ID", reqid),
            new SqlParameter("@ACTION", status),
            new SqlParameter("@appr_comments", comment),
            new SqlParameter("@APPR_ID", apprid)
        };
        if (Convert.ToString(finalstatus).Trim() != "")
        {
            parameters.Add(new SqlParameter("@finalstatus", finalstatus));
        }
        ExecuteNonQuery("Update_Requisition_AppRequest_Cancel","SP_SAVE_REQUISITION_APPR_STATUS", "UPDATE_Cancel", parameters.ToArray());
    }
    public DataTable Get_Requisition_IntermediateName(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_ApproverDetails_IntermediateName"),
            new SqlParameter("@emp_code", empcode)
        };
        return ExecuteDataTable("Get_Requisition_IntermediateName", "Usp_getRecruitmentEmp_Details_All", "get_ApproverDetails_IntermediateName", parameters);
    }
    public DataTable Get_Requisition_ApproverDetails_Rejection_cancellation(string empcode, string Reqid, int DeptID, string stype)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@req_id", Reqid),
            new SqlParameter("@Dept_ID", DeptID)
        };
        return ExecuteDataTable("Get_Requisition_ApproverDetails_Rejection_cancellation","Usp_getRecruitmentEmp_Details_All", stype, parameters);        
    }
    public void Cancel_Requisition_Approved_Request(string Reqid, string strreasonCancel, string strapprcode, int iapprid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "Canc_AprLR"),
            new SqlParameter("@Req_id", Reqid),
            new SqlParameter("@Status_id", 3),
            new SqlParameter("@comments", strreasonCancel),
            new SqlParameter("@Emp_Code", strapprcode),
            new SqlParameter("@apprid", iapprid)
        };
         ExecuteNonQuery("Cancel_Requisition_Approved_Request","sp_Update_Requisition_Request", "Canc_AprLR", parameters);
    }
    public void Cancel_Requisition_Request(string Reqid, string strreasonCancel, string strapprcode, int iapprid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "CANCEL"),
            new SqlParameter("@Req_id", Reqid),
            new SqlParameter("@Status_id", 3),
            new SqlParameter("@comments", strreasonCancel),
            new SqlParameter("@Emp_Code", strapprcode),
            new SqlParameter("@apprid", iapprid)
        };
        ExecuteNonQuery("Cancel_Requisition_Request","sp_Update_Requisition_Request", "CANCEL", parameters);
    }
    public DataTable Get_Requisition_EmployeeData(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "Get_EmployeeDetails"),
            new SqlParameter("@EmpCode", empcode)
        };
      return  ExecuteDataTable("Get_Requisition_EmployeeData","SP_GET_REQ_REQUISTIONNO", "Get_EmployeeDetails", parameters);
    }
    public DataTable Get_HRRequisition_Employee(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "Get_HREmployeeDetails"),
            new SqlParameter("@EmpCode", empcode)
        };
        return ExecuteDataTable("Get_HRRequisition_Employee","SP_GET_REQ_REQUISTIONNO", "Get_HREmployeeDetails", parameters);       
    }
    public DataTable Get_HRRequisition_ExtraApprovalEmp(string empcode, int Reqid)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_ExtraApprovalDetails"),
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@req_id", Reqid)
        };
        return ExecuteDataTable("Get_HRRequisition_ExtraApprovalEmp","Usp_getRecruitmentEmp_Details_All", "get_ExtraApprovalDetails", parameters);        
    }
    public DataTable Get_Requisition_EmployeeBand(string empcode, string stype)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@EmpCode", empcode) 
        };
        return ExecuteDataTable("Get_Requisition_EmployeeBand","SP_GET_REQ_REQUISTIONNO", stype, parameters);    
    }
    public DataTable Get_Requisition_EmployeeHOD(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "Get_EmployeeHOD"),
            new SqlParameter("@EmpCode", empcode)
        };
        return ExecuteDataTable("Get_Requisition_EmployeeHOD","SP_GET_REQ_REQUISTIONNO", "Get_EmployeeHOD", parameters);        
    }
    public DataTable Get_Requisition_Status(int empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "Get_Requisition_Status"),
            new SqlParameter("@Recruitment_ReqID", empcode)
        };
        return ExecuteDataTable("Get_Requisition_Status","SP_Recruitment_Requisition_INSERT", "Get_Requisition_Status", parameters);         
    }
    //public DataTable GetRequisition_Offer_Approver_Status(int Offer_App_ID, int Reqid)
    //{
    //	DataTable dstapp = new DataTable();
    //	try
    //	{
    //		scon = new SqlConnection(ConfigurationManager.ConnectionStrings["sqlconnection"].ToString());
    //		if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
    //			scon.Open();
    //		sCommand = new SqlCommand();
    //		sCommand.Connection = scon;
    //		sCommand.CommandText = "GETREQUISITION_OFFER_APPROVER_STATUS";
    //		sCommand.CommandType = CommandType.StoredProcedure;
    //		sCommand.Parameters.AddWithValue("@Stype", "REQUISITIONOFFER");
    //		sCommand.Parameters.AddWithValue("@Offer_App_ID", Offer_App_ID);
    //		sCommand.Parameters.AddWithValue("@REQID", Reqid);
    //		sadp = new SqlDataAdapter();
    //		sadp.SelectCommand = sCommand;

    //		sadp.Fill(dstapp);


    //	}
    //	catch (Exception ex)
    //	{
    //	}
    //       finally
    //       {
    //           scon.Close();
    //       }
    //	return dstapp;

    //}

    public DataTable GetRequisition_Offer_Approver_Status(int Offer_App_ID, int Reqid, string qtype, string comp_code, int dept_Id)
    {
        var parameters = new[]
       {
            new SqlParameter("@Stype", "REQUISITIONOFFER"),
            new SqlParameter("@Offer_App_ID", Offer_App_ID),
            new SqlParameter("@REQID", Reqid),
            new SqlParameter("@comp_code", comp_code),
            new SqlParameter("@Dept_Id", dept_Id),
       };
        return ExecuteDataTable("GetRequisition_Offer_Approver_Status",qtype, "REQUISITIONOFFER", parameters);
    }
    public DataTable GetRequisition_Offer_Approver_History_Status(int Candidate_ID, int Reqid)
    {
        var parameters = new[]
        {
            new SqlParameter("@mode", "OfferApprovalHistory"),
            new SqlParameter("@Candidate_ID", Candidate_ID),
            new SqlParameter("@Recruitment_ReqID", Reqid) 
       };
        return ExecuteDataTable("GetRequisition_Offer_Approver_History_Status","sp_Offer_Approval_Details", "OfferApprovalHistory", parameters);
    }
    //public DataTable GetRequisitionHODApproverStatus(string empcode, string Reqid,int DeptID)
    //    {
    //        DataTable dstapp = new DataTable();
    //        try
    //        {
    //            scon = new SqlConnection(ConfigurationManager.ConnectionStrings["sqlconnection"].ToString());
    //            if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
    //                scon.Open();
    //            sCommand = new SqlCommand();
    //            sCommand.Connection = scon;
    //            sCommand.CommandText = "GETREQUISITIONHODAPPROVERSTATUS";
    //            sCommand.CommandType = CommandType.StoredProcedure;
    //            sCommand.Parameters.AddWithValue("@Stype", "REQUISITIONHOD");
    //            sCommand.Parameters.AddWithValue("@emp_code", empcode);
    //            sCommand.Parameters.AddWithValue("@REQID", Reqid);
    //			sCommand.Parameters.AddWithValue("@Dept_ID", DeptID);
    //			sadp = new SqlDataAdapter();
    //            sadp.SelectCommand = sCommand;

    //            sadp.Fill(dstapp);


    //        }
    //        catch (Exception ex)
    //        {
    //        }
    //        finally
    //        {
    //            scon.Close();
    //        }
    //        return dstapp;

    //    }
    //    public DataTable GetRequisitionHODApproverStatus_Cancel(string empcode, string Reqid,int DeptID)
    //    {
    //        DataTable dstapp = new DataTable();
    //        try
    //        {
    //            scon = new SqlConnection(ConfigurationManager.ConnectionStrings["sqlconnection"].ToString());
    //            if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
    //                scon.Open();
    //            sCommand = new SqlCommand();
    //            sCommand.Connection = scon;
    //            sCommand.CommandText = "GETREQUISITIONHODAPPROVERSTATUS";
    //            sCommand.CommandType = CommandType.StoredProcedure;
    //            sCommand.Parameters.AddWithValue("@Stype", "CANCELREQUISITIONHOD");
    //            sCommand.Parameters.AddWithValue("@emp_code", empcode);
    //            sCommand.Parameters.AddWithValue("@REQID", Reqid);
    //			sCommand.Parameters.AddWithValue("@Dept_ID", DeptID);
    //			sadp = new SqlDataAdapter();
    //            sadp.SelectCommand = sCommand;

    //            sadp.Fill(dstapp);


    //        }
    //        catch (Exception ex)
    //        {
    //        }
    //        finally
    //        {
    //            scon.Close();
    //        }
    //        return dstapp;

    //    }
    public DataTable GetRequisitionHODApproverStatus(string empcode, string Reqid, int DeptID, string comp_code, string qtype)
    {
        var parameters = new[]
       {
            new SqlParameter("@Stype", "REQUISITIONHOD"),
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@REQID", Reqid),
            new SqlParameter("@Dept_ID", DeptID),
            new SqlParameter("@comp_code", comp_code)
        };
        return ExecuteDataTable("GetRequisitionHODApproverStatus",qtype, "REQUISITIONHOD", parameters);         
    }
    public DataTable GetRequisitionHODApproverStatus_Cancel(string empcode, string Reqid, int DeptID, string comp_code, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@Stype", "CANCELREQUISITIONHOD"),
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@REQID", Reqid),
            new SqlParameter("@Dept_ID", DeptID),
            new SqlParameter("@comp_code", comp_code)
        };
        return ExecuteDataTable("GetRequisitionHODApproverStatus_Cancel",qtype, "CANCELREQUISITIONHOD", parameters);
    }
    public DataTable getDeleteMultipleFile(string FileName)
    {
        var parameters = new[]
        {
            new SqlParameter("@mode", "Delete"),
            new SqlParameter("@UploadResume", FileName)
        };
        return ExecuteDataTable("getDeleteMultipleFile","sp_RecCreateCandidate", "Delete", parameters);        
    }
    public DataTable InsertRecCreateCandidate(Recruitment_Candidate_Parameter can)
    {
        var parameters = new[]
        {
            new SqlParameter("@mode", can.Candidate_ID  == 0 ? (object)"INSERT" : (object)"Update"),
            new SqlParameter("@empCode", can.empcode),
            new SqlParameter("@Candidate_ID", can.Candidate_ID),
            new SqlParameter("@Cangender", can.CandidateGender),
            new SqlParameter("@maritalstatus", can.Maritalstatus),
            new SqlParameter("@Canname", can.CandidateName),
            new SqlParameter("@CanBirdayDate", can.CandidateBirthday),
            new SqlParameter("@CanCurrentlocation", can.CurrentLocation),
            new SqlParameter("@CanEmail", can.EmailAddress),
            new SqlParameter("@CanMobile", can.CandidateMobile),
            new SqlParameter("@CanPan", can.CandidatePAN),
            new SqlParameter("@CanExperenceYears", can.CandidateExperience_Years),
            new SqlParameter("@CanCurrentctc", can.CandidateCurrentCTC),
            new SqlParameter("@CanExpectedctc", can.CandidateExpectedCTC),
            new SqlParameter("@CanCvsource", can.CVSource_ID),
            new SqlParameter("@CanmainSkillSet", can.ModuleId),
            new SqlParameter("@canreferby", can.ReferredBy),
            new SqlParameter("@VenderID", can.VenderID),
            new SqlParameter("@JobSitesID", can.JobSitesID),
            new SqlParameter("@OtherName", can.Others),
            new SqlParameter("@Comment", can.Comments),
            new SqlParameter("@educationQalification", can.EducationQualification),
            new SqlParameter("@additionalSkill", can.AdditionalSkillset),
            new SqlParameter("@certification", can.Certifications),
            new SqlParameter("@AdharNo", can.AdharNo),
            new SqlParameter("@RelevantExpYrs", can.RelevantExpYrs),
            new SqlParameter("@UploadResume", can.UploadResume),
            new SqlParameter("@CurrentCTC_Fixed", can.CurrentCTC_Fixed),
            new SqlParameter("@CurrentCTC_Variable", can.CurrentCTC_Variable),
            new SqlParameter("@ExpCTC_Fixed", can.ExpCTC_Fixed),
            new SqlParameter("@ExpCTC_Variable", can.ExpCTC_Variable),
            new SqlParameter("@ExpCTC_Total", can.ExpCTC_Total),
            new SqlParameter("@CurrentlyOnNotice", can.CurrentlyOnNotice),
            new SqlParameter("@NoticePeriod", can.NoticePeriod),
            new SqlParameter("@NativeLocation", can.NativeLocation),
            new SqlParameter("@LocationCurrentCompany", can.LocationCurrentCompany),
            new SqlParameter("@BaseLocationPreferenceID", can.BaseLocationPreferenceID),
            new SqlParameter("@Travelanylocations", can.Travelanylocations),
            new SqlParameter("@TravelPandemicSituation", can.TravelPandemicSituation),
            new SqlParameter("@OpentoTravel", can.OpentoTravel),
            new SqlParameter("@Candidatepayroll", can.Candidatepayroll),
            new SqlParameter("@Candidateanybreakservice", can.Candidateanybreakservice),
            new SqlParameter("@ImplementationProjectsWorkOnID", can.ImplementationProjectsWorkOnID),
            new SqlParameter("@DomainExperienceID", can.DomainExperienceID),
            new SqlParameter("@SAPExperienceID", can.SAPExperienceID),
            new SqlParameter("@TotalSupportProjectID", can.TotalSupportProjectID),
            new SqlParameter("@PhasesImplementationWorkId", can.PhasesImplementationWorkId),
            new SqlParameter("@RoleImplementationProjectID", can.RoleImplementationProjectID),
            new SqlParameter("@TypeProjecthandledID", can.TypeProjecthandledID),
            new SqlParameter("@NatureIndustryClientID", can.NatureIndustryClientID),
            new SqlParameter("@CheckCommunicationSkillID", can.CheckCommunicationSkillID),
            new SqlParameter("@CurrentRoleorganization", can.CurrentRoleorganization),
            new SqlParameter("@RoleDomainCompany", can.RoleDomainCompany),
            new SqlParameter("@Reasonforbreak", can.Reasonforbreak),
            new SqlParameter("@lookingChangeReason", can.lookingChangeReason),
            new SqlParameter("@multiplefilenameadd", can.multiplefilenameadd)
        };
        return ExecuteDataTable("InsertRecCreateCandidate","sp_RecCreateCandidate", "INSERT or Update", parameters);
    }
    public DataSet get_Rec_CandidateList(string strreqCandidate_ID)
    {
        var parameters = new[]
        {
            new SqlParameter("@mode", "SelectCandidate"),
            new SqlParameter("@Candidate_ID", strreqCandidate_ID)
        };
        return ExecuteDataSet("get_Rec_CandidateList","sp_RecCreateCandidate", "SelectCandidate", parameters);    
    }
    public DataTable InsertCandidate_Offer_Approval(string empCode, DateTime OfferDate, int RecJobJoiningID, int Recruitment_ReqID, int Candidate_ID, string Comment, string multiplefilenameadd, decimal Amount1, decimal Amount2, int IsException, string BAND, string RecruitmentCharges, DateTime ProbableJoiningDate)
    {
        var parameters = new[]
        {
            new SqlParameter("@mode", "InsertOfferApproval"),
            new SqlParameter("@empCode", empCode),
            new SqlParameter("@OfferDate", OfferDate),
            new SqlParameter("@Candidate_ID", Candidate_ID),
            new SqlParameter("@RecJobJoiningID", RecJobJoiningID),
            new SqlParameter("@Recruitment_ReqID", Recruitment_ReqID),
            new SqlParameter("@Comment", Comment),
            new SqlParameter("@multiplefilenameadd", multiplefilenameadd),
            new SqlParameter("@Amount1", Amount1),
            new SqlParameter("@Amount2", Amount2),
            new SqlParameter("@IsException", IsException),
            new SqlParameter("@BAND", BAND),
            new SqlParameter("@RecruitmentCharges", RecruitmentCharges),
            new SqlParameter("@ProbableJoiningDate", ProbableJoiningDate),
        };
        return ExecuteDataTable("InsertCandidate_Offer_Approval","sp_Offer_Approval_Details", "InsertOfferApproval", parameters);     
    }
    public DataTable GetIRsheetCount(int CandidateScheduleRound_ID, int Recruitment_ReqID, int Candidate_ID)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "InsertIrSheetCount"),
            new SqlParameter("@Candidate_ID", Candidate_ID),
            new SqlParameter("@CandidateScheduleRound_ID", CandidateScheduleRound_ID),
            new SqlParameter("@Recruitment_ReqID", Recruitment_ReqID)
        };
        return ExecuteDataTable("GetIRsheetCount","SP_Get_Rec_IrSheetDetails", "InsertIrSheetCount", parameters);
    }
    public DataTable GetOffer_Approval_Status(int Recruitment_ReqID, int Candidate_ID)
    {
        var parameters = new[]
        {
            new SqlParameter("@mode", "check_Offer_Cand_Status"),
            new SqlParameter("@Candidate_ID", Candidate_ID),
            new SqlParameter("@Recruitment_ReqID", Recruitment_ReqID) 
        };
        return ExecuteDataTable("GetOffer_Approval_Status","sp_Offer_Approval_Details", "check_Offer_Cand_Status", parameters);
    }

    #endregion
    
    #region RecruitmentModule
    public DataSet Get_Requisition_Detail_Report(string Stype, DateTime FromDate, DateTime ToDate, string Loc_Code, int Department_id, int SkillsetID, int RecStatusID, string Recruiter_Code, int PositionCriticality_ID, string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", Stype),
            new SqlParameter("@FromDate", FromDate),
            new SqlParameter("@ToDate", ToDate),
            new SqlParameter("@comp_code", Loc_Code),
            new SqlParameter("@Department_id", Department_id),
            new SqlParameter("@SkillSetID", SkillsetID),
            new SqlParameter("@RecStatusID", RecStatusID),
            new SqlParameter("@Recruiter_Code", Recruiter_Code),
            new SqlParameter("@PositionCriticality_ID", PositionCriticality_ID),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataSet("Get_Requisition_Detail_Report","SP_Get_Rec_Recruit_Detail_Report", Stype, parameters);
    }
    public DataTable GetRecruitment_RecruitmentStatus()
    {
        var parameters = new[]
        {
          new SqlParameter("@stype", "sp_Req_RecruitmentStatus")
        };
        return ExecuteDataTable("GetRecruitment_RecruitmentStatus","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_RecruitmentStatus", parameters);
    }
    public DataTable GetReq_RequiterChangeList(string Emp_Code, string stype)
    {
        var parameters = new[]
        {
          new SqlParameter("@stype", stype),
          new SqlParameter("@Emp_Code", Emp_Code)
        };
        return ExecuteDataTable("GetReq_RequiterChangeList","SP_Recruitment_Requisition_INSERT", stype, parameters);
    }
    public DataTable GetMainSkillset()
    {
        return ExecuteDataTable("GetMainSkillset","SP_GetMainSkillset","");
    }
    public DataSet GetCVSource()
    { 
        return ExecuteDataSet("GetCVSource","SP_GetCVSource","");
    }
    public DataSet GetInterviewerSchedularsEmpCode()
    {        
        return ExecuteDataSet("GetInterviewerSchedularsEmpCode","SP_GetInterviewerSchedularsEmpCode","");
    }
    public DataSet GetCanInfoRecruitmentwisedataBind()
    {
        return ExecuteDataSet("GetCanInfoRecruitmentwisedataBind","SP_GetCandidateInforeqwisedata","");
    }
    public DataSet getSearchCandidateList(string strreqCandidate_ID)
    {
        var parameters = new[]
        {
         new SqlParameter("@strreqCandidate_ID", strreqCandidate_ID)
        };
        return ExecuteDataSet("getSearchCandidateList","SP_GetSearchCandidateList","", parameters);
    }
    public DataSet getSearchCandidateListSheduleInterview(string strreqCandidate_ID, string RecID)
    {
        var parameters = new[]
        {
             new SqlParameter("@strreqCandidate_ID", strreqCandidate_ID),
             new SqlParameter("@strRecID", RecID)
        };
        return ExecuteDataSet("getSearchCandidateListSheduleInterview","SP_GetSearchCandidateListInterviewShedule","", parameters);
    }
    public DataSet getSearchCandidateListOnButtonSearch(string name, string email, string additionalskill, string mainskillID, string MobileNo)
    {
        var parameters = new[]
        {
            new SqlParameter("@name", name),
            new SqlParameter("@email", email),
            new SqlParameter("@additionalskill", additionalskill),
            new SqlParameter("@mainskillID", mainskillID),
            new SqlParameter("@MobileNo", MobileNo)
        };
        return ExecuteDataSet("getSearchCandidateListOnButtonSearch","SP_GetSearchCandidateListOnbutton","", parameters);
    }
    public DataSet getSearchCandidateListSearchonRecruiterAction(string Recruitment_ReqID, string name, string email, string mainskillID, string educationTypeId)
    {
        var parameters = new[]
        {
            new SqlParameter("@Recruitment_ReqID", Recruitment_ReqID),
            new SqlParameter("@name", name),
            new SqlParameter("@email", email),
            new SqlParameter("@mainskillID", mainskillID),
            new SqlParameter("@educationTypeId", educationTypeId)
        };
        return ExecuteDataSet("getSearchCandidateListSearchonRecruiterAction","SP_GetSearchCandidateListOnRecruiterAction","", parameters);
    }
    public DataSet getRecruterInoxList(string empcode, string ReqrecType)
    {
        var parameters = new[]
        {
            new SqlParameter("@strreqempcode", empcode),
            new SqlParameter("@strreqType", ReqrecType)
        };
        return ExecuteDataSet("getRecruterInoxList","SP_GetRecruterInoxList", ReqrecType, parameters);
    }
    public DataTable GetInterviewer()
    { 
        return ExecuteDataTable("GetInterviewer","SP_GetMainInterviewer1","");
    }
    public DataSet getRecruiterInterviewerCode1(string strRecruitment_ReqID)
    {
        var parameters = new[]
        {
            new SqlParameter("@Recruitment_ReqID", strRecruitment_ReqID)
        };
        return ExecuteDataSet("getRecruiterInterviewerCode1","SP_RecruiterInterviewerCode1","", parameters);
    }
    public DataTable InsertSendForShortlisting(string InterviewerEmpCode, string empCode, string Recruitment_ReqID, string Candidate_ID,string AssignInterviewSchedulars)
    {
        var parameters = new[]
        {
            new SqlParameter("@mode", "INSERT"),
            new SqlParameter("@InterviewerEmpCode", InterviewerEmpCode),
            new SqlParameter("@Recruiter_EmpCode", empCode),
            new SqlParameter("@Recruitment_ReqID", Recruitment_ReqID),
            new SqlParameter("@Candidate_ID", Candidate_ID),
            new SqlParameter("@InterviewerSchedularEmpCode", AssignInterviewSchedulars)
        };
        return ExecuteDataTable("InsertSendForShortlisting","sp_SendForShortlisting", "INSERT", parameters);
    }
    public DataSet getInterviewerInoxList(string empcode, string ReqInterviewerType)
    {
        var parameters = new[]
        {
         new SqlParameter("@strInterviewerempcode", empcode),
         new SqlParameter("@strInterviewerType", ReqInterviewerType)
        };
        return ExecuteDataSet("getInterviewerInoxList","SP_getInterviewerInoxList", ReqInterviewerType, parameters);
    }
    public DataSet Get_RecruEnterviewertypeLogin(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Emp_Code", empcode)
        };
        return ExecuteDataSet("Get_RecruEnterviewertypeLogin","SP_Get_RecruEnterviewertypeLogin","", parameters);
    }    
    public void send_mailto_RecruiterSendShortListingfor_EnterviewerRecruiter(string Emp_Name, string ReqMailID, string toMailIDs, string ccMailIDs, string strsubject, string MultipleCandidateName, string InterviewerRecruiterName, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string DesignationName, string Band, string NoOfPosition, string tRemarks, string LINKURL, string mailcontainoneline)
    { 
        StringBuilder strbuild = new StringBuilder();      
        strsubject = strsubject + "  ";
        try
        {
            strbuild = new StringBuilder(); 
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td> Dear  " + InterviewerRecruiterName + ", </td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Emp_Name + " " + mailcontainoneline + "</td></tr>");
                //strbuild.Append("<tr><td> " + contain + "</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");

                strbuild.Append("<tr><td>Remark :</td><td> " + tRemarks + "</td></tr>");
                if (Convert.ToString(MultipleCandidateName).Trim() != "")
                    strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + LINKURL + "'> Please click here to Shortlist. </a></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccMailIDs);
        }
        catch (Exception ex)
        {

        }
    }
    public void send_mailto_RecruiterSendShortListingfor_EnterviewerRecruiter1(string Emp_Name, string ReqMailID, string toMailIDs, string ccMailIDs, string strsubject, string MultipleCandidateName, string InterviewerRecruiterName, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string DesignationName, string Band, string NoOfPosition, string tRemarks, string LINKURL, string mailcontainoneline, DataTable DT)
    {
        var dtSLA = new DataTable();
        dtSLA = DT;
        StringBuilder strbuild = new StringBuilder();
        strbuild.Length = 0;
        strbuild.Clear();
        if (dtSLA.Rows.Count > 0)
        {
            var count = 1;
            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td> Dear  " + InterviewerRecruiterName + ", </td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td> " + Emp_Name + " " + mailcontainoneline + "</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
            strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
            strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
            strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
            strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
            strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
            strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
            strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
            strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
            strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
            strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("</table>");

            strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS ;font-style:Regular;width:100%;table-layout:fixed;border-collapse: collapse !important;border: 1px solid black;'>");
            strbuild.Append("<tr style='text-align:center !important;height:20px;border: 1px solid black;'><th colspan='4' style='text-align:center !important;height:20px'>Candidate Information </th></tr>");
            strbuild.Append("<tr style='height:20px;border: 1px solid black;'><td width='5% !important'></td><td></td><td></td><td></td></tr>");
            // strbuild.Append("<tr style='text-align:left !important;height:50px;border: 1px solid black;'><th width='5% !important' style='border: 1px solid black;'>Sr.No.</th><th style='border: 1px solid black;'>Candidate Name</th><th style='border: 1px solid black;'>Candidate Email</th><th style='border: 1px solid black;'>Shortlisting Status</th><th style='border: 1px solid black;'>Remarks</th></tr>");
            strbuild.Append("<tr style='text-align:left !important;height:50px;border: 1px solid black;'><th style='border: 1px solid black;'>Candidate Name</th><th style='border: 1px solid black;'>Candidate Email</th><th style='border: 1px solid black;'>Shortlisting Status</th><th style='border: 1px solid black;'>Remarks</th></tr>");

            for (int irow = 0; irow < dtSLA.Rows.Count; irow++)
            {
                strbuild.Append("<tr style='text-align:left !important;border: 1px solid black;'>");
                //strbuild.Append("<td width='5% !important' style='border: 1px solid black;'>" + count + "</td>");
                strbuild.Append("<td style='border: 1px solid black;'>" + Convert.ToString(dtSLA.Rows[irow]["CandidateName"]).Trim() + "</td>");
                strbuild.Append("<td style='border: 1px solid black;'>" + Convert.ToString(dtSLA.Rows[irow]["CandidateEmail"]).Trim() + "</td>");
                strbuild.Append("<td style='border: 1px solid black;'>" + Convert.ToString(dtSLA.Rows[irow]["ShortlistingStatus"]).Trim() + "</td>");
                strbuild.Append("<td style='border: 1px solid black;'>" + Convert.ToString(dtSLA.Rows[irow]["Remarks"]).Trim() + "</td>");

                strbuild.Append("</tr>");
                count++;
            }
            strbuild.Append("</table>");

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + LINKURL + "'> Please click here to Shortlist. </a></td></tr>");
            strbuild.Append("</table>");

        }
        sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccMailIDs);
    }
    public void send_mailto_ScheduleInterviewAndNxtroundShedule(string Emp_Name, string ReqMailID, string toMailIDs, string ccMailIDs, string strsubject, string interviewername, string name, string InterviewRound, string interviewdate, string interviewtime, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string Band, string NoOfPosition, string LINKURL, string mailcontainoneline)
    { 
        StringBuilder strbuild = new StringBuilder();      
        strsubject = strsubject + "  ";
        try
        {
            strbuild = new StringBuilder();
            string contain = "Below Candidate names are Shortlilsted Please schedule the Interview";
            if (loginUserid == "1")
            {

                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td> Dear  " + interviewername + ", </td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + mailcontainoneline + "</ td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
                strbuild.Append("<tr><td>--------------------------</td><td>--------------------------</td><td></td></tr>");
                //strbuild.Append("<tr><td> Candidate Name :</td><td> " + MultipleCandidateName + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Candidate name :</td><td> " + name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Interview Round :</td><td colspan=2> " + InterviewRound + "</td></tr>");
                strbuild.Append("<tr><td>Interview Date :</td><td> " + interviewdate.Replace("/", "-") + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Interview Time  :</td><td> " + interviewtime + "</td><td></td></tr>");


                if (Convert.ToString(name).Trim() != "")
                    //  strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + MultipleCandidateName + "</td></tr>");
                    strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + LINKURL + "'> Please click here to submit Interview Feedback. </a></td></tr>");
                strbuild.Append("</table>");

            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccMailIDs);
        }
        catch (Exception ex)
        {

        }
    }

    public void send_mailto_ScheduleInterviewAndNxtroundShedulebackout(string Emp_Name, string ReqMailID, string toMailIDs, string ccMailIDs, string strsubject, string interviewername, string name, string InterviewRound, string interviewdate, string interviewtime, string LINKURL, string mailcontainoneline, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string Band, string NoOfPosition)
    { 
        StringBuilder strbuild = new StringBuilder();
       
        strsubject = strsubject + "  ";
        try
        {
            strbuild = new StringBuilder();
            string contain = "Below Candidate names are Shortlilsted Please schedule the Interview";
            if (loginUserid == "1")
            {

                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td> Dear  " + interviewername + ", </td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + mailcontainoneline + "</ td></tr>");
                //strbuild.Append("<tr><td> " + contain + "</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");

                //strbuild.Append("<tr><td> Candidate Name :</td><td> " + MultipleCandidateName + "</td><td></td></tr>");
                //strbuild.Append("<tr><td>Candidate name :</td><td> " + name + "</td><td></td></tr>");
                //strbuild.Append("<tr><td>Interview Round :</td><td colspan=2> " + InterviewRound + "</td></tr>");
                //strbuild.Append("<tr><td>Interview Date :</td><td> " + interviewdate + "</td><td></td></tr>");
                //strbuild.Append("<tr><td>Interview Time  :</td><td> " + interviewtime + "</td><td></td></tr>");
                // strbuild.Append("<tr><td>Interviewer Remarks :</td><td> " + tRemarks + "</td></tr>");

                if (Convert.ToString(name).Trim() != "")
                    //  strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + MultipleCandidateName + "</td></tr>");
                    strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'><a href='" + LINKURL + "'> Please click here to submit Interview Feedback. </a></td></tr>");
                strbuild.Append("</table>");

            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccMailIDs);

        }
        catch (Exception ex)
        {

        }
    }

    public void send_mailto_FeedbackAllStatus(string Emp_Name, string ReqMailID, string toMailIDs, string ccMailIDs, string strsubject, string RecruiterName, string name, string InterviewRound, string interviewStatus, string interviewFeedback, string tRemarks, string LINKURL, string mailcontainoneline, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string Band, string NoOfPosition)
    { 
        StringBuilder strbuild = new StringBuilder();
         strsubject = strsubject + "  ";
        try
        {
            strbuild = new StringBuilder();
            string contain = "Below Candidate names are Shortlilsted Please schedule the Interview";
            if (loginUserid == "1")
            {

                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td> Dear  " + RecruiterName + ", </td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + mailcontainoneline + "</ td></tr>");
                //strbuild.Append("<tr><td> " + contain + "</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
                strbuild.Append("<tr><td>------------------------------</td><td>------------------------------</td><td></td></tr>");
                //strbuild.Append("<tr><td> Candidate Name :</td><td> " + MultipleCandidateName + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Candidate name :</td><td> " + name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Interview Round :</td><td colspan=2> " + InterviewRound + "</td></tr>");
                strbuild.Append("<tr><td>Interview Status :</td><td> " + interviewStatus + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Interview FeedBack :</td><td> " + interviewFeedback + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Interviewer Remarks :</td><td> " + tRemarks + "</td></tr>");

                if (Convert.ToString(RecruiterName).Trim() != "")
                    //  strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + MultipleCandidateName + "</td></tr>");
                    strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + LINKURL + "'> Please click here to submit Hiring Progress. </a></td></tr>");
                strbuild.Append("</table>");

            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccMailIDs);
        }
        catch (Exception ex)
        {

        }
    }

    public void send_mailto_InterviewFeedbackAllStatus(string Emp_Name, string ReqMailID, string toMailIDs, string ccMailIDs, string strsubject, string RecruiterName, string name, string InterviewRound, string interviewStatus, string interviewFeedback, string tRemarks, string LINKURL, string mailcontainoneline, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string Band, string NoOfPosition, string Interviewername)
    { 
        StringBuilder strbuild = new StringBuilder();
       
        strsubject = strsubject + "  ";
        try
        {
            strbuild = new StringBuilder();
            string contain = "Below Candidate names are Shortlilsted Please schedule the Interview";
            if (loginUserid == "1")
            {

                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td> Dear  " + RecruiterName + ", </td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + mailcontainoneline + "</ td></tr>");
                //strbuild.Append("<tr><td> " + contain + "</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
                strbuild.Append("<tr><td>------------------------------</td><td>------------------------------</td><td></td></tr>");
                //strbuild.Append("<tr><td> Candidate Name :</td><td> " + MultipleCandidateName + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Candidate Name :</td><td> " + name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Interviewer Name :</td><td colspan=2> " + Interviewername + "</td></tr>");
                strbuild.Append("<tr><td>Interview Round :</td><td colspan=2> " + InterviewRound + "</td></tr>");
                strbuild.Append("<tr><td>Interview Status :</td><td> " + interviewStatus + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Interview FeedBack :</td><td> " + interviewFeedback + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Interviewer Remarks :</td><td> " + tRemarks + "</td></tr>");

                if (Convert.ToString(RecruiterName).Trim() != "")
                    //  strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + MultipleCandidateName + "</td></tr>");
                    strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + LINKURL + "'> Please click here to submit Hiring Progress. </a></td></tr>");
                strbuild.Append("</table>");

            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccMailIDs);

        }
        catch (Exception ex)
        {

        }
    }

    public void send_mailto_FeedbackStatusBackoutIninerschedular(string Emp_Name, string ReqMailID, string toMailIDs, string ccMailIDs, string strsubject, string RecruiterName, string name, string InterviewRound, string interviewStatus, string interviewFeedback, string tRemarks, string LINKURL, string mailcontainoneline, string oneReccontain, string mailrecuitername)
    { 
        StringBuilder strbuild = new StringBuilder();
         strsubject = strsubject + "  ";
        try
        {
            strbuild = new StringBuilder();
            string contain = "Below Candidate names are Shortlilsted Please schedule the Interview";
            if (loginUserid == "1")
            {

                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td> Dear  " + RecruiterName + ", </td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + mailcontainoneline + "</ td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + mailrecuitername + "</td></tr>");
                strbuild.Append("<tr><td> " + oneReccontain + "</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                //strbuild.Append("<tr><td> Candidate Name :</td><td> " + MultipleCandidateName + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Candidate name :</td><td> " + name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Interview Round :</td><td colspan=2> " + InterviewRound + "</td></tr>");
                strbuild.Append("<tr><td>Interview Status :</td><td> " + interviewStatus + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Interview FeedBack :</td><td> " + interviewFeedback + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Interviewer Remarks :</td><td> " + tRemarks + "</td></tr>");

                if (Convert.ToString(RecruiterName).Trim() != "")
                    //  strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + MultipleCandidateName + "</td></tr>");
                    strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + LINKURL + "'> Please click here to submit Hiring Progress. </a></td></tr>");
                strbuild.Append("</table>");

            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccMailIDs);
        }
        catch (Exception ex)
        {

        }
    }

    public void send_mailto_RecruiterAllStatusJoining(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string name, string JoiningDate, string JoiningStatus, string remark, string mailContainoneline, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string Band, string NoOfPosition, string RecruiterName)
    { 
        StringBuilder strbuild = new StringBuilder();
        strsubject = strsubject + "  ";
        try
        {
            strbuild = new StringBuilder();
            string contain = "Below Candidate names are Shortlilsted Please schedule the Interview";
            if (loginUserid == "1")
            {

                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                //  strbuild.Append("<tr><td> Dear  " + RecruiterName + ", </td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>" + mailContainoneline + "</ td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill Set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
                strbuild.Append("<tr><td>----------------------------------</td><td>------------------------------</td><td></td></tr>");
                strbuild.Append("<tr><td>Candidate name :</td><td> " + name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Recruiter name :</td><td> " + RecruiterName + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Date :</td><td colspan=2> " + JoiningDate.Replace("/", "-") + "</td></tr>");
                strbuild.Append("<tr><td> Status :</td><td> " + JoiningStatus + "</td></tr>");
                strbuild.Append("<tr><td>Remark :</td><td> " + remark + "</td><td></td></tr>");

                if (Convert.ToString(name).Trim() != "")
                    //  strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + MultipleCandidateName + "</td></tr>");
                    strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //  strbuild.Append("<tr><td style='height:20px'><a href='" + LINKURL + "'> Please click here to submit Hiring Progress. </a></td></tr>");
                strbuild.Append("</table>");

            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }

    public void send_mailto_RecruiterChanged(string Emp_Name, string ReqMailID, string toMailIDs, string ccMailIDs, string strsubject, string NewRecruitername, string Oldrecruitername, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module,string PositionTitle, string DepartmentName, string Band, string NoOfPosition)
    { 
        StringBuilder strbuild = new StringBuilder();
         strsubject = strsubject + "  ";
        try
        {
            strbuild = new StringBuilder();
            string contain = "Below Candidate names are Shortlilsted Please schedule the Interview";
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>Following Recruiter change information. Please refer to the details below.</ td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
                strbuild.Append("<tr><td>--------------------------------</td><td>--------------------------------</td><td></td></tr>");
                strbuild.Append("<tr><td>Old Recruiter Name :</td><td> " + Oldrecruitername + "</td><td></td></tr>");
                strbuild.Append("<tr><td>New Recruiter Name :</td><td colspan=2> " + NewRecruitername + "</td></tr>");
                if (Convert.ToString(Emp_Name).Trim() != "")
                    //  strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + MultipleCandidateName + "</td></tr>");
                    strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //  strbuild.Append("<tr><td style='height:20px'><a href='" + LINKURL + "'> Please click here to submit Hiring Progress. </a></td></tr>");
                strbuild.Append("</table>");

            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccMailIDs);

        }
        catch (Exception ex)
        {

        }
    }

    public void send_mailto_InterviewSchedulerChanged(string Emp_Name, string ReqMailID, string toMailIDs, string ccMailIDs, string strsubject, string NewInterviewSchedulername, string OldInterviewSchedulername, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module,string PositionTitle, string DepartmentName, string Band, string NoOfPosition)
    { 
        StringBuilder strbuild = new StringBuilder();
        strsubject = strsubject + "  ";
        try
        {
            strbuild = new StringBuilder();
            string contain = "Below Candidate names are Shortlilsted Please schedule the Interview";
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>Following Interviewer Schedular change information. Please refer to the details below.</ td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
                strbuild.Append("<tr><td>--------------------------------</td><td>--------------------------------</td><td></td></tr>");

                strbuild.Append("<tr><td>Old Interviewer Schedular Name :</td><td> " + OldInterviewSchedulername + "</td><td></td></tr>");
                strbuild.Append("<tr><td>New Interviewer Schedular Name :</td><td colspan=2> " + NewInterviewSchedulername + "</td></tr>");

                if (Convert.ToString(Emp_Name).Trim() != "")
                    //  strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + MultipleCandidateName + "</td></tr>");
                    strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //  strbuild.Append("<tr><td style='height:20px'><a href='" + LINKURL + "'> Please click here to submit Hiring Progress. </a></td></tr>");
                strbuild.Append("</table>");

            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccMailIDs);

        }
        catch (Exception ex)
        {

        }
    }
    public void send_mailto_closerequisition_Mail(string ReqMailID, string toMailIDs, string strsubject, string mailContainoneline, string empname, string empcode, string department, string Location, string Designation, string Band, string Req_Name, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Locations, string Module,string PositionTitle, string DepartmentName, string Bands, string NoOfPosition, string Recruitername)
    { 
        StringBuilder strbuild = new StringBuilder();
         strsubject = strsubject + "  ";
        try
        {
            strbuild = new StringBuilder();
            string contain = "";
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>" + mailContainoneline + "</ td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");

                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Req_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Locations + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Bands + "</td><td></td></tr>");
                //strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
                strbuild.Append("<tr><td>--------------------------------</td><td>--------------------------------</td><td></td></tr>");

                strbuild.Append("<tr><td>Name of the Employee :</td><td> " + empname + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Employee code :</td><td colspan=2> " + empcode + "</td></tr>");
                strbuild.Append("<tr><td>Recruiter name :</td><td> " + Recruitername + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td> " + department + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Location :</td><td> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Designation :</td><td> " + Designation + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");

                if (Convert.ToString(empname).Trim() != "")
                    //  strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + MultipleCandidateName + "</td></tr>");
                    strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //  strbuild.Append("<tr><td style='height:20px'><a href='" + LINKURL + "'> Please click here to submit Hiring Progress. </a></td></tr>");
                strbuild.Append("</table>");

            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }
    public DataTable GetRec_Req_Location_Prosepect()
    {
        var parameters = new[]
        {
        new SqlParameter("@stype", "sp_Req_company_Location__Prosepect")
        };
        return ExecuteDataTable("GetRec_Req_Location_Prosepect","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_company_Location__Prosepect", parameters);
    }
    public DataTable Insert_Req_Prosepect_Cust_Details(string Stype, int Prosepect_Cust_ID, string Prosepect_Cust_Name, string IsActive, string EmpCode)
    {
        var parameters = new[]
        {
           new SqlParameter("@stype", Stype),
           new SqlParameter("@Prosepect_Cust_Name", Prosepect_Cust_Name),
           new SqlParameter("@Prosepect_Cust_ID", Prosepect_Cust_ID),
           new SqlParameter("@IsActive", IsActive),
           new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("Insert_Req_Prosepect_Cust_Details","SP_Rec_ProsepectCust_Details", Stype, parameters);
    }
    public void send_mailto_TransferredRequisitionNo(string Emp_Name, string ReqMailID, string toMailIDs, string ccMailIDs, string strsubject, string RecruiterName, string name, string CurrentRecno, string TransferredRecNo, string mailcontainoneline, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string Band, string NoOfPosition, string StrNewRecDepartment_Name, string StrNewReccompany_name, string StrNewRecModuleDesc, string StrNewRecBAND, string StrNewRecPositionTitle)
    { 
        StringBuilder strbuild = new StringBuilder();
         strsubject = strsubject + "  ";
        try
        {
            strbuild = new StringBuilder();
            string contain = "Below Candidate names are Shortlilsted Please schedule the Interview";
            if (loginUserid == "1")
            {

                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td> Dear  " + RecruiterName + ", </td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + mailcontainoneline + "</ td></tr>");
                //strbuild.Append("<tr><td> " + contain + "</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
                strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
                strbuild.Append("<tr><td>Skill set :</td><td > " + Module + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
                strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
                strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
                strbuild.Append("<tr><td>------------------------------</td><td>------------------------------</td><td></td></tr>");
                //strbuild.Append("<tr><td> Candidate Name :</td><td> " + MultipleCandidateName + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Candidate name :</td><td> " + name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Current Requisition No :</td><td colspan=2> " + CurrentRecno + "</td></tr>");
                strbuild.Append("<tr><td>Transferred Requisition No :</td><td> " + TransferredRecNo + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Transferred Department :</td><td> " + StrNewRecDepartment_Name + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Transferred Location :</td><td> " + StrNewReccompany_name + "</td></tr>");
                strbuild.Append("<tr><td>Transferred Skill set :</td><td> " + StrNewRecModuleDesc + "</td><td></td></tr>");
                strbuild.Append("<tr><td>Transferred Position Title :</td><td> " + StrNewRecBAND + "</td></tr>");
                strbuild.Append("<tr><td>Transferred Band :</td><td> " + StrNewRecPositionTitle + "</td></tr>");

                if (Convert.ToString(RecruiterName).Trim() != "")
                    //  strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + MultipleCandidateName + "</td></tr>");
                    strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                // strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //  strbuild.Append("<tr><td style='height:20px'><a href='" + LINKURL + "'> Please click here to submit Hiring Progress. </a></td></tr>");
                strbuild.Append("</table>");

            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccMailIDs);
        }
        catch (Exception ex)
        {

        }
    }

    #endregion
    
    #region Cust Escalation Section
    //Create Method 04-10-2021 Bharat Mainkar
    public object InsertCustEscalationDetails(string emp_code, string ServicesDescripation, string qtype, string FilePath, string AssignedTo, string Is_Escalated, string ServiceDepartment, int Status, int ActionStatus, string Actionby, string Escalation_Type, int idCategory, int idRolePerson, int idCustSatisfaction, int idSeverity, int IDImpactProject, string EmailID, string EscalationRaisedBy)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@ServicesDescripation", ServicesDescripation),
            new SqlParameter("@FilePath", FilePath),
            new SqlParameter("@AssignedTo", AssignedTo),
            new SqlParameter("@Is_Escalated", Is_Escalated),
            new SqlParameter("@ServiceDepartment", ServiceDepartment),
            new SqlParameter("@Status", Status),
            new SqlParameter("@ActionStatus", ActionStatus),
            new SqlParameter("@ActionBy", Actionby),
            new SqlParameter("@Escalation_Type", Escalation_Type),
            new SqlParameter("@CategoryId", idCategory),
            new SqlParameter("@RolePersonId", idRolePerson),
            new SqlParameter("@CustSatisfactionId", idCustSatisfaction),
            new SqlParameter("@SeverityId", idSeverity),
            new SqlParameter("@ImpactProjectId", IDImpactProject),
            new SqlParameter("@EscalationRaisedBy", EscalationRaisedBy),
            new SqlParameter("@EmailID", EmailID)
        };
        return ExecuteScalar("InsertCustEscalationDetails","SP_INSERTCUST_ESCALATION", qtype, parameters);
    }
    public DataTable GetCustEscalationSPOCData(string id)
    {
        var parameters = new[]
        {
           new SqlParameter("@qtype", "GETSPOCDETAIL"),
           new SqlParameter("@ServiceDepartment", id)
        };
        return ExecuteDataTable("GetCustEscalationSPOCData","SP_INSERTCUST_ESCALATION", "GETSPOCDETAIL", parameters);
    }
    public DataTable GetCustEscalationSPOCInbox(string empCode)
    {
        var parameters = new[]
        {
           new SqlParameter("@qtype", "GETEMPSERVICELIST"),
           new SqlParameter("@emp_code", empCode)
        };
        return ExecuteDataTable("GetCustEscalationSPOCInbox","SP_INSERTCUST_ESCALATION", "GETEMPSERVICELIST", parameters);
    }
    public DataTable GetCustEscalationMyInbox(string empCode)
    {
        var parameters = new[]
        {
           new SqlParameter("@qtype", "GETMYSERVICELIST"),
           new SqlParameter("@emp_code", empCode)
        };
        return ExecuteDataTable("GetCustEscalationMyInbox","SP_INSERTCUST_ESCALATION", "GETMYSERVICELIST", parameters);
    }
    public DataTable GetCustEscalationDepartment(string QueryMode)
    {
        var parameters = new[]
        {
           new SqlParameter("@qtype", QueryMode)
        };
        return ExecuteDataTable("GetCustEscalationDepartment","SP_INSERTCUST_ESCALATION", QueryMode, parameters);
    }
    public DataSet getCustEscalationDetail(int id, string empCode)
    {
        var parameters = new[]
        {
           new SqlParameter("@emp_code", empCode),
           new SqlParameter("@id", id),
           new SqlParameter("@qtype", "GETApprovelPageDetail")
        };
        return ExecuteDataSet("getCustEscalationDetail","SP_INSERTCUST_ESCALATION", "GETApprovelPageDetail", parameters);
    }
    public DataTable GetCustEscalationEmpDepartment(string ServiceDepartment)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETDDLFORSERVICECREATE"),
            new SqlParameter("@ServiceDepartment", ServiceDepartment)
        };
        return ExecuteDataTable("GetCustEscalationEmpDepartment","SP_INSERTCUST_ESCALATION", "GETDDLFORSERVICECREATE", parameters);
    }
    public void AssgineCustEscalationDetails(string emp_code, string ServicesDescripation, string qtype, string FilePath, string AssignedTo, string Is_Escalated, string ServiceDepartment, int Status, int ActionStatus, string Actionby, char Escalation_Type, int id, int CategoryId)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", id),
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@ServicesDescripation", ServicesDescripation),
            new SqlParameter("@FilePath", FilePath),
            new SqlParameter("@AssignedTo", AssignedTo),
            new SqlParameter("@Is_Escalated", Is_Escalated),
            new SqlParameter("@ServiceDepartment", ServiceDepartment),
            new SqlParameter("@Status", Status),
            new SqlParameter("@ActionStatus", ActionStatus),
            new SqlParameter("@ActionBy", Actionby),
            new SqlParameter("@Escalation_Type", Escalation_Type),
            new SqlParameter("@CategoryId", CategoryId)
        };
        ExecuteNonQuery("AssgineCustEscalationDetails","SP_INSERTCUST_ESCALATION", qtype, parameters);
    }

    public void ResponceCustEscalationDetails(string emp_code, string ServicesDescripation, string qtype, string FilePath, string AssignedTo, string Is_Escalated, string ServiceDepartment, int Status, int ActionStatus, string Actionby, char Escalation_Type, int id, int CategoryId, string ResponseDate, string StartDate)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", id),
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@ServicesDescripation", ServicesDescripation),
            new SqlParameter("@FilePath", FilePath),
            new SqlParameter("@AssignedTo", AssignedTo),
            new SqlParameter("@Is_Escalated", Is_Escalated),
            new SqlParameter("@ServiceDepartment", ServiceDepartment),
            new SqlParameter("@Status", Status),
            new SqlParameter("@ActionStatus", ActionStatus),
            new SqlParameter("@ActionBy", Actionby),
            new SqlParameter("@Escalation_Type", Escalation_Type),
            new SqlParameter("@CategoryId", CategoryId),
            new SqlParameter("@fromDate", ResponseDate),
            new SqlParameter("@toDate", StartDate)
        };
        ExecuteNonQuery("ResponceCustEscalationDetails","SP_INSERTCUST_ESCALATION", qtype,parameters);
    }

    public void ActionCustEscalationDetails(string emp_code, int Cust_ActionID, int ServicesID, string qtype, string ActionTitle, string Remarks, string ResponseDate, string Completed, string TaskCompletedDate)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Cust_ActionID", Cust_ActionID),
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@ServicesID", ServicesID),
            new SqlParameter("@ActionTitle", ActionTitle),
            new SqlParameter("@Remarks", Remarks),
            new SqlParameter("@ActionDate", ResponseDate),
            new SqlParameter("@Completed", Completed),
            new SqlParameter("@TaskCompletedDate", TaskCompletedDate)
        };
        ExecuteNonQuery("ActionCustEscalationDetails","SP_Cust_Escalation_Actions", qtype, parameters);
    }
    public DataTable GetCustEscalation_ActionDeatils(string Qtype, int @ServicesID)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", Qtype),
            new SqlParameter("@ServicesID", ServicesID)
        };
        return ExecuteDataTable("GetCustEscalation_ActionDeatils","SP_Cust_Escalation_Actions", Qtype, parameters);
    }
    public DataTable GETCustEscalationSPOCEXISTS(string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETSPOCDETAILS"),
            new SqlParameter("@emp_code", empCode)
        };
        return ExecuteDataTable("GETCustEscalationSPOCEXISTS","SP_INSERTCUST_ESCALATION", "GETSPOCDETAILS", parameters);
    }
    public DataTable GETCustEscalationHISTORYBYID(int id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETSERVICEHISTORY"),
            new SqlParameter("@id", id)
        };
        return ExecuteDataTable("GETCustEscalationHISTORYBYID","SP_INSERTCUST_ESCALATION", "GETSERVICEHISTORY", parameters);
    }
    public DataTable GetCustEscalationDEPARTMENTHOD(int id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETDEPTHOD"),
            new SqlParameter("@id", id)
        };
        return ExecuteDataTable("GetCustEscalationDEPARTMENTHOD","SP_INSERTCUST_ESCALATION", "GETDEPTHOD", parameters);
    }
    public DataTable GetCustEscalation_EmployeeeTo(string Qtype, int id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", Qtype),
            new SqlParameter("@id", id)
        };
        return ExecuteDataTable("GetCustEscalation_EmployeeeTo","SP_INSERTCUST_ESCALATION", Qtype, parameters);
    }
    public DataTable GetCustEscalationCEOEmpCode()
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETCEO")
        };
        return ExecuteDataTable("GetCustEscalationCEOEmpCode","SP_INSERTCUST_ESCALATION", "GETCEO", parameters);    }
    public DataTable GetCustEscalation_CCMail_Deatils(string Qtype, int @id, string Emp_Code)
    {
        var parameters = new[]
        {
             new SqlParameter("@qtype", Qtype),
             new SqlParameter("@id", id),
             new SqlParameter("@emp_code", Emp_Code)
        };
        return ExecuteDataTable("GetCustEscalation_CCMail_Deatils","SP_INSERTCUST_ESCALATION", Qtype, parameters);
    }
    public void CustEscalation_send_mailto_SPOC(string serviceRequestno, string toMailIDs, string employeeName, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription, string EscalationBy, string MailID, string Mode, string CustSatisfaction, string Severity, string RolePerson)
    { 
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "Customer First Incident " + serviceRequestno + " for “" + department + "” is created, your action is required";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px;'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            strbuild.Append("<tr><td> This is to inform you that " + employeeName + " has created new customer incident with following details.Please take appropriate action</td></tr>");
            strbuild.Append("<tr><td style='height:20px;'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80% !important;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Customer First Incident No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created By : </td><td width='75%'>" + employeeName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Project Name :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Escalation Raised by  :</td><td width='75%'>" + EscalationBy + "</td></tr>");
            if (MailID != "")
            {
                strbuild.Append("<tr><td width='25%'>Email ID :</td><td width='75%'>" + MailID + "</td></tr>");
            }
            strbuild.Append("<tr><td width='25%'>Mode :</td><td width='75%'>" + Mode + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer Satisfaction Index  :</td><td width='75%'>" + CustSatisfaction + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Severity :</td><td width='75%'>" + Severity + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Role of the Person :</td><td width='75%'>" + RolePerson + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Incident Description :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'>Please click here to take action on Customer First Incident</a></td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailCustEscalation(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void CustEscalation_send_mailto_AssignedAgent(int isEscalated, string serviceRequestno, string toMailIDs, string employeeName, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription, string EscalationBy, string MailID, string Mode, string CustSatisfaction, string Severity, string RolePerson, string IncidentDescription)
    { 
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "";
        if (isEscalated == 1)
        {
            strsubject = "Customer First Incident " + serviceRequestno + " for “" + department + "” is assigned to you, your action is required ";
        }
        else
        {
            strsubject = "Customer First Incident " + serviceRequestno + " for “" + department + "” is assigned to you, your action is required";
        }

        try
        {
            strbuild = new StringBuilder();
            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            if (isEscalated == 1)
            {
                strbuild.Append("<tr><td> This is to inform you that escalated Customer Incident of " + employeeName + " with following details is assigned to you. Please take appropriate action</td></tr>");

            }
            else
            {
                strbuild.Append("<tr><td> This is to inform you that " + employeeName + " has created  Customer Incident with following details.Please take appropriate action</td></tr>");

            }
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Customer First Incident No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created By : </td><td width='75%'>" + employeeName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'> Project Name :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Escalation Raised by  :</td><td width='75%'>" + EscalationBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Email ID :</td><td width='75%'>" + MailID + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Mode :</td><td width='75%'>" + Mode + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer Satisfaction Index  :</td><td width='75%'>" + CustSatisfaction + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Severity :</td><td width='75%'>" + Severity + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Role of the Person :</td><td width='75%'>" + RolePerson + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Incident Description :</td><td width='75%' style='text-align:left !important;'>" + IncidentDescription + "</td></tr>");

            if (isEscalated == 1)
            {
                strbuild.Append("<tr><td width='25%'>Coordinator Comments:</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td width='25%'>Coordinator Comments :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");

            }
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'>Please click here to take action on Customer First Incident</a></td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailCustEscalation(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }

    public void CustEscalation_send_mailto_AssignToEmployee(int IsExceletd, string CreatedName, string serviceRequestno, string toMailIDs, string actionName, string actionBy, string assgineTo, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription, string EscalationBy, string MailID, string Mode, string CustSatisfaction, string Severity, string RolePerson, string IncidentDescription)
    { 
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "";
        if (IsExceletd == 0)
        {
            strsubject = "Action update on your Customer First Incident " + serviceRequestno + " for “" + department + "”";
        }
        else
        {
            strsubject = "Action update on your escalated Customer First Incident " + serviceRequestno + " for “" + department + "”";
        }

        //var strsubject = "Action update on your Service Request "+ serviceRequestno + "";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            strbuild.Append("<tr><td>This is to inform you that your Customer Incident " + serviceRequestno + " is assigned as per following  details .</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Action Taken : </td><td width='75%'>" + actionName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken By : </td><td width='75%'>" + actionBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Assigned To : </td><td width='75%'>" + assgineTo + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer First Incident No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created By : </td><td width='75%'>" + CreatedName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Project Name :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Escalation Raised by  :</td><td width='75%'>" + EscalationBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Email ID :</td><td width='75%'>" + MailID + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Mode :</td><td width='75%'>" + Mode + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer Satisfaction Index  :</td><td width='75%'>" + CustSatisfaction + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Severity :</td><td width='75%'>" + Severity + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Role of the Person :</td><td width='75%'>" + RolePerson + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Incident Description :</td><td width='75%' style='text-align:left !important;'>" + IncidentDescription + "</td></tr>");

            if (IsExceletd == 0)
            {
                strbuild.Append("<tr><td width='25%'>Coordinator Comments :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td width='25%'>Coordinator Comments</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            }
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to view Customer First Incident</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailCustEscalation(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void CustEscalation_send_mailto_ActionToEmployee(int IsExceletd, string CreatedName, string serviceRequestno, string toMailIDs, string actionName, string actionBy, string createdDate, string department, string ccmailid, string redirectURL, string ClosureComments, string EscalationBy, string MailID, string Mode, string CustSatisfaction, string Severity, string RolePerson, string IncidentDescription, string CoordinatorCmd, string ResponseComments)
    { 
        StringBuilder strbuild = new StringBuilder();
      
        var strsubject = "";
        if (IsExceletd == 0)
        {
            strsubject = "Closure of your Customer First Incident " + serviceRequestno + " for “" + department + "”";
        }
        else
        {
            strsubject = "Closure of your Customer First Incident " + serviceRequestno + " for “" + department + "”";
        }

        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            strbuild.Append("<tr><td>This is to inform you that following action has been taken on your customer incident " + serviceRequestno + ".</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Action Taken : </td><td width='75%'>" + actionName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken By : </td><td width='75%'>" + actionBy + "</td></tr>");
            //strbuild.Append("<tr><td>Assigned To : </td><td >" + assgineTo + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer First Request No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created By : </td><td width='75%'>" + CreatedName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Project Name :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Escalation Raised by  :</td><td width='75%'>" + EscalationBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Email ID :</td><td width='75%'>" + MailID + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Mode :</td><td width='75%'>" + Mode + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer Satisfaction Index  :</td><td width='75%'>" + CustSatisfaction + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Severity :</td><td width='75%'>" + Severity + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Role of the Person :</td><td width='75%'>" + RolePerson + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Incident Description :</td><td width='75%' style='text-align:left !important;'>" + IncidentDescription + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Coordinator Comments :</td><td width='75%' style='text-align:left !important;'>" + CoordinatorCmd + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Response Comments :</td><td width='75%' style='text-align:left !important;'>" + ResponseComments + "</td></tr>");
            if (IsExceletd == 0)
            {
                strbuild.Append("<tr><td width='25%'>Closure Comments :</td><td width='75%' style='text-align:left !important;'>" + ClosureComments + "</td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td width='25%'>Closure Comments: </td><td width='75%' style='text-align:left !important;'>" + ClosureComments + "</td></tr>");
            }

            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            if (IsExceletd == 0)
            {
                strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to take action on Customer First Incident </td></tr>");
            }
            else if (IsExceletd == 1)
            {
                strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to take action on Customer First Incident </td></tr>");
            }
            else if (IsExceletd == 2)
            {
                strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to take action on Customer First Incident </td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to take action on Customer First Incident </td></tr>");
            }
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailCustEscalation(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }

    public void CustEscalation_send_mailto_EscalationHeadOrCEO(int IsCEO, string serviceRequestno, string toMailIDs, string employeeName, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription, string actiondate)
    { 
        StringBuilder strbuild = new StringBuilder();
         //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();

        var strsubject = "Escalation of Customer First Incident " + serviceRequestno + "";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            if (IsCEO == 1)
            {
                strbuild.Append("<tr><td>Dear Sir,</td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            }

            strbuild.Append("<tr><td>This is to inform you that " + employeeName + " has escalated Customer First Incident with following details to you. Please take appropriate action</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            // strbuild.Append("<tr><td>Action Taken : </td><td >" + actionName + "</td></tr>");
            // strbuild.Append("<tr><td>Action Taken By : </td><td >" + actionBy + "</td></tr>");
            //strbuild.Append("<tr><td>Assigned To : </td><td >" + assgineTo + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer First Incident No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Project Name :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Date :</td><td width='75%'>" + actiondate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action By :</td><td width='75%'>" + employeeName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Latest Comments :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to take action on Customer First Incident</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailCustEscalation(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }

    public void CustEscalation_send_mailto_HeadOrCEOToSPOC(int IsCEO, string serviceRequestno, string toMailIDs, string employeeName, string createdDate, string department, string ccmailid, string redirectURL, string ResponseComments, string actiondate, string actionBy, string EscalationBy, string MailID, string Mode, string CustSatisfaction, string Severity, string RolePerson, string IncidentDescription, string CoordinatorComment)
    { 
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "Sent Back Of Customer First Incident " + serviceRequestno + " for “" + department + "”";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            if (IsCEO == 1)
            {
                strbuild.Append("<tr><td>This is to inform you that CEO has forwarded escalated incident of " + employeeName + " to you. Please take appropriate action</td></tr>");
            }
            else if (IsCEO == 0)
            {
                strbuild.Append("<tr><td>This is to inform you that " + department + " head has forwarded escalated incident of " + employeeName + " to you. Please take appropriate action</td></tr>");

            }
            else
            {
                strbuild.Append("<tr><td>This is to inform you that " + actionBy + "  has forwarded customer first incident of " + employeeName + " to you. Please take appropriate action</td></tr>");

            }
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Customer First Incident No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created By : </td><td width='75%'>" + employeeName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Project Name :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Date :</td><td width='75%'>" + actiondate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action By :</td><td width='75%'>" + actionBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Project Name :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Escalation Raised by  :</td><td width='75%'>" + EscalationBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Email ID :</td><td width='75%'>" + MailID + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Mode :</td><td width='75%'>" + Mode + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer Satisfaction Index  :</td><td width='75%'>" + CustSatisfaction + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Severity :</td><td width='75%'>" + Severity + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Role of the Person :</td><td width='75%'>" + RolePerson + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Incident Description :</td><td width='75%' style='text-align:left !important;'>" + IncidentDescription + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Coordinator Comments :</td><td width='75%' style='text-align:left !important;'>" + CoordinatorComment + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Response Comments :</td><td width='75%' style='text-align:left !important;'>" + ResponseComments + "</td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to take action on Customer Incident </td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailCustEscalation(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void CustEscalation_send_mailto_Update_Response(int IsExceletd, string CreatedName, string serviceRequestno, string toMailIDs, string actionName, string actionBy, string assgineTo, string createdDate, string department, string ccmailid, string redirectURL, string ResponseComments, string ResponseDate, string DeliveryDate, string EscalationBy, string MailID, string Mode, string CustSatisfaction, string Severity, string RolePerson, string IncidentDescription, string CoordinatorComment)
    { 
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "";
        if (IsExceletd == 0)
        {
            strsubject = "Action Response on your Customer First Incident " + serviceRequestno + " for “" + department + "”";
        }
        else
        {
            strsubject = "Action Response on your Customer First Incident " + serviceRequestno + " for “" + department + "”";
        }

        //var strsubject = "Action update on your Service Request "+ serviceRequestno + "";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            strbuild.Append("<tr><td>This is to inform you that following action has been taken on your Customer Incident " + serviceRequestno + ".</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Action Taken : </td><td width='75%'>" + actionName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken By : </td><td width='75%'>" + actionBy + "</td></tr>");
            //strbuild.Append("<tr><td width='25%'>Assigned To : </td><td width='75%'>" + assgineTo + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer First Incident No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created By : </td><td width='75%'>" + CreatedName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Project Name :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Escalation Raised by  :</td><td width='75%'>" + EscalationBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Email ID :</td><td width='75%'>" + MailID + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Mode :</td><td width='75%'>" + Mode + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer Satisfaction Index  :</td><td width='75%'>" + CustSatisfaction + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Severity :</td><td width='75%'>" + Severity + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Role of the Person :</td><td width='75%'>" + RolePerson + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Incident Description :</td><td width='75%' style='text-align:left !important;'>" + IncidentDescription + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Coordinator Comments :</td><td width='75%' style='text-align:left !important;'>" + CoordinatorComment + "</td></tr>");
            if (IsExceletd == 0)
            {
                strbuild.Append("<tr><td width='25%'>Response Comments :</td><td width='75%' style='text-align:left !important;'>" + ResponseComments + "</td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td width='25%'>Response Comments</td><td width='75%' style='text-align:left !important;'>" + ResponseComments + "</td></tr>");
            }
            strbuild.Append("<tr><td width='25%'>Response Date :</td><td width='75%'>" + ResponseDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Delivery Date :</td><td width='75%'>" + DeliveryDate + "</td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            //strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to view Customer First Request</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailCustEscalation(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void CustEscalation_send_mailto_EscalationReject(int IsCEO, string actionName, string actionBy, string assgineTo, string serviceRequestno, string toMailIDs, string employeeName, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription, string ClosureComments, string EscalationBy, string MailID, string Mode, string CustSatisfaction, string Severity, string RolePerson, string IncidentDescription, string CoordinatorCmd, string ResponseComments)
    { 
        StringBuilder strbuild = new StringBuilder();
         //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();

        var strsubject = "Rejection of Customer First Incident " + serviceRequestno + " for “" + department + "”";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            strbuild.Append("<tr><td>This is to inform you that " + employeeName + " has Rejected Customer Incident with following details. Please take appropriate action</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td>Action Taken : </td><td >" + actionName + "</td></tr>");
            strbuild.Append("<tr><td>Action Taken By : </td><td >" + actionBy + "</td></tr>");
            strbuild.Append("<tr><td>Assigned To : </td><td >" + assgineTo + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer First Incident No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created By : </td><td width='75%'>" + employeeName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Project Name :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Escalation Raised by  :</td><td width='75%'>" + EscalationBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Email ID :</td><td width='75%'>" + MailID + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Mode :</td><td width='75%'>" + Mode + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer Satisfaction Index  :</td><td width='75%'>" + CustSatisfaction + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Severity :</td><td width='75%'>" + Severity + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Role of the Person :</td><td width='75%'>" + RolePerson + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Incident Description :</td><td width='75%' style='text-align:left !important;'>" + IncidentDescription + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Coordinator Comments :</td><td width='75%' style='text-align:left !important;'>" + CoordinatorCmd + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Response Comments :</td><td width='75%' style='text-align:left !important;'>" + ResponseComments + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Closure Comments :</td><td width='75%' style='text-align:left !important;'>" + ClosureComments + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Reject Confirmation Description :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to take action on Customer First Incident</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");
            sendMailCustEscalation(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void CustEscalation_send_mailto_EscalationClosed(int IsCEO, string actionName, string actionBy, string serviceRequestno, string toMailIDs, string employeeName, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription, string ClosureComments, string EscalationBy, string MailID, string Mode, string CustSatisfaction, string Severity, string RolePerson, string IncidentDescription, string CoordinatorCmd, string ResponseComments)
    { 
        StringBuilder strbuild = new StringBuilder();
         //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();

        var strsubject = "Closure of Customer First Incident " + serviceRequestno + " for “" + department + "”";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            strbuild.Append("<tr><td>This is to inform you that following action has been taken on your customer incident " + serviceRequestno + ".</td></tr>");
            //strbuild.Append("<tr><td>This is to inform you that " + employeeName + " has Closed Customer Incident with following details to you. Please take appropriate action</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td>Action Taken : </td><td >" + actionName + "</td></tr>");
            strbuild.Append("<tr><td>Action Taken By : </td><td >" + actionBy + "</td></tr>");
            //strbuild.Append("<tr><td>Assigned To : </td><td >" + assgineTo + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer First Incident No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created By : </td><td width='75%'>" + employeeName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Project Name :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Escalation Raised by  :</td><td width='75%'>" + EscalationBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Email ID :</td><td width='75%'>" + MailID + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Mode :</td><td width='75%'>" + Mode + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer Satisfaction Index  :</td><td width='75%'>" + CustSatisfaction + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Severity :</td><td width='75%'>" + Severity + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Role of the Person :</td><td width='75%'>" + RolePerson + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Incident Description :</td><td width='75%' style='text-align:left !important;'>" + IncidentDescription + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Coordinator Comments :</td><td width='75%' style='text-align:left !important;'>" + CoordinatorCmd + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Response Comments :</td><td width='75%' style='text-align:left !important;'>" + ResponseComments + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Closure Comments :</td><td width='75%' style='text-align:left !important;'>" + ClosureComments + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Closed Confirmation Description :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            //strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to take action on Customer First Incident</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");


            sendMailCustEscalation(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public DataTable GetCustEscalationById(int id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETSERVICEDETAILBYID_ID"),
            new SqlParameter("@id", id)
        };
        return ExecuteDataTable("GetCustEscalationById","SP_INSERTCUST_ESCALATION", "GETSERVICEDETAILBYID_ID", parameters);
    }    //
    public DataTable GetCustEscalationServiceCount(string location, DateTime startDate, DateTime endDate)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETEscalationCOUNT"),
            new SqlParameter("@StartDate", startDate),
            new SqlParameter("@EndDate", endDate),
            new SqlParameter("@Location", location)
        };
        return ExecuteDataTable("GetCustEscalationServiceCount","SP_GetCustEscalation_SR_Count", "GETEscalationCOUNT", parameters);
    }
    public DataTable GetCustEscalationCategoryDepartment(int departmentId)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "DDLDEPARTMENTCategory"),
            new SqlParameter("@ServiceDepartment", departmentId)
        };
        return ExecuteDataTable("GetCustEscalationCategoryDepartment","SP_INSERTCUST_ESCALATION", "DDLDEPARTMENTCategory", parameters);
    }
    public DataTable GetInboxCustEscalationRCH(string assgimentTo, string fromdate, string todate)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETEMPSERVICELISTARC"),
            new SqlParameter("@AssignedTo", assgimentTo),
            new SqlParameter("@fromDate", fromdate),
            new SqlParameter("@toDate", todate)
        };
        return ExecuteDataTable("GetInboxCustEscalationRCH","SP_INSERTCUST_ESCALATION", "GETEMPSERVICELISTARC", parameters);
    }
    public DataTable getCustEscalationReport(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataTable("getCustEscalationReport",strspname,"", parameters);
    }
    public DataTable GetCustEscalationStatusList()
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "DDLSTATUSLIST")
        };
        return ExecuteDataTable("GetCustEscalationStatusList","SP_INSERTCUST_ESCALATION", "DDLSTATUSLIST", parameters);
    }
    public DataTable GETCustEscalationEMPFORHODHR()
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETEMPFORHODHR")
        };
        return ExecuteDataTable("GETCustEscalationEMPFORHODHR","SP_INSERTCUST_ESCALATION", "GETEMPFORHODHR", parameters);
    }
    public DataSet getCustEscalationReportCount(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataSet("getCustEscalationReportCount",strspname,"", parameters);
    }
    public DataTable GetCustEscalation_Approval(string Qtype, string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", Qtype),
             new SqlParameter("@emp_code", EmpCode)
        };
        return ExecuteDataTable("GetCustEscalation_Approval","SP_INSERTCUST_ESCALATION", Qtype, parameters);
    }
    public DataSet GetCustEscalation_DetailsReport(string Stype, string ProjectID, string SeverityID, string CustSatisfactionID, string ImpactProjectID, string StatusID, string IncidentOwner, string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", Stype),
            new SqlParameter("@ProjectID", ProjectID),
            new SqlParameter("@SeverityID", SeverityID),
            new SqlParameter("@CustSatisfactionID", CustSatisfactionID),
            new SqlParameter("@ImpactProjectID", ImpactProjectID),
            new SqlParameter("@StatusID", StatusID),
            new SqlParameter("@IncidentOwner", IncidentOwner),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataSet("GetCustEscalation_DetailsReport","SP_CUSTOMER_ESCALATION_REPORT", Stype, parameters);
    }
    public void CustEscalation_send_mailto_Update_DeliveryDate(int IsExceletd, string CreatedName, string serviceRequestno, string toMailIDs, string actionName, string actionBy, string assgineTo, string createdDate, string department, string ccmailid, string redirectURL, string ResponseComments, string ResponseDate, string DeliveryDate, string EscalationBy, string MailID, string Mode, string CustSatisfaction, string Severity, string RolePerson, string IncidentDescription, string CoordinatorComment)
    { 
        StringBuilder strbuild = new StringBuilder();
         var strsubject = "";
        if (IsExceletd == 0)
        {
            strsubject = "Change in Delivery date of Customer First Incident " + serviceRequestno + " for “" + department + "”.";
        }
        else
        {
            strsubject = "Change in Delivery date of Customer First Incident " + serviceRequestno + " for “" + department + "”.";
        }

        //var strsubject = "Action update on your Service Request "+ serviceRequestno + "";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            strbuild.Append("<tr><td>This is to inform you that the delivary date has been changed for the Customer Incident " + serviceRequestno + " by <b>" + actionBy + "</b>. Details of he incident are as under.</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Action Taken : </td><td width='75%'>" + actionName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken By : </td><td width='75%'>" + actionBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer First Incident No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created By : </td><td width='75%'>" + CreatedName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Project Name :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Escalation Raised by  :</td><td width='75%'>" + EscalationBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Email ID :</td><td width='75%'>" + MailID + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Mode :</td><td width='75%'>" + Mode + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer Satisfaction Index  :</td><td width='75%'>" + CustSatisfaction + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Severity :</td><td width='75%'>" + Severity + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Role of the Person :</td><td width='75%'>" + RolePerson + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Incident Description :</td><td width='75%' style='text-align:left !important;'>" + IncidentDescription + "</td></tr>");
            //strbuild.Append("<tr><td width='25%'>Coordinator Comments :</td><td width='75%' style='text-align:left !important;'>" + CoordinatorComment + "</td></tr>");
            if (IsExceletd == 0)
            {
                //strbuild.Append("<tr><td width='25%'>Response Comments :</td><td width='75%' style='text-align:left !important;'>" + ResponseComments + "</td></tr>");
            }
            else
            {
                //strbuild.Append("<tr><td width='25%'>Response Comments</td><td width='75%' style='text-align:left !important;'>" + ResponseComments + "</td></tr>");
            }
            //strbuild.Append("<tr><td width='25%'>Response Date :</td><td width='75%'>" + ResponseDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'> New Delivery Date :</td><td width='75%'>" + DeliveryDate + "</td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailCustEscalation(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }

    public void CustEscalation_send_mailto_Update_ActionDetail(string strsubjects, string MsgBodys, int IsExceletd, string CreatedName, string serviceRequestno, string toMailIDs, string actionName, string actionBy, string assgineTo, string createdDate, string department, string ccmailid, string redirectURL, string ResponseComments, string ResponseDate, string DeliveryDate, string EscalationBy, string MailID, string Mode, string CustSatisfaction, string Severity, string RolePerson, string IncidentDescription, string CoordinatorComment, string ActionTitle, string ActionRemark)
    { 
        StringBuilder strbuild = new StringBuilder();
         var strsubject = "";
        strsubject = strsubjects;

        //var strsubject = "Action update on your Service Request "+ serviceRequestno + "";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            strbuild.Append("<tr><td>" + MsgBodys + "</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Action Taken : </td><td width='75%'>" + actionName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken By : </td><td width='75%'>" + actionBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer First Incident No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created By : </td><td width='75%'>" + CreatedName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Project Name :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Escalation Raised by  :</td><td width='75%'>" + EscalationBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Email ID :</td><td width='75%'>" + MailID + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Mode :</td><td width='75%'>" + Mode + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer Satisfaction Index  :</td><td width='75%'>" + CustSatisfaction + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Severity :</td><td width='75%'>" + Severity + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Role of the Person :</td><td width='75%'>" + RolePerson + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Incident Description :</td><td width='75%' style='text-align:left !important;'>" + IncidentDescription + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Date :</td><td width='75%' style='text-align:left !important;'>" + CoordinatorComment + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Title :</td><td width='75%' style='text-align:left !important;'>" + ActionTitle + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Remark :</td><td width='75%' style='text-align:left !important;'>" + ActionRemark + "</td></tr>");
            //strbuild.Append("<tr><td width='25%'>Response Date :</td><td width='75%'>" + ResponseDate + "</td></tr>");
            //strbuild.Append("<tr><td width='25%'> New Delivery Date :</td><td width='75%'>" + DeliveryDate + "</td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailCustEscalation(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    
    public void CustEscalation_send_mailto_Update_IncidentDisc(string strsubjects, string MsgBodys, int IsExceletd, string CreatedName, string serviceRequestno, string toMailIDs, string actionName, string actionBy, string assgineTo, string createdDate, string department, string ccmailid, string redirectURL, string ResponseComments, string ResponseDate, string DeliveryDate, string EscalationBy, string MailID, string Mode, string CustSatisfaction, string Severity, string RolePerson, string IncidentDescription, string CoordinatorComment)
    { 
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "";
        strsubject = strsubjects;

        //var strsubject = "Action update on your Service Request "+ serviceRequestno + "";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            strbuild.Append("<tr><td>" + MsgBodys + "</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Action Taken : </td><td width='75%'>" + actionName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken By : </td><td width='75%'>" + actionBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer First Incident No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created By : </td><td width='75%'>" + CreatedName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Project Name :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Escalation Raised by  :</td><td width='75%'>" + EscalationBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Email ID :</td><td width='75%'>" + MailID + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Mode :</td><td width='75%'>" + Mode + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer Satisfaction Index  :</td><td width='75%'>" + CustSatisfaction + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Severity :</td><td width='75%'>" + Severity + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Role of the Person :</td><td width='75%'>" + RolePerson + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Updated Incident Description :</td><td width='75%' style='text-align:left !important;'>" + IncidentDescription + "</td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailCustEscalation(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }

    public void CustEscalation_send_mailto_Change_IncidentOwner(int IsExceletd, string CreatedName, string serviceRequestno, string toMailIDs, string actionName, string actionBy, string assgineTo, string createdDate, string department, string ccmailid, string redirectURL, string ResponseComments, string ResponseDate, string DeliveryDate, string EscalationBy, string MailID, string Mode, string CustSatisfaction, string Severity, string RolePerson, string IncidentDescription, string CoordinatorComment)
    { 
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "";
        if (IsExceletd == 0)
        {
            strsubject = "Action Change Incident Owner on Customer First Incident " + serviceRequestno + " for “" + department + "”";
        }
        else
        {
            strsubject = "Action Change Incident Owner on Customer First Incident " + serviceRequestno + " for “" + department + "”";
        }

        //var strsubject = "Action update on your Service Request "+ serviceRequestno + "";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            strbuild.Append("<tr><td>This is to inform you that following action has been taken on your Customer Incident " + serviceRequestno + ".</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Action Taken : </td><td width='75%'>" + actionName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken By : </td><td width='75%'>" + actionBy + "</td></tr>");
            //strbuild.Append("<tr><td width='25%'>Assigned To : </td><td width='75%'>" + assgineTo + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer First Incident No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created By : </td><td width='75%'>" + CreatedName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Project Name :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Escalation Raised by  :</td><td width='75%'>" + EscalationBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Email ID :</td><td width='75%'>" + MailID + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Mode :</td><td width='75%'>" + Mode + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer Satisfaction Index  :</td><td width='75%'>" + CustSatisfaction + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Severity :</td><td width='75%'>" + Severity + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Role of the Person :</td><td width='75%'>" + RolePerson + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Incident Description :</td><td width='75%' style='text-align:left !important;'>" + IncidentDescription + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Current Incident Owner :</td><td width='75%' style='text-align:left !important;'>" + CoordinatorComment + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>New Incident Owner :</td><td width='75%' style='text-align:left !important;'>" + ResponseComments + "</td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            //strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to view Customer First Request</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailCustEscalation(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion
     
    #region Unregions Methods
    public Int32 getTravelUploaded_Files(decimal MaxTriptId)
    {
        Int32 file_cnt = 0;
        DataTable dtlvInbox = new DataTable();

        var parameters = new[]
        {
            new SqlParameter("@t_id", MaxTriptId),
            new SqlParameter("@filetype", "GetTravelExp")
        };
        dtlvInbox= ExecuteDataTable("getTravelUploaded_Files","usp_InsertFuel_Files", "GetTravelExp", parameters);
        if (dtlvInbox.Rows.Count > 0)
        {
            file_cnt = (Int32)dtlvInbox.Rows[0]["cnt"];
        }
        return file_cnt;
    }
    public DataTable ChkRelationExist(string empcode, string Member_Rel)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "ChkRelationExistInTempTable"),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@Member_Rel",Member_Rel)
        };
        return ExecuteDataTable("ChkRelationExist","SP_Insert_Nominations_Mediclaim", "ChkRelationExistInTempTable", parameters);
    }
    public DataTable getPaymentVoucherProject_List()
    {
        var parameters = new[]
         {
            new SqlParameter("@stype", "sp_getPaymentVoucherProject_List")
        };
        return ExecuteDataTable("getPaymentVoucherProject_List","SP_GETALLreembursement_DETAILS", "sp_getPaymentVoucherProject_List", parameters);
    }
    public DataTable getPaymentVoucherDepartment_List()
    {
        var parameters = new[]
       {
            new SqlParameter("@stype", "sp_getPaymentVoucherDepartment_List")
        };
        return ExecuteDataTable("getPaymentVoucherDepartment_List","SP_GETALLreembursement_DETAILS", "sp_getPaymentVoucherDepartment_List", parameters);
    }
    public DataTable getMobileVoucherProject_List()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_getMobileVoucherProject_List")            
        };
        return ExecuteDataTable("getMobileVoucherProject_List","SP_GETALLreembursement_DETAILS", "sp_getMobileVoucherProject_List", parameters);

    }
    public DataSet getEmployeeDetail()
    { 
        return ExecuteDataSet("getEmployeeDetail","SP_EmployeeDetailsRPT","");
         
    }
    //Upload IT file -procs_ExitProcess_ClearanceApproveForm
    public void InserITAttachmentUploaded_Files(int ResignationID, string Emp_Code, string strfileName)
    {
        var parameters = new[]
       {
            new SqlParameter("@Type", "InsertIT_Files"),
            new SqlParameter("@ResignationID", ResignationID),
            new SqlParameter("@EmpCode", Emp_Code),
            new SqlParameter("@filepath", strfileName),
        };
         ExecuteNonQuery("InserITAttachmentUploaded_Files","spExitProc_ClearanceForm", "InsertIT_Files", parameters);
    }
    public DataTable GetExpenseNextApproverDetails_Newjoinee(string empcode, int tripid, int trcondition)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_NextApproverDetails_mail_NewJoinee"),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@expid", tripid),
            new SqlParameter("@condiionid", trcondition)
        };
        return ExecuteDataTable("GetExpenseNextApproverDetails_Newjoinee","SP_GETALL_Expense_DETAILS", "get_NextApproverDetails_mail_NewJoinee", parameters);
    }
    public object UpdateSentBkReqRepairReplacement(string CustCode, string Remarks, string AppRemarks, string qtype, string AssignedTo, int isAssigned, int Status, int ActionStatus, string Actionby, string ReqType, string EmpCode, int Id, string AARNo)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@CustodianCode", CustCode),
            new SqlParameter("@Remarks", Remarks),
            new SqlParameter("@AppRemarks", AppRemarks),
            new SqlParameter("@AssignedTo", AssignedTo),
            new SqlParameter("@isAssigned", isAssigned),
            new SqlParameter("@Status", Status),
            new SqlParameter("@ActionStatus", ActionStatus),
            new SqlParameter("@ActionBy", Actionby),
            new SqlParameter("@RequestType", ReqType),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@AARNoId", Id),
            new SqlParameter("@AARNo", AARNo)
        };
        var status =  ExecuteScalar("UpdateSentBkReqRepairReplacement","SP_Admin_AssetInventory", qtype, parameters);
        return status;         
    }
    public bool deleteExitInview_details(string EmpCode, string Type, int ResignationID)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@Type", Type),            
            new SqlParameter("@EmpCode", EmpCode) 
         };
        if (ResignationID == 0)
        {
            parameters.Add(new SqlParameter("@ResignationID", ResignationID));
        }
        else
        {
            parameters.Add(new SqlParameter("@ResignationID", DBNull.Value));
        }

        var status = ExecuteNonQuery("deleteExitInview_details","spExitInterviewForm", Type, parameters.ToArray());
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }    
    public void send_mailto_NewEmployeeViewAcceptthe_KRA(string toMailIDs, string StrSubject, string Contain1, string Contain2, string Contain3, string Empname)
    { 
        StringBuilder strbuild = new StringBuilder();      
        StrSubject = StrSubject + "  ";
        try
        {
            strbuild = new StringBuilder();
            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:15px;'></td></tr>");
            strbuild.Append("<tr><td>Dear " + Empname + ",</td></tr>");
            strbuild.Append("<tr><td style='height:20px;'></td></tr>");
            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td >" + Contain1 + "</ td></tr>");
            strbuild.Append("<tr><td style='padding-bottom:50px'>" + Contain2 + " </td></tr>");
            strbuild.Append("<tr><td style='padding-bottom:20px'>" + Contain3 + " </td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'>");
            strbuild.Append("<tr><td></td></tr>");
            strbuild.Append("<tr><td></td></tr>");

            if (Convert.ToString("").Trim() != "")
                strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("</table>");
            sendMail(toMailIDs, StrSubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }
    
    public bool InsertUpdateCertificationDetailsHR(int id, string emp_code, int CerificationId, string University_Institute, int ModuleId, string FromDate, string ToDate, bool IsCompleted, string CertificationNo, string HREmpCode, string CertificationCode)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", "INSERTUPDATECerificationHR"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@CerificationId", CerificationId),
            new SqlParameter("@University_Institute", University_Institute),
            new SqlParameter("@ModuleId", ModuleId),
            new SqlParameter("@FromDate", FromDate),
            new SqlParameter("@ToDate", ToDate),
            new SqlParameter("@Iscompleted", IsCompleted),
            new SqlParameter("@CertificationNo", CertificationNo),
            new SqlParameter("@HREmpCodelogin", HREmpCode),
            new SqlParameter("@CertificationCode", CertificationCode)
         };
        var status = ExecuteNonQuery("InsertUpdateCertificationDetailsHR","SP_CV_EMP_DETAILS", "INSERTUPDATECerificationHR", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertUpdateProjectDetailsHR(int id, string emp_code, int projectTypeId, string ClientName, string IndustryType, string BriefSummaryOfRole, string FromDate, string ToDate, bool IsCurrentProject, string ProductImplemented, string OrganisationName, int RoleId, int ModuleId, int OrganationType, int regionId, string HREmpCode, bool IsProject)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATEProjectDetailsHR"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@projectTypeId", projectTypeId),
            new SqlParameter("@ClientName", ClientName),
            new SqlParameter("@IndustryType", IndustryType),
            new SqlParameter("@BriefSummaryOfRole", BriefSummaryOfRole),
            new SqlParameter("@FromDate", FromDate),
            new SqlParameter("@ToDate", ToDate),
            new SqlParameter("@Iscompleted", IsCurrentProject),
            new SqlParameter("@ProductImplemented", ProductImplemented),
            new SqlParameter("@OrganisationName", OrganisationName),
            new SqlParameter("@RoleId", RoleId),
            new SqlParameter("@ModuleId", ModuleId),
            new SqlParameter("@OrganisationType", OrganationType),
            new SqlParameter("@RegionId", regionId),
            new SqlParameter("@HREmpCodelogin", HREmpCode),
            new SqlParameter("@IsAnyProject", IsProject)
        };
        var status = ExecuteNonQuery("InsertUpdateProjectDetailsHR","SP_CV_EMP_DETAILS", "INSERTUPDATEProjectDetailsHR", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }         
    }
    public bool InsertUpdateDomainDetailsHR(int id, string emp_code, string OrganisationName, string Domain, string IndustryType, string BriefSummaryOfRole, string FromDate, string ToDate, int RoleId, int orgTypeId, bool IsComplite, string HREmpCode, bool IsAnyDomain)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATEDomainDetailsHR"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@OrganisationName", OrganisationName),
            new SqlParameter("@Domain", Domain),
            new SqlParameter("@IndustryType", IndustryType),
            new SqlParameter("@BriefSummaryOfRole", BriefSummaryOfRole),
            new SqlParameter("@FromDate", FromDate),
            new SqlParameter("@ToDate", ToDate),
            new SqlParameter("@RoleId", RoleId),
            new SqlParameter("@OrganisationType", orgTypeId),
            new SqlParameter("@Iscompleted", IsComplite),
            new SqlParameter("@HREmpCodelogin", HREmpCode),
            new SqlParameter("@IsAnyDomain", IsAnyDomain)
        };
        var status = ExecuteNonQuery("InsertUpdateDomainDetailsHR","SP_CV_EMP_DETAILS", "INSERTUPDATEDomainDetailsHR", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }         
    }

    //public bool InsertUpdateProjectDetailsHR(int id, string emp_code, int projectTypeId, string ClientName, string IndustryType, string BriefSummaryOfRole, string FromDate, string ToDate, bool IsCurrentProject, string ProductImplemented, string OrganisationName, int RoleId, int ModuleId, int OrganationType, int regionId, string HREmpCode)
    //{
    //    try
    //    {
    //        scon = new SqlConnection(ConfigurationManager.ConnectionStrings["sqlconnection"].ToString());
    //        if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
    //            scon.Open();
    //        sCommand = new SqlCommand();
    //        sCommand.Connection = scon;
    //        sCommand.CommandText = "[SP_CV_EMP_DETAILS]";
    //        sCommand.CommandType = CommandType.StoredProcedure;
    //        sCommand.Parameters.AddWithValue("@qtype", "INSERTUPDATEProjectDetailsHR");
    //        sCommand.Parameters.AddWithValue("@Id", id);
    //        sCommand.Parameters.AddWithValue("@EmpCode", emp_code);
    //        sCommand.Parameters.AddWithValue("@projectTypeId", projectTypeId);
    //        sCommand.Parameters.AddWithValue("@ClientName", ClientName);
    //        sCommand.Parameters.AddWithValue("@IndustryType", IndustryType);
    //        sCommand.Parameters.AddWithValue("@BriefSummaryOfRole", BriefSummaryOfRole);
    //        sCommand.Parameters.AddWithValue("@FromDate", FromDate);
    //        sCommand.Parameters.AddWithValue("@ToDate", ToDate);
    //        sCommand.Parameters.AddWithValue("@Iscompleted", IsCurrentProject);
    //        sCommand.Parameters.AddWithValue("@ProductImplemented", ProductImplemented);
    //        sCommand.Parameters.AddWithValue("@OrganisationName", OrganisationName);
    //        sCommand.Parameters.AddWithValue("@RoleId", RoleId);
    //        sCommand.Parameters.AddWithValue("@ModuleId", ModuleId);
    //        sCommand.Parameters.AddWithValue("@OrganisationType", OrganationType);
    //        sCommand.Parameters.AddWithValue("@RegionId", regionId);
    //        sCommand.Parameters.AddWithValue("@HREmpCodelogin", HREmpCode);
    //        var status = sCommand.ExecuteNonQuery();
    //        if (status > 0)
    //        {
    //            return true;
    //        }
    //        else
    //        {
    //            return false;
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        return false;
    //    }
    //    finally
    //    {
    //        scon.Close();
    //    }
    //}


    //public bool InsertUpdateDomainDetailsHR(int id, string emp_code, string OrganisationName, string Domain, string IndustryType, string BriefSummaryOfRole, string FromDate, string ToDate, int RoleId, int orgTypeId, bool IsComplite, string HREmpCode)
    //{
    //    try
    //    {
    //        scon = new SqlConnection(ConfigurationManager.ConnectionStrings["sqlconnection"].ToString());
    //        if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
    //            scon.Open();
    //        sCommand = new SqlCommand();
    //        sCommand.Connection = scon;
    //        sCommand.CommandText = "[SP_CV_EMP_DETAILS]";
    //        sCommand.CommandType = CommandType.StoredProcedure;
    //        sCommand.Parameters.AddWithValue("@qtype", "INSERTUPDATEDomainDetailsHR");
    //        sCommand.Parameters.AddWithValue("@Id", id);
    //        sCommand.Parameters.AddWithValue("@EmpCode", emp_code);
    //        sCommand.Parameters.AddWithValue("@OrganisationName", OrganisationName);
    //        sCommand.Parameters.AddWithValue("@Domain", Domain);
    //        sCommand.Parameters.AddWithValue("@IndustryType", IndustryType);
    //        sCommand.Parameters.AddWithValue("@BriefSummaryOfRole", BriefSummaryOfRole);
    //        sCommand.Parameters.AddWithValue("@FromDate", FromDate);
    //        sCommand.Parameters.AddWithValue("@ToDate", ToDate);
    //        sCommand.Parameters.AddWithValue("@RoleId", RoleId);
    //        sCommand.Parameters.AddWithValue("@OrganisationType", orgTypeId);
    //        sCommand.Parameters.AddWithValue("@Iscompleted", IsComplite);
    //        sCommand.Parameters.AddWithValue("@HREmpCodelogin", HREmpCode);
    //        var status = sCommand.ExecuteNonQuery();
    //        if (status > 0)
    //        {
    //            return true;
    //        }
    //        else
    //        {
    //            return false;
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        return false;
    //    }
    //    finally
    //    {
    //        scon.Close();
    //    }
    //}

    public bool InsertUpdateTotalEXPDetailsHR(string emp_code, string TotalDomainExperience, string TotalSAPExperience, string OverallWorkExperience, string ProfileSummary, string GapInExp, string HREmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATEOverAllEXPHR"),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@TotalDomainExperience", TotalDomainExperience),
            new SqlParameter("@TotalSAPExperience", TotalSAPExperience),
            new SqlParameter("@OverallWorkExperience", OverallWorkExperience),
            new SqlParameter("@CV_Descripation", ProfileSummary),
            new SqlParameter("@GapInExp", GapInExp),
            new SqlParameter("@HREmpCodelogin", HREmpCode)
        };
        var status = ExecuteNonQuery("InsertUpdateTotalEXPDetailsHR","SP_CV_EMP_DETAILS", "INSERTUPDATEOverAllEXPHR", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertUpdateDocumentDetailsHR(int id, string emp_code, string fileName, string filePath, int documentTypeId, bool isActive, string HREmpCode)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", "INSERTUPDATEDocumentDetailsHR"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@DocumentTypeId", documentTypeId),
            new SqlParameter("@IsActive", isActive),
            new SqlParameter("@FileName", fileName),
            new SqlParameter("@FilePath", filePath),
            new SqlParameter("@HREmpCodelogin", HREmpCode)
        };
        var status = ExecuteNonQuery("InsertUpdateDocumentDetailsHR","SP_CV_EMP_DETAILS", "INSERTUPDATEDocumentDetailsHR", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }         
    }
    public bool InsertUpdateEduactionDetailsHR(int id, string emp_code, int QualificationId, int BoardId, int DegreeId, string Stream, string YearOfPassing, decimal? Grade, string University_Institute, decimal? totalMarks, bool IsCompleted, decimal? totalObtaint, string HREmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATEEduactionDetailsHR"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@University_Institute", University_Institute),
            new SqlParameter("@QualificationId", QualificationId),
            new SqlParameter("@BoardId", BoardId),
            new SqlParameter("@DegreeId", DegreeId),
            new SqlParameter("@Stream", Stream),
            new SqlParameter("@DateOfPassing", YearOfPassing),
            new SqlParameter("@Grade", Grade),
            new SqlParameter("@TotalMarks", totalMarks),
            new SqlParameter("@Iscompleted", IsCompleted),
            new SqlParameter("@MarksObtained", totalObtaint),
            new SqlParameter("@HREmpCodelogin", HREmpCode),
        };
        var status = ExecuteNonQuery("InsertUpdateEduactionDetailsHR","SP_CV_EMP_DETAILS", "INSERTUPDATEEduactionDetailsHR", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertUpdateFamilyDetailsHR(int id, string emp_code, string name, int relationId, string DOB, string contactNo, string HREmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATEFamilyDetailsHR"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@FamilyName", name),
            new SqlParameter("@RelationId", relationId),
            new SqlParameter("@DOB", DOB),
            new SqlParameter("@ContactNo", contactNo),
            new SqlParameter("@HREmpCodelogin", HREmpCode)
        };
        var status = ExecuteNonQuery("InsertUpdateFamilyDetailsHR","SP_CV_EMP_DETAILS", "INSERTUPDATEFamilyDetailsHR", parameters);        
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public DataTable GetEscalatedSerivesRequest(string empCode, int status)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@qtype", "GetEscalatedSerivesRequest"),
            new SqlParameter("@emp_code", empCode)
        };

        if (status == 1 || status == 2)
        {
            parameters.Add(new SqlParameter("@Status", status));
        }
        else
        {
            parameters.Add(new SqlParameter("@Status", DBNull.Value));
        }
        return ExecuteDataTable("GetEscalatedSerivesRequest","SP_INSERTSERVICE_REQUEST", "GetEscalatedSerivesRequest", parameters.ToArray());
    }
    public DataTable GetRecruitment_CandidateName(string StrEmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "sp_Req_InterviewCandidateName"),
            new SqlParameter("@Emp_Code", StrEmpCode) 
        };
        return ExecuteDataTable("GetRecruitment_CandidateName","SP_GETREQUISTIONLIST_DETAILS", "sp_Req_InterviewCandidateName", parameters);       
    }
    public DataTable Get_TravelIsDraftStatus(string Qtype, string emp_Code, int Exp_Id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", Qtype),
            new SqlParameter("@emp_code", emp_Code),
            new SqlParameter("@exp_id", Exp_Id),
        };
        return ExecuteDataTable("Get_TravelIsDraftStatus","SP_SAVE_Exp_TRAVELREQUEST_Main", Qtype, parameters); 
    }
    public DataTable GetLocationCode(string @QueueType, string Location_Code)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@QueueType", QueueType)
        };
        if (Convert.ToString(Location_Code).Trim() != "")
            parameters.Add(new SqlParameter("@Location_Code", Location_Code));

        return ExecuteDataTable("GetLocationCode","sp_Invoice_Collection_Report", QueueType, parameters.ToArray());
    }
    #endregion
     
    #region Create CV FOR EMPLOYEE AND Add/Update Masters,Reports
    //Create On 18-10-2021 By Vidhyadhar Galande
    public DataSet getCVEMPDetailById(string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetDetailsByEmpCode"),
            new SqlParameter("@EmpCode",empCode)
        };
        return ExecuteDataSet("getCVEMPDetailById","SP_CV_EMP_DETAILS", "GetDetailsByEmpCode", parameters);
    }
    public DataSet getCVDetailById(int Id, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id",Id)
        };
        return ExecuteDataSet("getCVDetailById","SP_CV_EMP_DETAILS", qtype, parameters);
    }
    public bool InsertUpdateFamilyDetails(int id, string emp_code, string name, int relationId, string DOB, string contactNo)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATEFamilyDetails"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@FamilyName", name),
            new SqlParameter("@RelationId", relationId),
            new SqlParameter("@DOB", DOB),
            new SqlParameter("@ContactNo", contactNo)
        };
        var status = ExecuteNonQuery("InsertUpdateFamilyDetails","SP_CV_EMP_DETAILS", "INSERTUPDATEFamilyDetails", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertUpdateEduactionDetails(int id, string emp_code, int QualificationId, int BoardId, int DegreeId, string Stream, string YearOfPassing, decimal? Grade, string University_Institute, decimal? totalMarks, bool IsCompleted, decimal? totalObtaint)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATEEduactionDetails"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@University_Institute", University_Institute),
            new SqlParameter("@QualificationId", QualificationId),
            new SqlParameter("@BoardId", BoardId),
            new SqlParameter("@DegreeId", DegreeId),
            new SqlParameter("@Stream", Stream),
            new SqlParameter("@DateOfPassing", YearOfPassing),
            new SqlParameter("@Grade", Grade),
            new SqlParameter("@TotalMarks", totalMarks),
            new SqlParameter("@Iscompleted", IsCompleted),
            new SqlParameter("@MarksObtained", totalObtaint)
        };
        var status = ExecuteNonQuery("InsertUpdateEduactionDetails","SP_CV_EMP_DETAILS", "INSERTUPDATEEduactionDetails",parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertUpdateCertificationDetails(int id, string emp_code, int CerificationId, string University_Institute, int ModuleId, string FromDate, string ToDate, bool IsCompleted, string CertificationNo, string CertificationCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATECerification"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@CerificationId", CerificationId),
            new SqlParameter("@University_Institute", University_Institute),
            new SqlParameter("@ModuleId", ModuleId),
            new SqlParameter("@FromDate", FromDate),
            new SqlParameter("@ToDate", ToDate),
            new SqlParameter("@Iscompleted", IsCompleted),
            new SqlParameter("@CertificationNo", CertificationNo),
            new SqlParameter("@CertificationCode", CertificationCode)
        };
        var status = ExecuteNonQuery("InsertUpdateCertificationDetails","SP_CV_EMP_DETAILS", "INSERTUPDATECerification", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public DataTable CheckIsCertificationCodeExists(string qtype, string empCode, string Code)//EXISTS
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@EmpCode",empCode),
            new SqlParameter("@Certification_Code",Code)
        };
        return ExecuteDataTable("CheckIsCertificationCodeExists","SP_CV_EMP_Report", qtype, parameters);
    }
    public bool InsertUpdateTotalEXPDetails(string emp_code, string TotalDomainExperience, string TotalSAPExperience, string OverallWorkExperience, string ProfileSummary, string GapInExp, string TotalNONSAPExperience)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATEOverAllEXP"),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@TotalDomainExperience", TotalDomainExperience),
            new SqlParameter("@TotalSAPExperience", TotalSAPExperience),
            new SqlParameter("@OverallWorkExperience", OverallWorkExperience),
            new SqlParameter("@CV_Descripation", ProfileSummary),
            new SqlParameter("@GapInExp", GapInExp),
            new SqlParameter("@TotalNONSAPExperience", TotalNONSAPExperience)
        };
        var status = ExecuteNonQuery("InsertUpdateTotalEXPDetails","SP_CV_EMP_DETAILS", "INSERTUPDATEOverAllEXP", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertUpdateProjectDetails(int id, string emp_code, int projectTypeId, string ClientName, string IndustryType, string BriefSummaryOfRole, string FromDate, string ToDate, bool IsCurrentProject, string ProductImplemented, string OrganisationName, int RoleId, int ModuleId, int OrganationType, int regionId, bool doYouHaveProjectExp, bool IsSAPOrNonSAP)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", "INSERTUPDATEProjectDetails"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@projectTypeId", projectTypeId),
            new SqlParameter("@ClientName", ClientName),
            new SqlParameter("@IndustryType", IndustryType),
            new SqlParameter("@BriefSummaryOfRole", BriefSummaryOfRole),
            new SqlParameter("@FromDate", FromDate),
            new SqlParameter("@ToDate", ToDate),
            new SqlParameter("@Iscompleted", IsCurrentProject),
            new SqlParameter("@ProductImplemented", ProductImplemented),
            new SqlParameter("@OrganisationName", OrganisationName),
            new SqlParameter("@RoleId", RoleId),
            new SqlParameter("@ModuleId", ModuleId),
            new SqlParameter("@OrganisationType", OrganationType),
            new SqlParameter("@RegionId", regionId),
            new SqlParameter("@IsAnyProject", doYouHaveProjectExp),
            new SqlParameter("@IsSAPORNonSAP", IsSAPOrNonSAP)
        };
        var status = ExecuteNonQuery("InsertUpdateProjectDetails","SP_CV_EMP_DETAILS", "INSERTUPDATEProjectDetails", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    //public bool InsertUpdateProjectDetails(int id, string emp_code, int projectTypeId, string ClientName, string IndustryType, string BriefSummaryOfRole, string FromDate, string ToDate, bool IsCurrentProject, string ProductImplemented, string OrganisationName, int RoleId, int ModuleId, int OrganationType, int regionId,bool doYouHaveProjectExp,bool IsSAPOrNonSAP)
    //    {
    //        try
    //        {
    //            scon = new SqlConnection(ConfigurationManager.ConnectionStrings["sqlconnection"].ToString());
    //            if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
    //                scon.Open();
    //            sCommand = new SqlCommand();
    //            sCommand.Connection = scon;
    //            sCommand.CommandText = "[SP_CV_EMP_DETAILS]";
    //            sCommand.CommandType = CommandType.StoredProcedure;
    //            sCommand.Parameters.AddWithValue("@qtype", "INSERTUPDATEProjectDetails");
    //            sCommand.Parameters.AddWithValue("@Id", id);
    //            sCommand.Parameters.AddWithValue("@EmpCode", emp_code);
    //            sCommand.Parameters.AddWithValue("@projectTypeId", projectTypeId);
    //            sCommand.Parameters.AddWithValue("@ClientName", ClientName);
    //            sCommand.Parameters.AddWithValue("@IndustryType", IndustryType);
    //            sCommand.Parameters.AddWithValue("@BriefSummaryOfRole", BriefSummaryOfRole);
    //            sCommand.Parameters.AddWithValue("@FromDate", FromDate);
    //            sCommand.Parameters.AddWithValue("@ToDate", ToDate);
    //            sCommand.Parameters.AddWithValue("@Iscompleted", IsCurrentProject);
    //            sCommand.Parameters.AddWithValue("@ProductImplemented", ProductImplemented);
    //            sCommand.Parameters.AddWithValue("@OrganisationName", OrganisationName);
    //            sCommand.Parameters.AddWithValue("@RoleId", RoleId);
    //            sCommand.Parameters.AddWithValue("@ModuleId", ModuleId);
    //            sCommand.Parameters.AddWithValue("@OrganisationType", OrganationType);
    //            sCommand.Parameters.AddWithValue("@RegionId", regionId);
    //            sCommand.Parameters.AddWithValue("@IsAnyProject", doYouHaveProjectExp);
    //            sCommand.Parameters.AddWithValue("@IsSAPORNonSAP", IsSAPOrNonSAP);
    //            var status = sCommand.ExecuteNonQuery();
    //            if (status > 0)
    //            {
    //                return true;
    //            }
    //            else
    //            {
    //                return false;
    //            }
    //        }
    //        catch (Exception ex)
    //        {
    //            return false;
    //        }
    //        finally
    //        {
    //            scon.Close();
    //        }
    //    }   

    public bool InsertUpdateDomainDetails(int id, string emp_code, string OrganisationName, string Domain, string IndustryType, string BriefSummaryOfRole, string FromDate, string ToDate, int RoleId, int orgTypeId, bool IsComplite, bool IsDomain)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", "INSERTUPDATEDomainDetails"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@OrganisationName", OrganisationName),
            new SqlParameter("@Domain", Domain),
            new SqlParameter("@IndustryType", IndustryType),
            new SqlParameter("@BriefSummaryOfRole", BriefSummaryOfRole),
            new SqlParameter("@FromDate", FromDate),
            new SqlParameter("@ToDate", ToDate),
            new SqlParameter("@RoleId", RoleId),
            new SqlParameter("@OrganisationType", orgTypeId),
            new SqlParameter("@Iscompleted", IsComplite),
            new SqlParameter("@IsAnyDomain", IsDomain)
        };
        var status = ExecuteNonQuery("InsertUpdateDomainDetails","SP_CV_EMP_DETAILS", "INSERTUPDATEDomainDetails", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    //    public bool InsertUpdateDomainDetails(int id, string emp_code, string OrganisationName, string Domain, string IndustryType, string BriefSummaryOfRole, string FromDate, string ToDate, int RoleId, int orgTypeId, bool IsComplite)
    //{
    //    try
    //    {
    //        scon = new SqlConnection(ConfigurationManager.ConnectionStrings["sqlconnection"].ToString());
    //        if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
    //            scon.Open();
    //        sCommand = new SqlCommand();
    //        sCommand.Connection = scon;
    //        sCommand.CommandText = "[SP_CV_EMP_DETAILS]";
    //        sCommand.CommandType = CommandType.StoredProcedure;
    //        sCommand.Parameters.AddWithValue("@qtype", "INSERTUPDATEDomainDetails");
    //        sCommand.Parameters.AddWithValue("@Id", id);
    //        sCommand.Parameters.AddWithValue("@EmpCode", emp_code);
    //        sCommand.Parameters.AddWithValue("@OrganisationName", OrganisationName);
    //        sCommand.Parameters.AddWithValue("@Domain", Domain);
    //        sCommand.Parameters.AddWithValue("@IndustryType", IndustryType);
    //        sCommand.Parameters.AddWithValue("@BriefSummaryOfRole", BriefSummaryOfRole);
    //        sCommand.Parameters.AddWithValue("@FromDate", FromDate);
    //        sCommand.Parameters.AddWithValue("@ToDate", ToDate);
    //        sCommand.Parameters.AddWithValue("@RoleId", RoleId);
    //        sCommand.Parameters.AddWithValue("@OrganisationType", orgTypeId);
    //        sCommand.Parameters.AddWithValue("@Iscompleted", IsComplite);
    //        var status = sCommand.ExecuteNonQuery();
    //        if (status > 0)
    //        {
    //            return true;
    //        }
    //        else
    //        {
    //            return false;
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        return false;
    //    }
    //    finally
    //    {
    //        scon.Close();
    //    }
    //}
    public bool DeleteCVDetails(int id, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id",id)
        };
        var status = ExecuteNonQuery("DeleteCVDetails","SP_CV_EMP_DETAILS", qtype, parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    //Report
    public DataSet getCVDetailInbox(int Id, string qtype, string EmpCode, string DepartmentId, string Designation, string Project, string Module, decimal? OverAllFrom, decimal? OverAllTo, string Status, string ddlQualification, string ddlDegree, string ddlCertification, string ddlProjectType, string ddlIndusryType, string ddlRole, string ddlDomain, string ddlBand, string ddlUniversity, string ddlOrganisationType, string ddlOrganisationName, int? year, decimal? projectFrom, decimal? projectTo, decimal? domainFrom, decimal? domainTo, string Region, string Stream, bool IsCompletedCertification, string ddlCertification_Code)
    {
        var parameters = new[]
       {
            new SqlParameter("@Id", Id),
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@DepartmentId", DepartmentId),
            new SqlParameter("@Designation", Designation),
            new SqlParameter("@Project", Project),
            new SqlParameter("@Module", Module),
            new SqlParameter("@Qualification", ddlQualification),
            new SqlParameter("@Degree", ddlDegree),
            new SqlParameter("@Certification", ddlCertification),
            new SqlParameter("@ProjectType", ddlProjectType),
            new SqlParameter("@IndustryType", ddlIndusryType),
            new SqlParameter("@Role", ddlRole),
            new SqlParameter("@Domain", ddlDomain),
            new SqlParameter("@Band", ddlBand),
            new SqlParameter("@UniversityName", ddlUniversity),
            new SqlParameter("@OrganisationName", ddlOrganisationName),
            new SqlParameter("@OrganisationType", ddlOrganisationType),
            new SqlParameter("@OverAllFrom", OverAllFrom),
            new SqlParameter("@OverAllTo", OverAllTo),
            new SqlParameter("@DomainFrom", domainFrom),
            new SqlParameter("@DomainTo", domainTo),
            new SqlParameter("@ProjectFrom", projectFrom),
            new SqlParameter("@ProjectTo", projectTo),
            new SqlParameter("@passingYear", year),
            new SqlParameter("@Status", Status),
            new SqlParameter("@Region", Region),
            new SqlParameter("@Stream", Stream),
            new SqlParameter("@IsCompletedCertification", IsCompletedCertification),
            new SqlParameter("@Certification_Code", ddlCertification_Code)
         };
        return ExecuteDataSet("getCVDetailInbox","SP_CV_EMP_Report", qtype,parameters);
    }

    // Master Data Update
    public DataTable getMasterTabledetails(string qtype, int id)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@qtype", qtype)
        };

        if (id != 0)
        {
            parameters.Add(new SqlParameter("@Id", id));
        }

        return ExecuteDataTable("getMasterTabledetails","SP_CV_EMP_DETAILS", qtype, parameters.ToArray());
    }
    //Insert Degree Details
    public bool InsertUpdateDegree(int id, string emp_code, string name, bool isActive)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATEDEGREE"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@DegreeName", name),
            new SqlParameter("@IsActive", isActive)
        };
        var status = ExecuteNonQuery("InsertUpdateDegree","SP_CV_EMP_DETAILS", "INSERTUPDATEDEGREE", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertUpdateBoard(int id, string emp_code, string name, bool isActive)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATEBOARD"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@DegreeName", name),
            new SqlParameter("@IsActive", isActive)
        };
        var status = ExecuteNonQuery("InsertUpdateBoard","SP_CV_EMP_DETAILS", "INSERTUPDATEBOARD", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertUpdateCertification(int id, string emp_code, string name, bool isActive)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATECertification"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@DegreeName", name),
            new SqlParameter("@IsActive", isActive)
        };
        var status = ExecuteNonQuery("InsertUpdateCertification","SP_CV_EMP_DETAILS", "INSERTUPDATECertification", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertUpdatepProjectType(int id, string emp_code, string name, bool isActive)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATEProjectType"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@DegreeName", name),
            new SqlParameter("@IsActive", isActive)
        };
        var status = ExecuteNonQuery("InsertUpdatepProjectType","SP_CV_EMP_DETAILS", "INSERTUPDATEProjectType", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertUpdateDomain(int id, string emp_code, string name, bool isActive)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATDomain"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@DegreeName", name),
            new SqlParameter("@IsActive", isActive)
        };
        var status = ExecuteNonQuery("InsertUpdateDomain","SP_CV_EMP_DETAILS", "INSERTUPDATDomain", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertUpdateRoleDesignation(int id, string emp_code, string name, bool isActive)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATDesignation"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@DegreeName", name),
            new SqlParameter("@IsActive", isActive)
        };
        var status = ExecuteNonQuery("InsertUpdateRoleDesignation","SP_CV_EMP_DETAILS", "INSERTUPDATDesignation", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertUpdateIndustryType(int id, string emp_code, string name, bool isActive)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATIndustryType"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@DegreeName", name),
            new SqlParameter("@IsActive", isActive)
        };
        var status = ExecuteNonQuery("InsertUpdateIndustryType","SP_CV_EMP_DETAILS", "INSERTUPDATIndustryType", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertUpdateStream(int id, string emp_code, string name, bool isActive)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATStream"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@DegreeName", name),
            new SqlParameter("@IsActive", isActive)
        };
        var status = ExecuteNonQuery("InsertUpdateStream","SP_CV_EMP_DETAILS", "INSERTUPDATStream", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertUpdateOrganisationName(int id, string emp_code, string name, bool isActive)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATOrganisationName"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@OrganisationName", name),
            new SqlParameter("@IsActive", isActive)
        };
        var status = ExecuteNonQuery("InsertUpdateOrganisationName","SP_CV_EMP_DETAILS", "INSERTUPDATOrganisationName", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertUpdateOrganisationType(int id, string emp_code, string name, bool isActive)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATOrganisationType"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@OrganisationName", name),
            new SqlParameter("@IsActive", isActive)
        };
        var status = ExecuteNonQuery("InsertUpdateOrganisationType","SP_CV_EMP_DETAILS", "INSERTUPDATOrganisationType", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertUpdateDocumentType(int id, string emp_code, string name, bool isActive, bool isRequired)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATDocumentType"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@DocumentType", name),
            new SqlParameter("@IsActive", isActive),
            new SqlParameter("@IsRequired", isRequired)
        };
        var status = ExecuteNonQuery("InsertUpdateDocumentType","SP_CV_EMP_DETAILS", "INSERTUPDATDocumentType", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertUpdateReportAccess(string Cu_EmpCode, string emp_code, string Name, bool isActive)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATViewReport"),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@Cu_EmpCode", Cu_EmpCode),
            new SqlParameter("@IsActive", isActive)
        };
        var status = ExecuteNonQuery("InsertUpdateReportAccess","SP_CV_EMP_DETAILS", "INSERTUPDATViewReport", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public DataTable getReportAccessTable(string qtype, string id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@EmpCode", id)
        };
        return ExecuteDataTable("getReportAccessTable","SP_CV_EMP_DETAILS", qtype, parameters);
    }
    public bool InsertUpdateDocumentDetails(int id, string emp_code, string fileName, string filePath, int documentTypeId, bool isActive)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "INSERTUPDATEDocumentDetails"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@DocumentTypeId", documentTypeId),
            new SqlParameter("@IsActive", isActive),
            new SqlParameter("@FileName", fileName),
            new SqlParameter("@FilePath", filePath)
        };
        var status = ExecuteNonQuery("InsertUpdateDocumentDetails","SP_CV_EMP_DETAILS", "INSERTUPDATEDocumentDetails", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public DataTable IsCheckCVUpdate(string qtype, string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@EmpCode", empCode)
        };
        return ExecuteDataTable("IsCheckCVUpdate","SP_CV_EMP_DETAILS", qtype, parameters);
    }
    public DataTable IsCheckDate(string qtype, string date, string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@FromDate", date),
            new SqlParameter("@EmpCode", empCode)
        };
        return ExecuteDataTable("IsCheckDate","SP_CV_EMP_DETAILS", qtype,parameters);
    }
    public DataTable IsCheckDateById(string qtype, string date, int id, string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@FromDate", date),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", empCode)
        };
        return ExecuteDataTable("IsCheckDateById","SP_CV_EMP_DETAILS", qtype, parameters);
    }
    public DataSet getCVReportById(int Id, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", Id)
        };
        return ExecuteDataSet("getCVReportById","SP_CV_EMP_Report", qtype, parameters);
    }
    public DataTable CheckIsIdsExists(string qtype, string empCode, int id)//EXISTS
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@EmpCode", empCode),
            new SqlParameter("@Id", id)
        };
        return ExecuteDataTable("CheckIsIdsExists","SP_CV_EMP_Report", qtype, parameters);
    }
    public bool UpdateEmployeeProfile(string qtype, string emp_code, string PersonalEmailID, string BloodGroup, string PermanentAddress, string CurrentAddress, string PassportNo, string PassportDateofIssue, string PassportDateofExpiry, string EmergencyContactPersonName, string EmergencyContactNo, string PanCardNo, string AadharNo, string BankName, string BankAcNo, string IFSCCode, string EPFNo, string UANNo, string OtherModule, bool Completed_Certification, string GapInExp, string spassportPlaceIssue, string NameAsAadhar, string NameAsPAN, string NameAsPassport, bool isPassport, string MotherName, string FatherName, bool Is_AnyProjectDone, bool Is_AnyDomainDone)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@PersonalEmailID", PersonalEmailID),
            new SqlParameter("@BloodGroup", BloodGroup),
            new SqlParameter("@PermanentAddress", PermanentAddress),
            new SqlParameter("@CurrentAddress", CurrentAddress),
            new SqlParameter("@PassportNo", PassportNo),
            new SqlParameter("@PassportDateofIssue", PassportDateofIssue),
            new SqlParameter("@PassportDateofExpiry", PassportDateofExpiry),
            new SqlParameter("@EmergencyContactPersonName", EmergencyContactPersonName),
            new SqlParameter("@EmergencyContactNo", EmergencyContactNo),
            new SqlParameter("@PanCardNo", PanCardNo),
            new SqlParameter("@AadharNo", AadharNo),
            new SqlParameter("@BankName", BankName),
            new SqlParameter("@BankAcNo", BankAcNo),
            new SqlParameter("@IFSCCode", IFSCCode),
            new SqlParameter("@EPFNo", EPFNo),
            new SqlParameter("@UANNo", UANNo),
            new SqlParameter("@OtherModule", OtherModule),
            new SqlParameter("@Completed_Certification", Completed_Certification),
            new SqlParameter("@GapInExp", GapInExp),
            new SqlParameter("@PassportPlaceIssue", spassportPlaceIssue),
            new SqlParameter("@NameAsAadhar", NameAsAadhar),
            new SqlParameter("@NameAsPAN", NameAsPAN),
            new SqlParameter("@NameAsPassport", NameAsPassport),
            new SqlParameter("@Is_Passport", isPassport),
            new SqlParameter("@MotherName", MotherName),
            new SqlParameter("@FatherName", FatherName),
            new SqlParameter("@Is_AnyProjectDone", Is_AnyProjectDone),
            new SqlParameter("@Is_AnyDomainDone", Is_AnyDomainDone)
        };
        var status = ExecuteNonQuery("UpdateEmployeeProfile","SP_CV_EMP_Profile_Update", qtype, parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    //public bool UpdateEmployeeProfile(string qtype, string emp_code, string PersonalEmailID, string BloodGroup, string PermanentAddress, string CurrentAddress, string PassportNo, string PassportDateofIssue, string PassportDateofExpiry, string EmergencyContactPersonName
    //                , string EmergencyContactNo, string PanCardNo, string AadharNo, string BankName, string BankAcNo, string IFSCCode, string EPFNo, string UANNo, string OtherModule, bool Completed_Certification, string GapInExp, string spassportPlaceIssue, string NameAsAadhar, string NameAsPAN, string NameAsPassport, bool isPassport,string MotherName,string FatherName)
    //    {
    //        try
    //        {
    //            scon = new SqlConnection(ConfigurationManager.ConnectionStrings["sqlconnection"].ToString());
    //            if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
    //                scon.Open();
    //            sCommand = new SqlCommand();
    //            sCommand.Connection = scon;
    //            sCommand.CommandText = "[SP_CV_EMP_Profile_Update]";
    //            sCommand.CommandType = CommandType.StoredProcedure;
    //            sCommand.Parameters.AddWithValue("@qtype", qtype);
    //            sCommand.Parameters.AddWithValue("@EmpCode", emp_code);
    //            sCommand.Parameters.AddWithValue("@PersonalEmailID", PersonalEmailID);
    //            sCommand.Parameters.AddWithValue("@BloodGroup", BloodGroup);
    //            sCommand.Parameters.AddWithValue("@PermanentAddress", PermanentAddress);
    //            sCommand.Parameters.AddWithValue("@CurrentAddress", CurrentAddress);
    //            sCommand.Parameters.AddWithValue("@PassportNo", PassportNo);
    //            sCommand.Parameters.AddWithValue("@PassportDateofIssue", PassportDateofIssue);
    //            sCommand.Parameters.AddWithValue("@PassportDateofExpiry", PassportDateofExpiry);
    //            sCommand.Parameters.AddWithValue("@EmergencyContactPersonName", EmergencyContactPersonName);
    //            sCommand.Parameters.AddWithValue("@EmergencyContactNo", EmergencyContactNo);
    //            sCommand.Parameters.AddWithValue("@PanCardNo", PanCardNo);
    //            sCommand.Parameters.AddWithValue("@AadharNo", AadharNo);
    //            sCommand.Parameters.AddWithValue("@BankName", BankName);
    //            sCommand.Parameters.AddWithValue("@BankAcNo", BankAcNo);
    //            sCommand.Parameters.AddWithValue("@IFSCCode", IFSCCode);
    //            sCommand.Parameters.AddWithValue("@EPFNo", EPFNo);
    //            sCommand.Parameters.AddWithValue("@UANNo", UANNo);
    //            sCommand.Parameters.AddWithValue("@OtherModule", OtherModule);
    //            sCommand.Parameters.AddWithValue("@Completed_Certification", Completed_Certification);
    //            sCommand.Parameters.AddWithValue("@GapInExp", GapInExp);
    //            sCommand.Parameters.AddWithValue("@PassportPlaceIssue", spassportPlaceIssue);
    //            sCommand.Parameters.AddWithValue("@NameAsAadhar", NameAsAadhar);
    //            sCommand.Parameters.AddWithValue("@NameAsPAN", NameAsPAN);
    //            sCommand.Parameters.AddWithValue("@NameAsPassport", NameAsPassport);
    //            sCommand.Parameters.AddWithValue("@Is_Passport", isPassport);
    //            sCommand.Parameters.AddWithValue("@MotherName", MotherName);
    //            sCommand.Parameters.AddWithValue("@FatherName", FatherName);
    //            var status = sCommand.ExecuteNonQuery();
    //            if (status > 0)
    //            {
    //                return true;
    //            }
    //            else
    //            {
    //                return false;
    //            }
    //        }
    //        catch (Exception ex)
    //        {
    //            return false;
    //        }
    //        finally
    //        {
    //            scon.Close();
    //        }
    //    }

    #endregion
        
    #region Candidate Referral 19-11-21
    public DataTable Insert_Referral_Candidate(string EmpCode, int Candidate_ID, string AssigneTo, string CandidateGender, string Maritalstatus, string CandidateName, string CandidateBirthday, string CandidateEmail, string CandidateMobile, string RelevantExperience, string TotalExperience, int ModuleId, int StatusID, string Comment, string AdditionalSkillset, string UploadResume, int inoticeperiod)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", Candidate_ID == 0 ? "INSERT" : (object)"Update"),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@Ref_Candidate_ID", Candidate_ID),
            new SqlParameter("@AssigneTo", AssigneTo),
            new SqlParameter("@Ref_CandidateGender", CandidateGender),
            new SqlParameter("@Maritalstatus", Maritalstatus),
            new SqlParameter("@Ref_CandidateName", CandidateName),
            new SqlParameter("@Ref_CandidateBirthday", CandidateBirthday),
            new SqlParameter("@Ref_CandidateEmail", CandidateEmail),
            new SqlParameter("@Ref_CandidateMobile", CandidateMobile),
            new SqlParameter("@Ref_CandidateRelevantExperience", RelevantExperience),
            new SqlParameter("@Ref_CandidateTotalExperience", TotalExperience),
            new SqlParameter("@ModuleId", ModuleId),
            new SqlParameter("@StatusID", StatusID),
            new SqlParameter("@Comment", Comment),
            new SqlParameter("@AdditionalSkillset", AdditionalSkillset),
            new SqlParameter("@Ref_UploadResume", UploadResume),
            new SqlParameter("@Ref_CandidateNoticePeriod", inoticeperiod)
        };
        return ExecuteDataTable("Insert_Referral_Candidate","sp_Ref_CreateCandidate", "INSERT or Update", parameters);
    }
    public DataTable GetRef_CandidatedList(string Emp_Code, string stype)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", stype),
            new SqlParameter("@EmpCode", Emp_Code)
        };
        return ExecuteDataTable("GetRef_CandidatedList","sp_Ref_CreateCandidate", stype, parameters);
    }
    public DataTable GetRef_Candidated_SPOCData()
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", "GETSPOCDETAIL")
        };
        return ExecuteDataTable("GetRef_Candidated_SPOCData","sp_Ref_CreateCandidate", "GETSPOCDETAIL", parameters);
    }
    public void Ref_Candidated_send_mailto_SPOC(string CandidatedName, string toMailIDs, string employeeName, string AssigneName, string createdDate, string CandidatedEMail, string ccmailid, string CandidatedMobile, string Gender, string Maritalstatus, string SkillSet, string TotalExperience, string RelevantExperience, string AdditionalSkillset, string Comments, string strLeaveRstURL, Int32 noticeperiod)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "New candidate “" + CandidatedName + "”  is referred, your action is required";
        try
        {

            if (Convert.ToString(Gender).Trim() == "0")
                Gender = "";

            if (Convert.ToString(Maritalstatus).Trim() == "0")
                Maritalstatus = "";

            strbuild = new StringBuilder();
            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px;'></td></tr>");
            strbuild.Append("<tr><td>Dear " + AssigneName + ",</td></tr>");
            strbuild.Append("<tr><td> This is to inform you that a  new candidate is referred by <b>" + employeeName + "</b>. Please take appropriate action.</td></tr>");
            strbuild.Append("<tr><td style='height:20px;'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80% !important;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            //strbuild.Append("<tr><td width='25%'>Customer First Incident No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created By : </td><td width='75%'>" + employeeName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Candidate Name :</td><td width='75%'>" + CandidatedName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Candidate EMailID  :</td><td width='75%'>" + CandidatedEMail + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Candidate Mobile No  :</td><td width='75%'>" + CandidatedMobile + "</td></tr>");

            strbuild.Append("<tr><td width='25%'>Gender  :</td><td width='75%'>" + Gender + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Marital Status  :</td><td width='75%'>" + Maritalstatus + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>SkillSet  :</td><td width='75%'>" + SkillSet + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Total Experience In(Year)  :</td><td width='75%'>" + TotalExperience + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Relevant Experience In(Year)  :</td><td width='75%'>" + RelevantExperience + "</td></tr>");
            if (Convert.ToString(noticeperiod).Trim() != "0")
                strbuild.Append("<tr><td width='25%'>Notice Period (Days)  :</td><td width='75%'>" + noticeperiod + "</td></tr>");
            else
                strbuild.Append("<tr><td width='25%'>Notice Period (Days)  :</td><td width='75%'></td></tr>");

            strbuild.Append("<tr><td width='25%'>Additional Skillset  :</td><td width='75%'>" + AdditionalSkillset + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Comments  :</td><td width='75%'>" + Comments + "</td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            if (strLeaveRstURL != "")
            {
                strbuild.Append("<tr><td style='height:20px'><a href='" + strLeaveRstURL + "' target='_blank'>Please click here to take action on Referred Candidate</a></td></tr>");

            }
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr colspan=2 ><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {
        }
    }
    public void Ref_Candidated_send_mailto_Moderator(string CandidatedName, string Subject, string tbody, string toMailIDs, string employeeName, string createdDate, string CandidatedEMail, string ccmailid, string CandidatedMobile, string Gender, string Maritalstatus, string SkillSet, string TotalExperience, string RelevantExperience, string AdditionalSkillset, string Comments, string ApporvalComments)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = Subject;
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px;'></td></tr>");
            strbuild.Append("<tr><td>Dear " + employeeName + ",</td></tr>");
            strbuild.Append("<tr><td> " + tbody + "</td></tr>");
            strbuild.Append("<tr><td style='height:20px;'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80% !important;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            //strbuild.Append("<tr><td width='25%'>Customer First Incident No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created By : </td><td width='75%'>" + employeeName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Candidate Name :</td><td width='75%'>" + CandidatedName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Candidate EMailID  :</td><td width='75%'>" + CandidatedEMail + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Candidate Mobile No  :</td><td width='75%'>" + CandidatedMobile + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Gender  :</td><td width='75%'>" + Gender + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Marital Status  :</td><td width='75%'>" + Maritalstatus + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>SkillSet  :</td><td width='75%'>" + SkillSet + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Total Experience In(Year)  :</td><td width='75%'>" + TotalExperience + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Relevant Experience In(Year)  :</td><td width='75%'>" + RelevantExperience + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Additional Skillset  :</td><td width='75%'>" + AdditionalSkillset + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Comments  :</td><td width='75%'>" + Comments + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Apporval Comments  :</td><td width='75%'>" + ApporvalComments + "</td></tr>");
            strbuild.Append("<tr><td style='height:30px'> </td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);

        }
        catch (Exception ex)
        {
        }
    }
    public DataTable GetRef_ModeratorList(string Emp_Code, string stype, int ModuleId, int Empgender, int Ref_Candidate_ID, string ReferedBy, int StatusID)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", stype),
            new SqlParameter("@EmpCode", Emp_Code),
            new SqlParameter("@ModuleId", ModuleId),
            new SqlParameter("@Empgender", Empgender),
            new SqlParameter("@Ref_Candidate_ID", Ref_Candidate_ID),
            new SqlParameter("@ReferedBy", ReferedBy),
            new SqlParameter("@StatusID", StatusID)
        };
        return ExecuteDataTable("GetRef_ModeratorList","sp_Ref_CandidateList", stype, parameters);
    }
    public DataTable Insert_Referral_Action(string QueueType, string EmpCode, int Candidate_ID, int StatusID, string Comment)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@Ref_Candidate_ID", Candidate_ID),
            new SqlParameter("@StatusID", StatusID),
            new SqlParameter("@Comment", Comment)
        };
        return ExecuteDataTable("Insert_Referral_Action","sp_Ref_CreateCandidate", QueueType, parameters);
    }
    public DataTable GetRef_PendingPosition(int ModuleId)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", "check_Pending_PositionModule"),
            new SqlParameter("@ModuleId", ModuleId)
        };
        return ExecuteDataTable("GetRef_PendingPosition","sp_Ref_CreateCandidate", "check_Pending_PositionModule", parameters);
    }
    public DataTable SearchCandidatedForReferral(string Candidate_ID, string EmpCode, int StatusID)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", "INSERT"),
            new SqlParameter("@Candidate_ID", Candidate_ID),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@StatusID", StatusID)
        };
        return ExecuteDataTable("SearchCandidatedForReferral","sp_Ref_SearchCandidateReferral", "INSERT", parameters);
    }
    public void Ref_Candidated_send_mailto_recruitmentModule(string CandidatedName, string Subject, string tbody, string toMailIDs, string employeeName, string createdDate, string CandidatedEMail, string ccmailid, string CandidatedMobile, string Gender, string Maritalstatus, string SkillSet, string TotalExperience, string RelevantExperience, string AdditionalSkillset, string Comments)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = Subject;
        try
        {
            strbuild = new StringBuilder();
            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px;'></td></tr>");
            strbuild.Append("<tr><td>Dear " + employeeName + ",</td></tr>");
            strbuild.Append("<tr><td> " + tbody + "</td></tr>");
            strbuild.Append("<tr><td style='height:20px;'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80% !important;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            //strbuild.Append("<tr><td width='25%'>Customer First Incident No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created By : </td><td width='75%'>" + employeeName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Candidate Name :</td><td width='75%'>" + CandidatedName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Candidate EMailID  :</td><td width='75%'>" + CandidatedEMail + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Candidate Mobile No  :</td><td width='75%'>" + CandidatedMobile + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Gender  :</td><td width='75%'>" + Gender + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Marital Status  :</td><td width='75%'>" + Maritalstatus + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>SkillSet  :</td><td width='75%'>" + SkillSet + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Total Experience In(Year)  :</td><td width='75%'>" + TotalExperience + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Relevant Experience In(Year)  :</td><td width='75%'>" + RelevantExperience + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Additional Skillset  :</td><td width='75%'>" + AdditionalSkillset + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Comments  :</td><td width='75%'>" + Comments + "</td></tr>");
            strbuild.Append("<tr><td style='height:30px'> </td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

    #region AppoinmentLetterIssued Report
    public DataTable GetEmployee()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "GetEmployee")
        };
        return ExecuteDataTable("GetEmployee","SP_AppointmentLetter_Issued_Report", "GetEmployee", parameters);

    }
    public DataTable GetEmpStatus()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "GetEmpStatus")
        };
        return ExecuteDataTable("GetEmpStatus","SP_AppointmentLetter_Issued_Report", "GetEmpStatus", parameters);
    }
    public DataTable GetAppointmentStatus()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "GetAppointmentStatus")
        };
        return ExecuteDataTable("GetAppointmentStatus","SP_AppointmentLetter_Issued_Report", "GetAppointmentStatus", parameters);
    }

    #endregion

    #region Exit Process 01-02-22
    #region Exit Process Manisha
    public DataTable GetResignationReason()
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "FillResignationReason")
        };
        return ExecuteDataTable("GetResignationReason","SP_ExitProcess", "FillResignationReason", parameters);
    }
    public DataTable GetMyResignations(string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "MyResignation"),
            new SqlParameter("@EmpCode", empCode)
        };
        return ExecuteDataTable("GetMyResignations","SP_ExitProcess", "MyResignation", parameters);
    }
    public DataTable GetMyLatestResignation(string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetMyLatestResignation"),
            new SqlParameter("@EmpCode", empCode)
        };
        return ExecuteDataTable("GetMyLatestResignation","SP_ExitProcess", "GetMyLatestResignation", parameters);
    }
    public DataTable GetResignationDetailsByResigId(int ResigId)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetMyResignationDetailsByResigId"),
            new SqlParameter("@ResignationID", ResigId)
        };
        return ExecuteDataTable("GetResignationDetailsByResigId","SP_ExitProcess", "GetMyResignationDetailsByResigId", parameters);
    }
    public DataTable GetAllResignationDetailsByResigId(int ResigId)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetAllResignationDetailsByResigId"),
            new SqlParameter("@ResignationID", ResigId)
        };
        return ExecuteDataTable("GetAllResignationDetailsByResigId","SP_ExitProcess", "GetAllResignationDetailsByResigId", parameters);
    }
    public DataTable GetResignationDetailsByEmpCode(string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetResignationDetailsByEmpCode"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("GetResignationDetailsByEmpCode","SP_ExitProcess", "GetResignationDetailsByEmpCode", parameters);
    }
    public DataTable InboxResignations(string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "InboxResignations"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("InboxResignations","SP_ExitProcess", "InboxResignations", parameters);
    }
    public DataTable ExitProcCheckApprovers(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "get_Approver_Or_Employee"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("ExitProcCheckApprovers","SP_ExitProcess", "get_Approver_Or_Employee", parameters);
    }
    //get_ClearanceApprover
    public DataTable ExitProcClearanceApprover(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "get_ClearanceApprover"),
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("ExitProcClearanceApprover","SP_ExitProcess", "get_ClearanceApprover", parameters);
    }
    public DataTable GetExitProcApproverDetails(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Emp_code", empcode)
        };
        return ExecuteDataTable("GetExitProcApproverDetails","SP_GET_ExitProcAPPmatrix","", parameters);
    }
    //SP_GET_ExitProcAPPmatrix_Prev
    public DataTable GetExitProcApproverDetails_Prev(string empcode, int ResignationId)
    {
        var parameters = new[]
        {
            new SqlParameter("@Emp_code", empcode),
            new SqlParameter("@ResignationId", ResignationId)
        };
        return ExecuteDataTable("GetExitProcApproverDetails_Prev","SP_GET_ExitProcAPPmatrix_Prev","", parameters);
    }
    public DataTable ProcessedResignations(string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "ProcessedResignations"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("ProcessedResignations","SP_ExitProcess", "ProcessedResignations", parameters);
    }
    public DataTable GetProcessedResignationByResigId(int ResigId, string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetProcessedResignationByResigId"),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@ResignationID", ResigId)
        };
        return ExecuteDataTable("GetProcessedResignationByResigId","SP_ExitProcess", "GetProcessedResignationByResigId", parameters);
    }
    public DataTable GetPendingResignationByResigId(int ResigId, string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetPendingResignationByResigId"),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@ResignationID", ResigId)
        };
        return ExecuteDataTable("GetPendingResignationByResigId","SP_ExitProcess", "GetPendingResignationByResigId", parameters);
    }
    public DataTable GetExitProcApproverStatus(string empcode, int ResignationID)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETAPPROVERSTATUS"),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@ResignationID", ResignationID)
        };
        return ExecuteDataTable("GetExitProcApproverStatus","SP_ExitProcess", "GETAPPROVERSTATUS", parameters);
    }
    public DataTable GetExitProcNextApproverDetails(string empcode, int ResignationID)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "get_NextApproverDetails_mail"),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@ResignationID", ResignationID)
        };
        return ExecuteDataTable("GetExitProcNextApproverDetails","SP_ExitProcess", "get_NextApproverDetails_mail", parameters);
    }
    public DataTable GetExitProcCurrentApprID(string empcode, int ResignationID)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "getCurrentApprID"),
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@ResignationID", ResignationID)
        };
        return ExecuteDataTable("GetExitProcCurrentApprID","SP_ExitProcess", "getCurrentApprID", parameters);
    }
    public DataTable GetExitProcNextIntermediateName(int nxt_apprid, int ResignationID, string Reqempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "getCurrentApprID"),
            new SqlParameter("@nextapprid", nxt_apprid),
            new SqlParameter("@ResignationID", ResignationID),
            new SqlParameter("@Reqempcode", Reqempcode)
        };
        return ExecuteDataTable("GetExitProcNextIntermediateName","SP_ExitProcess", "getCurrentApprID", parameters);
    }
    public void ExitProcUpdateResignationAppr(int ResignationID, int statusID)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "UpdateResignationAppr"),
            new SqlParameter("@ResignationID", ResignationID),
            new SqlParameter("@StatusID", statusID)
        };
        ExecuteNonQuery("ExitProcUpdateResignationAppr","SP_ExitProcess", "UpdateResignationAppr",parameters);
    }
    public void ExitProcUpdateResignation(int ResignationID, int statusID)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "UpdateResignation"),
            new SqlParameter("@ResignationID", ResignationID),
            new SqlParameter("@StatusID", statusID)
        };
        ExecuteNonQuery("ExitProcUpdateResignation","SP_ExitProcess", "UpdateResignation", parameters);
    }
    public void ExitProcUpdateAppStatus(int ResignationID, string Remarks, int statusID, string A_EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "UpdateAppStatus"),
            new SqlParameter("@ResignationID", ResignationID),
            new SqlParameter("@Remarks", Remarks),
            new SqlParameter("@StatusID", statusID),
            new SqlParameter("@A_EmpCode", A_EmpCode),
        };
        ExecuteNonQuery("ExitProcUpdateAppStatus","SP_ExitProcess", "UpdateAppStatus", parameters);
    }
    public void SendMailOnResignation(string toMailIDs, string strsubject, string Employee_Name, string strbody, string cc_email, string redirectURL)
    {
        StringBuilder strbuild = new StringBuilder();
        //strsubject = strsubject + " of " + Employee_Name;
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td> Dear All,</td></tr>");
            strbuild.Append("<tr><td> This is to inform you that " + Employee_Name + " has resigned.</td></tr>");
            strbuild.Append("<tr><td> Following are the details for your reference.</td></tr>");

            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");

            if (Convert.ToString(strbody).Trim() != "")
            {
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td colspan=2>" + Convert.ToString(strbody).Trim() + "</td></tr>");
            }
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Click here to take action</td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is a system generated mail, Please do not reply.</td></tr>");
            strbuild.Append("</table>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", cc_email);
        }
        catch (Exception ex)
        {

        }
    }
    public void SendMailOnResignationRetain(string toMailIDs, string strsubject, string Employee_Name, string strbody, string cc_email)
    {
        StringBuilder strbuild = new StringBuilder();

        //strsubject = strsubject + " of " + Employee_Name;
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td> Dear All,</td></tr>");
            strbuild.Append("<tr><td> This is to inform you that " + Employee_Name + " is retained.</td></tr>");
            strbuild.Append("<tr><td> Following are the details for your reference.</td></tr>");
            strbuild.Append("<tr><td> @IT-Team,</td></tr>");
            strbuild.Append("<tr><td> Please reinstate User Id / Login Id of " + Employee_Name + " with immediate effect.</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");

            if (Convert.ToString(strbody).Trim() != "")
            {
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td colspan=2>" + Convert.ToString(strbody).Trim() + "</td></tr>");
            }
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("</table>");

            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", cc_email);
        }
        catch (Exception ex)
        {

        }
    }
    public void SendMailOnFinalApprResignationAcceptance(string toMailIDs, string strsubject, string Employee_Name, string strbody, string cc_email)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td> Dear " + Employee_Name + ",</td></tr>");
            strbuild.Append("<tr><td> We acknowledge the receipt of your resignation.</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td> You are advised to get connected to your reporting manager for next steps. Given below is the current estimated Last</td></tr>");
            strbuild.Append("<tr><td> working date, which may undergo changes subject to policy guidelines.</td></tr>");

            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");

            if (Convert.ToString(strbody).Trim() != "")
            {
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td colspan=2>" + Convert.ToString(strbody).Trim() + "</td></tr>");
            }
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("</table>");

            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", cc_email);
        }
        catch (Exception ex)
        {

        }
    }
    public void ExitProcRetainResignation(string qtype, int ResignationID, int ReasonId, string Remarks, int statusID, string filename, string A_EmpCode, int apprid)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", "RetainResignation"),
            new SqlParameter("@ResignationID", ResignationID),
            new SqlParameter("@ReasonID", ReasonId),
            new SqlParameter("@Remarks", Remarks),
            new SqlParameter("@StatusID", statusID),
            new SqlParameter("@FileName", filename),
            new SqlParameter("@A_EmpCode", A_EmpCode)
        };
        ExecuteNonQuery("ExitProcRetainResignation","SP_ExitProcess", "RetainResignation", parameters);
    }
    public object ExitProcSubmitResignation(string qtype, string EmpCode, string ResigDate, string LwDate, int ReasonID, string EmpRemarks, int StatusID, string filename, string Approvers_code, int apprid)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@ResigDate", ResigDate),
            new SqlParameter("@LwDate", LwDate),
            new SqlParameter("@ReasonID", ReasonID),
            new SqlParameter("@Remarks", EmpRemarks),
            new SqlParameter("@StatusID", StatusID),
            new SqlParameter("@filename", filename),
            new SqlParameter("@A_EmpCode", Approvers_code),
            new SqlParameter("@Appr_Id", apprid)
         };
        var status = ExecuteScalar("ExitProcSubmitResignation","SP_ExitProcess", qtype, parameters);
        return status;
    }
    public DataTable GetApproverDetails(int ResignationID)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", "GETAPPROVERDETAILS") ,
            new SqlParameter("@ResignationID", ResignationID)
        };
        return ExecuteDataTable("GetApproverDetails","SP_ExitProcess", "GETAPPROVERDETAILS", parameters);
    }
    public void SendMailOnResignationRejection(string toMailIDs, string strsubject, string Employee_Name, string strbody, string cc_email)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td> Dear " + Employee_Name + ",</td></tr>");
            strbuild.Append("<tr><td> This is to inform you that your resignation is rejected.</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");

            if (Convert.ToString(strbody).Trim() != "")
            {
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td colspan=2>" + Convert.ToString(strbody).Trim() + "</td></tr>");
            }
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("</table>");

            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", cc_email);
        }
        catch (Exception ex)
        {

        }
    }
    public DataTable GetResignationHistory(string empcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "ResignationHistory") ,
            new SqlParameter("@empcode", empcode)
        };
        return ExecuteDataTable("GetResignationHistory","SP_ExitProcess", "ResignationHistory", parameters);
    }

    #endregion

    public DataTable GetEmploymentType(string EmpCode)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", "GetEmploymentType"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("GetEmploymentType","SP_ExitProcess", "GetEmploymentType", parameters);
    }

    #region Exit Process Chirag

    #region Get Exit Survey Form Dynamicaly
    public DataSet getExitSurveyForm()
    {
        return ExecuteDataSet("getExitSurveyForm","spGetExitSurveyForm","");
    }
    #endregion

    #region GetUserDetailsForExitProcess
    public DataTable getUserDetailsForExitProcess(string EmpCode, int ResignationID, string Type)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", Type),
            new SqlParameter("@ResignationID", ResignationID),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("getUserDetailsForExitProcess","sp_GetUserDataForExitProcess", Type, parameters);
    }
    #endregion

    #region InserExitSurveyForm
    public bool InserExitSurveyFormDetails(string emp_code, int ExitSurveyQstID, int ExitSurveyQstOptID, int OptionResultValue, string ExitSurveyTextAns)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "InsertExitSurveyForm"),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@ExitSurveyQstID", ExitSurveyQstID),
            new SqlParameter("@ExitSurveyQstOptID", ExitSurveyQstOptID == 0 ? DBNull.Value : (object)ExitSurveyQstOptID),
            new SqlParameter("@OptionResultValue", OptionResultValue == 0 ? DBNull.Value : (object)OptionResultValue),
            new SqlParameter("@ExitSurveyTextAns", ExitSurveyTextAns)
        };
        var status = ExecuteNonQuery("InserExitSurveyFormDetails","spExitSurveyForm", "InsertExitSurveyForm", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    #endregion

    #region GetMyExitFormDetails
    public DataTable GetMyExitFormDetails(string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "GetMyExitSurveyForm"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("GetMyExitFormDetails","spExitSurveyForm", "GetMyExitSurveyForm", parameters);
    }
    #endregion

    #region GetExitFormDataByResignationID Sada 3-3-22
    public DataTable GetExitFormDataByResignationID(int ResignationID, string emp_code)
    {
        var parameters = new[]
         {
            new SqlParameter("@Type", "GetExitSurveyFormByResignationID"),
            new SqlParameter("@ResignationID", ResignationID),
            new SqlParameter("@EmpCode", emp_code)
        };
        return ExecuteDataTable("GetExitFormDataByResignationID","spExitSurveyForm", "GetExitSurveyFormByResignationID", parameters);
    }
    #endregion

    #region GetUserDetailsForExitInterview
    public DataSet getUserDetailsForExitInterview(int ResignationID, string Type)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", Type),
            new SqlParameter("@ResignationID", ResignationID)
        };
        return ExecuteDataSet("getUserDetailsForExitInterview","sp_GetUserDataForExitProcess", Type, parameters);
    }
    #endregion

    #region InserExitInterviewForm
    public bool InserExitInterviewFormDetails(int ResignationID, string emp_code, int ExitSurveyQstID, int ExitSurveyQstOptID, int OptionResultValue, string ExitSurveyTextAns, Boolean isdraft)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "InsertExitInterviewForm"),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@ResignationID", ResignationID),
            new SqlParameter("@ExitInterviewQstID", ExitSurveyQstID),
            new SqlParameter("@ExitInterviewQstOptID", ExitSurveyQstOptID == 0 ? DBNull.Value : (object)ExitSurveyQstOptID),
            new SqlParameter("@OptionResultValue", OptionResultValue == 0 ? DBNull.Value : (object)OptionResultValue),
            new SqlParameter("@ExitInterviewTextAns", ExitSurveyTextAns),
            new SqlParameter("@CreatedBy", emp_code),
            new SqlParameter("@IsDraft", isdraft)

        };
        var status = ExecuteNonQuery("InserExitInterviewFormDetails","spExitInterviewForm", "InsertExitInterviewForm", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    #endregion

    #region GetTeamExitInterviewFormDetails
    public DataTable GetTeamExitInterviewFormDetails(string EmpCode)
    {
        var parameters = new[]
       {
            new SqlParameter("@Type", "GetTeamExitInterviewForm"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("GetTeamExitInterviewFormDetails","spExitInterviewForm", "GetTeamExitInterviewForm", parameters);
    }
    #endregion

    #region GetTeamExitInterviewListFormDetails
    public DataTable GetTeamExitInterviewListFormDetails(string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "GetTeamExitInterviewList"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("GetTeamExitInterviewListFormDetails","spExitInterviewForm", "GetTeamExitInterviewList", parameters);
    }
    #endregion

    #region GetMyExitInterviewFormDetails
    public DataTable GetMyExitInterviewFormDetails(string EmpCode)
    {
        var parameters = new[]
       {
            new SqlParameter("@Type", "GetMyExitInterviewForm"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("GetMyExitInterviewFormDetails","spExitInterviewForm", "GetMyExitInterviewForm", parameters);
    }
    #endregion

    #region GetExitInterviewDataByResignationID
    public DataTable GetExitInterviewDataByResignationID(int ResignationID)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "GetExitInterviewFormByResignationID"),
            new SqlParameter("@ResignationID", ResignationID)
        };
        return ExecuteDataTable("GetExitInterviewDataByResignationID","spExitInterviewForm", "GetExitInterviewFormByResignationID", parameters);
    }
    #endregion

    #region GetExitCleranceApprover
    public DataTable getExitCleranceApprover(string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "GetExitCleranceApprover"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("getExitCleranceApprover","spExitProc_ClearanceForm", "GetExitCleranceApprover",parameters);
    }
    #endregion

    #region GetExitCleranceApproverStatus
    public DataTable GetExitCleranceApproverStatus(int ResignationID)
    {
        var parameters = new[]
       {
            new SqlParameter("@Type", "GetClearanceStatus"),
            new SqlParameter("@ResignationID", ResignationID)
        };
        return ExecuteDataTable("GetExitCleranceApproverStatus","spExitProc_ClearanceForm", "GetClearanceStatus", parameters);
    }

    #endregion

    #region SendMailOnExitSurveySubmitted
    public void SendMailOnExitSurveySubmitted(string toMailIDs, string strsubject, string Employee_Name, string strbody, string cc_email, string redirectURL, string LWD)
    {
        StringBuilder strbuild = new StringBuilder();
        //strsubject = strsubject + " of " + Employee_Name;
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td> Hi,</td></tr>");
            strbuild.Append("<tr><td> kindly fill Exit Survey Form A for the employee " + Employee_Name + ".</td></tr>");
            strbuild.Append("<tr><td> Following are the details for your reference.</td></tr>");

            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");

            if (Convert.ToString(strbody).Trim() != "")
            {
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td colspan=2>" + Convert.ToString(strbody).Trim() + "</td></tr>");
            }
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Click here to take action</td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is a system generated mail, Please do not reply.</td></tr>");
            strbuild.Append("</table>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", cc_email);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region SendMailToClearanceApprover
    public void SendMailToClearanceApprover(string toMailIDs, string strsubject, string Employee_Name, string strbody, string cc_email, string redirectURL, string LWD)
    {
        StringBuilder strbuild = new StringBuilder();
        //strsubject = strsubject + " of " + Employee_Name;
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td> Hi,</td></tr>");
            strbuild.Append("<tr><td> Kindly complete clearance at the earlest for the employee " + Employee_Name + ". Please note last working date is " + LWD + ".</td></tr>");
            strbuild.Append("<tr><td> Following are the details for your reference.</td></tr>");

            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");

            if (Convert.ToString(strbody).Trim() != "")
            {
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td colspan=2>" + Convert.ToString(strbody).Trim() + "</td></tr>");
            }
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Click here to take action</td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is a system generated mail, Please do not reply.</td></tr>");
            strbuild.Append("</table>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", cc_email);
        }
        catch (Exception ex)
        {

        }
    }

    #endregion

    #region InserExitClearanceFormApproverDetails
    public bool InserExitClearanceFormApproverDetails(string emp_code, int ClearanceDeptID, string VerifyBy)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "InsertExitClearanceApprover"),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@ClearanceDeptID", ClearanceDeptID),
            new SqlParameter("@VerifyBy", VerifyBy)
        };
        var status = ExecuteNonQuery("InserExitClearanceFormApproverDetails","spExitProc_ClearanceForm", "InsertExitClearanceApprover", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    #endregion

    #region InserExitClearanceFormData
    public bool InserExitClearanceFormData(int ResignationID, string releaseDate)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "InsertExitClearanceFormData"),
            new SqlParameter("@ResignationID", ResignationID),
            new SqlParameter("@releaseDate", releaseDate)
        };
        var status = ExecuteNonQuery("InserExitClearanceFormData","spExitProc_ClearanceForm", "InsertExitClearanceFormData", parameters);

        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    #endregion
    #region GetExitClearanceFormDataByResignationID
    public DataSet GetExitClearanceDataByResignationID(int ResignationID)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "GetUserClearanceData"),
            new SqlParameter("@ResignationID", ResignationID)
        };
        return ExecuteDataSet("GetExitClearanceDataByResignationID","spExitProc_ClearanceForm", "GetUserClearanceData", parameters);
    }
    #endregion

    #region GetClearanceInbox
    public DataTable GetClearanceInbox(string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "GetClearanceInbox"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("GetClearanceInbox","spExitProc_ClearanceForm", "GetClearanceInbox", parameters);
    }

    #endregion

    #region InserClearanceFormUserDetails
    public bool InserClearanceFormUserDetails(int ResignationID, string emp_code, int DeptID, int ExitSurveyQstID, int ExitSurveyQstOptID, int OptionResultValue, string ExitSurveyTextAns)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "InsertExitClearanceUserDetails"),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@ResignationID", ResignationID),
            new SqlParameter("@ClearanceDeptID", DeptID),
            new SqlParameter("@ExitClearanceQstID", ExitSurveyQstID),
            new SqlParameter("@ExitClearanceQstOptID", ExitSurveyQstOptID == 0 ? DBNull.Value : (object)ExitSurveyQstOptID),
            new SqlParameter("@OptionResultValue", OptionResultValue == 0 ? DBNull.Value : (object)OptionResultValue),
            new SqlParameter("@ExitClearanceTextAns", ExitSurveyTextAns),
            new SqlParameter("@VerifyBy", emp_code)
        };
        var status = ExecuteNonQuery("InserClearanceFormUserDetails","spExitProc_ClearanceForm", "InsertExitClearanceUserDetails", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    #endregion

    #region UpdateExitClearanceFormApproverDetails
    public bool UpdateExitClearanceFormApproverDetails(int ResignationID, int ClearanceDeptID, string VerifyBy)
    {
        var parameters = new[]
       {
            new SqlParameter("@Type", "UpdateExitClearanceApprover"),
            new SqlParameter("@ResignationID", ResignationID),
            new SqlParameter("@ClearanceDeptID", ClearanceDeptID),
            new SqlParameter("@VerifyBy", VerifyBy)

        };
        var status = ExecuteNonQuery("UpdateExitClearanceFormApproverDetails","spExitProc_ClearanceForm", "UpdateExitClearanceApprover", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    #endregion

    #region GetApprovedClearance
    public DataTable GetApprovedClearance(string EmpCode)
    {
        var parameters = new[]
       {
            new SqlParameter("@Type", "GetApprovedClearance"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("GetApprovedClearance","spExitProc_ClearanceForm", "GetApprovedClearance", parameters);
    }

    #endregion

    #region GetClearanceViewDataByResignationID
    public DataTable GetClearanceViewDataByResignationID(int ResignationID)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "GetClearanceViewFormByResignationID"),
            new SqlParameter("@ResignationID", ResignationID)
        };
        return ExecuteDataTable("GetClearanceViewDataByResignationID","spExitProc_ClearanceForm", "GetClearanceViewFormByResignationID", parameters);
    }
    #endregion

    #region GetUserEligibleData
    public DataTable GetUserEligibleData(string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "CheckExitEligible"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("GetUserEligibleData","sp_GetUserDataForExitProcess", "CheckExitEligible", parameters);
    }
    #endregion

    #region UpdateExitClearanceFormApproverDetails
    public bool UpdateUserDataInAdminExit(string EmpCode, string Type, int ResignationID)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", Type),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@ResignationID", ResignationID == 0 ? DBNull.Value : (object)ResignationID)
        };
        var status = ExecuteNonQuery("UpdateUserDataInAdminExit","spExitSurveyForm", Type, parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    #endregion

    #region GetMyClearance
    public DataTable GetMyClearance(string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "GetMyClearance"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("GetMyClearance","spExitProc_ClearanceForm", "GetMyClearance", parameters);
    }
    #endregion

    #endregion
    #endregion    

    #region Recruitment CR Manisha Date-03-02-2022
    public DataTable IsEmailExists(string CanEmail)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "IsEmailExists"),
            new SqlParameter("@CanEmail", CanEmail)
        };
        return ExecuteDataTable("IsEmailExists","SP_Rec_Temp_Candi_Education_INSERT", "IsEmailExists", parameters);
    }
    public DataTable IsMobileExists(string Candidate_mobileNo)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "IsMobileExists"),
            new SqlParameter("@Candidate_mobileNo", Candidate_mobileNo)
        };
        return ExecuteDataTable("IsMobileExists","SP_Rec_Temp_Candi_Education_INSERT", "IsMobileExists",parameters);
    }
    public void send_mail_Employee_resigned(string Emp_Name, string toMailIDs, string strsubject, string strmailmsg, String strlocation, string strdate)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr>  ");
            strbuild.Append("<td colspan=2></td></tr>");
            strbuild.Append("<tr><td colspan=2 style='height:20px'></td></tr>");
            strbuild.Append("<tr><td colspan=2> Dear All, </td></tr>");
            strbuild.Append("<tr><td colspan=2> This is to inform you, that " + Emp_Name + " has resigned. Following are the details for your reference.</td></tr>");
            strbuild.Append("<tr><td colspan=2 style='height:20px'></td></tr>");
            strbuild.Append("<tr><td colspan=2>");
            strbuild.Append(strmailmsg);
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td colspan=2 style='height:20px'></td></tr>");
            strbuild.Append("</table>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", strdate);

        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region Candidate information Save as Draft 22-02-22 
    public DataTable Insert_SaveasDraft_Candidate(Recruitment_Candidate_Parameter can)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@empCode", can.empcode),
            new SqlParameter("@Candidate_ID", can.Candidate_ID),
            new SqlParameter("@Cangender", can.CandidateGender),
            new SqlParameter("@maritalstatus", can.Maritalstatus),
            new SqlParameter("@Canname", can.CandidateName),
            new SqlParameter("@CanBirdayDate", can.CandidateBirthday),
            new SqlParameter("@CanCurrentlocation", can.CurrentLocation),
            new SqlParameter("@CanEmail", can.EmailAddress),
            new SqlParameter("@CanMobile", can.CandidateMobile),
            new SqlParameter("@CanPan", can.CandidatePAN),
            new SqlParameter("@CanExperenceYears", can.CandidateExperience_Years),
            new SqlParameter("@CanCurrentctc", can.CandidateCurrentCTC),
            new SqlParameter("@CanExpectedctc", can.CandidateExpectedCTC),
            new SqlParameter("@CanCvsource", can.CVSource_ID),
            new SqlParameter("@CanmainSkillSet", can.ModuleId),
            new SqlParameter("@canreferby", can.ReferredBy),
            new SqlParameter("@VenderID", can.VenderID),
            new SqlParameter("@JobSitesID", can.JobSitesID),
            new SqlParameter("@OtherName", can.Others),
            new SqlParameter("@Comment", can.Comments),
            new SqlParameter("@educationQalification", can.EducationQualification),
            new SqlParameter("@additionalSkill", can.AdditionalSkillset),
            new SqlParameter("@certification", can.Certifications),
            new SqlParameter("@AdharNo", can.AdharNo),
            new SqlParameter("@RelevantExpYrs", can.RelevantExpYrs),
            new SqlParameter("@UploadResume", can.UploadResume),
            new SqlParameter("@CurrentCTC_Fixed", can.CurrentCTC_Fixed),
            new SqlParameter("@CurrentCTC_Variable", can.CurrentCTC_Variable),
            new SqlParameter("@ExpCTC_Fixed", can.ExpCTC_Fixed),
            new SqlParameter("@ExpCTC_Variable", can.ExpCTC_Variable),
            new SqlParameter("@ExpCTC_Total", can.ExpCTC_Total),
            new SqlParameter("@CurrentlyOnNotice", can.CurrentlyOnNotice),
            new SqlParameter("@NoticePeriod", can.NoticePeriod),
            new SqlParameter("@NativeLocation", can.NativeLocation),
            new SqlParameter("@LocationCurrentCompany", can.LocationCurrentCompany),
            new SqlParameter("@BaseLocationPreferenceID", can.BaseLocationPreferenceID),
            new SqlParameter("@Travelanylocations", can.Travelanylocations),
            new SqlParameter("@TravelPandemicSituation", can.TravelPandemicSituation),
            new SqlParameter("@OpentoTravel", can.OpentoTravel),
            new SqlParameter("@Candidatepayroll", can.Candidatepayroll),
            new SqlParameter("@Candidateanybreakservice", can.Candidateanybreakservice),
            new SqlParameter("@ImplementationProjectsWorkOnID", can.ImplementationProjectsWorkOnID),
            new SqlParameter("@DomainExperienceID", can.DomainExperienceID),
            new SqlParameter("@SAPExperienceID", can.SAPExperienceID),
            new SqlParameter("@TotalSupportProjectID", can.TotalSupportProjectID),
            new SqlParameter("@PhasesImplementationWorkId", can.PhasesImplementationWorkId),
            new SqlParameter("@RoleImplementationProjectID", can.RoleImplementationProjectID),
            new SqlParameter("@TypeProjecthandledID", can.TypeProjecthandledID),
            new SqlParameter("@NatureIndustryClientID", can.NatureIndustryClientID),
            new SqlParameter("@CheckCommunicationSkillID", can.CheckCommunicationSkillID),
            new SqlParameter("@CurrentRoleorganization", can.CurrentRoleorganization),
            new SqlParameter("@RoleDomainCompany", can.RoleDomainCompany),
            new SqlParameter("@Reasonforbreak", can.Reasonforbreak),
            new SqlParameter("@lookingChangeReason", can.lookingChangeReason),
            new SqlParameter("@multiplefilenameadd", can.multiplefilenameadd)
        };

        if (can.Candidate_ID == 0)
        {
            parameters.Add(new SqlParameter("@mode", "SaveAsDraftINSERT"));
        }
        else
        {
            parameters.Add(new SqlParameter("@mode", "SaveAsDraftUpdate"));
        }

        return ExecuteDataTable("Insert_SaveasDraft_Candidate","sp_RecCreateCandidate", "SaveAsDraftINSERT", parameters.ToArray());
    }
    #endregion
    
    #region Task Monitoring
    //Vidhyadhar 27_12_2021
    public void Task_Monitoring_Close_Request_ProjectSchedule(DataTable dtAtt, string toMailIDs, string meetingTitle, string meetingDate, string meetingType, string TaskRefId, string link, string ccEmails, string ExecuterName, string strFilepath, string ActionRemarks)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "Task Closed For -" + meetingTitle + " - " + meetingDate + "";
        try
        {
            strbuild = new StringBuilder();
            if (dtAtt.Rows.Count > 0)
            {
                var count = 1;
                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Dear Sir/Madam </td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>This is informed  you that following task for   <b>" + meetingTitle + "</b> Dated <b>" + meetingDate + "</b> has been closed by " + ExecuterName + "</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("</table>");

                strbuild.Append("<table style='width:100%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Task Reference ID        </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + TaskRefId + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Title </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingTitle + " - " + meetingDate + " </td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Date  </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingDate + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/ Discussion Type </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingType + "</td></tr>");

                strbuild.Append("<tr><td width:'25%' style='width:25%;vertical-align:top;'>Remarks </td><td width:'1%' style='width:1%;vertical-align:top;'>:</td><td width:'74%' style='width:74%'> " + ActionRemarks + "</td></tr>");

                strbuild.Append("<tr style='height:20px;'><td width:'25%' style='width:25%'></td><td width:'1%' style='width:1%'></td><td width:'74%' style='width:74%'></td></tr>");
                strbuild.Append("</table>");


                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;border-collapse: collapse !important;border: 1px solid black;'>");
                strbuild.Append("<tr style='text-align:left !important;height:50px;border: 1px solid black;'><th style='border: 1px solid black;'>Task ID</th><th style='border: 1px solid black;'>Task Creation Date</th><th style='border: 1px solid black;'>Task Description</th><th style='border: 1px solid black;'>Project / Location</th><th style='border: 1px solid black;'>Task Executor</th><th style='border: 1px solid black;'>Task Supervisor</th><th style='border: 1px solid black;'>Task Due Date</th></tr>");
                for (int irow = 0; irow < dtAtt.Rows.Count; irow++)
                {
                    strbuild.Append("<tr style='text-align:left !important;border: 1px solid black;'>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_ID"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Created_On"]).Trim() + "</td>");
                    strbuild.Append("<td width:'25%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_Description"]).Trim() + "</td>");
                    strbuild.Append("<td width:'25%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["ProjectLocation"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Executer"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Supervisor"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["DueDate"]).Trim() + "</td>");
                    strbuild.Append("</tr>");
                    count++;
                }
                strbuild.Append("</table>");
                sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), strFilepath, ccEmails);
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    public void Task_Monitoring_Executer_Cancel(DataTable dtAtt, string toMailIDs, string meetingTitle, string meetingDate, string meetingType, string TaskRefId, string link, string ccEmails, string CreatedBy)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "Task Cancelled for -" + meetingTitle + " - " + meetingDate + "";
        try
        {
            strbuild = new StringBuilder();
            if (dtAtt.Rows.Count > 0)
            {
                var count = 1;
                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Dear Sir/Madam </td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>This is to inform you that <b>" + CreatedBy + "</b> has cancelled the following task for <b>" + meetingTitle + "</b> dated <b>" + meetingDate + "</b>. Please find below the details of the task for your reference.</b></td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("</table>");

                strbuild.Append("<table style='width:100%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Task Reference ID        </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + TaskRefId + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Title </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingTitle + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Date  </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingDate + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/ Discussion Type </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingType + "</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td width:'25%' style='width:25%'></td><td width:'1%' style='width:1%'></td><td width:'74%' style='width:74%'></td></tr>");
                strbuild.Append("</table>");


                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;border-collapse: collapse !important;border: 1px solid black;'>");
                strbuild.Append("<tr style='text-align:left !important;height:50px;border: 1px solid black;'><th style='border: 1px solid black;'>Task ID</th><th style='border: 1px solid black;'>Task Creation Date</th><th style='border: 1px solid black;'>Task Description</th><th style='border: 1px solid black;'>Project / Location</th><th style='border: 1px solid black;'>Task Executor</th><th style='border: 1px solid black;'>Task Supervisor</th><th style='border: 1px solid black;'>Task Due Date</th></tr>");
                for (int irow = 0; irow < dtAtt.Rows.Count; irow++)
                {
                    strbuild.Append("<tr style='text-align:left !important;border: 1px solid black;'>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_ID"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Created_On"]).Trim() + "</td>");
                    strbuild.Append("<td width:'25%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_Description"]).Trim() + "</td>");
                    strbuild.Append("<td width:'25%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["ProjectLocation"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Executer"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Supervisor"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["DueDate"]).Trim() + "</td>");
                    strbuild.Append("</tr>");
                    count++;
                }
                strbuild.Append("</table>");
                sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccEmails);
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    public DataSet getTaskMonitoringDDL(string empCode, double TaskRefID, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@EmpCode", empCode),
            new SqlParameter("@Task_Ref_Id", TaskRefID),
            new SqlParameter("@qtype", qtype)
        };
        return ExecuteDataSet("getTaskMonitoringDDL","SP_TASK_M_DETAILS", qtype, parameters);
    }
    public DataSet getTaskDetailsById(string empCode, double TaskRefID, double TaskId, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@EmpCode", empCode),
            new SqlParameter("@Task_Ref_Id", TaskRefID),
            new SqlParameter("@Task_Id", TaskId),
            new SqlParameter("@qtype", qtype)
        };
        return ExecuteDataSet("getTaskDetailsById","SP_TASK_M_DETAILS", qtype, parameters);
    }
    public DataTable getTempAttendee(string qtype, string empCode, double Task_Ref_Id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Task_Ref_Id", Task_Ref_Id),
            new SqlParameter("@EmpCode", empCode)
        };
        return ExecuteDataTable("getTempAttendee","SP_TASK_M_DETAILS", qtype, parameters);
    }
    public DataTable getTaskInboxCount(string qtype, string sp_Name, string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@EmpCode", empCode)
        };
        return ExecuteDataTable("getTaskInboxCount",sp_Name, qtype, parameters);
    }
    public bool InsertUpdateTempAttendee(int id, int Task_Ref_Id, string qtype, string emp_code, string createdBy, bool IsOrganizer)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", id),
            new SqlParameter("@Task_Ref_Id", Task_Ref_Id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@CreatedBy", createdBy),
            new SqlParameter("@IsOrganizer", IsOrganizer)
        };
        var status = ExecuteNonQuery("InsertUpdateTempAttendee","SP_TASK_M_DETAILS", qtype, parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool DeleteAttendeeDetails(double id, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", id)
        };
        var status = ExecuteNonQuery("DeleteAttendeeDetails","SP_TASK_M_DETAILS", qtype, parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public object InsertUpdateTaskDetails(int id, double Task_Ref_Id, string qtype, string emp_code, string createdBy, string mettingTitle, string mettingDate, int mettingTypeId, bool IsOnlyInformation, double OldTaskRefId, string TaskSupervisor, string TaskExecutor, string TaskDescripation, string TaskRemark, string DueDate, string FilePath, bool ReminderBeforDueDate, int ReminderBeforDay, bool IsEscalationEmail, int EscalationEmailDay, bool IsRepeatedEmail, double TempTaskRefId, string ProjectLocation, int storeValue)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", id),
            new SqlParameter("@Task_Ref_Id", Task_Ref_Id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@CreatedBy", createdBy),
            new SqlParameter("@mettingTitle", mettingTitle),
            new SqlParameter("@mettingDate", mettingDate),
            new SqlParameter("@mettingTypeId", mettingTypeId),
            new SqlParameter("@OldTaskRefId", OldTaskRefId),
            new SqlParameter("@TaskSupervisor", TaskSupervisor),
            new SqlParameter("@TaskExecutor", TaskExecutor),
            new SqlParameter("@TaskDescripation", TaskDescripation),
            new SqlParameter("@TaskRemark", TaskRemark),
            new SqlParameter("@DueDate", DueDate),
            new SqlParameter("@FilePath", FilePath),
            new SqlParameter("@ReminderBeforDueDate", ReminderBeforDueDate),
            new SqlParameter("@ReminderBeforDay", ReminderBeforDay),
            new SqlParameter("@IsEscalationEmail", IsEscalationEmail),
            new SqlParameter("@EscalationEmailDay", EscalationEmailDay),
            new SqlParameter("@IsRepeatedEmail", IsRepeatedEmail),
            new SqlParameter("@IsOnlyInformation", IsOnlyInformation),
            new SqlParameter("@Task_Ref_Id_Temp", TempTaskRefId),
            new SqlParameter("@comp_code", ProjectLocation),
            new SqlParameter("@isactive", storeValue)
        };
        var status = ExecuteScalar("InsertUpdateTaskDetails","SP_TASK_M_DETAILS", qtype, parameters);
        return status;
    }
    public bool UpdateDueDateChangeStatus(double id, string qtype, string CreatedBy, string TaskRemark, bool IsApprove, string TaskExecutor)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", id),
            new SqlParameter("@TaskRemark", TaskRemark),
            new SqlParameter("@CreatedBy", CreatedBy),
            new SqlParameter("@IsApprove", IsApprove),
            new SqlParameter("@TaskExecutor", TaskExecutor)
        };
        var status = ExecuteNonQuery("UpdateDueDateChangeStatus","SP_TASK_M_DETAILS", qtype, parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    //report
    public DataSet getTaskMonitoringReport(string qtype, string empCode, double TaskRefID, double TaskId)
    {
        var parameters = new[]
        {
            new SqlParameter("@EmpCode", empCode),
            new SqlParameter("@Task_Ref_Id", TaskRefID),
            new SqlParameter("@Task_Id", TaskId),
            new SqlParameter("@qtype", qtype)
        };
        return ExecuteDataSet("getTaskMonitoringReport", "SP_TASK_M_Report", qtype, parameters);
    }
    public DataSet getTaskMonitoringReport(string qtype, string empCode, double TaskRefID, double TaskId, string Task_Executer)
    {
        var parameters = new[]
        {
            new SqlParameter("@EmpCode", empCode),
            new SqlParameter("@Task_Executer", Task_Executer),
            new SqlParameter("@Task_Ref_Id", TaskRefID),
            new SqlParameter("@Task_Id", TaskId),
            new SqlParameter("@qtype", qtype),
        };
        return ExecuteDataSet("getTaskMonitoringReport","SP_TASK_M_Report", qtype, parameters);
    }
    //Sending Email 
    public void Task_Monitoring_All_Attendee(DataTable dtAtt, string toMailIDs, string meetingTitle, string meetingDate, string meetingType, string TaskRefId, string ccEmails)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "Task Monitoring - " + meetingTitle + " - " + meetingDate + "";
        //try
        //{
        strbuild = new StringBuilder();
        if (dtAtt.Rows.Count > 0)
        {
            var count = 1;
            strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'>");
            strbuild.Append("<tr style='height:20px;'><td colspan='5'>Dear Sir/Madam </td></tr>");
            strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
            strbuild.Append("<tr style='height:20px;'><td colspan='5'>Following is the list of task for <b>" + meetingTitle + "</b> Dated <b>" + meetingDate + "</b></td></tr>");
            strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
            strbuild.Append("</table>");

            strbuild.Append("<table style='width:100%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
            strbuild.Append("<tr><td width:'25%' style='width:25%'>Task Reference ID        </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + TaskRefId + "</td></tr>");
            strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Title </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingTitle + "</td></tr>");
            strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Date  </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingDate + "</td></tr>");
            strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/ Discussion Type </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingType + "</td></tr>");
            strbuild.Append("<tr style='height:20px;'><td width:'25%' style='width:25%'></td><td width:'1%' style='width:1%'></td><td width:'74%' style='width:74%'></td></tr>");
            strbuild.Append("</table>");

            strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;border-collapse: collapse !important;border: 1px solid black;'>");
            strbuild.Append("<tr style='text-align:left !important;height:50px;border: 1px solid black;'><th style='border: 1px solid black;'>Task ID</th><th style='border: 1px solid black;'>Task Creation Date</th><th style='border: 1px solid black;'>Task Description</th><th style='border: 1px solid black;'>Project / Location</th><th style='border: 1px solid black;'>Task Executor</th><th style='border: 1px solid black;'>Task Supervisor</th><th style='border: 1px solid black;'>Task Due Date</th></tr>");
            for (int irow = 0; irow < dtAtt.Rows.Count; irow++)
            {
                strbuild.Append("<tr style='text-align:left !important;border: 1px solid black;'>");
                strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_ID"]).Trim() + "</td>");
                strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Created_On"]).Trim() + "</td>");
                strbuild.Append("<td width:'25%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_Description"]).Trim() + "</td>");
                strbuild.Append("<td width:'25%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["ProjectLocation"]).Trim() + "</td>");
                strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Executer"]).Trim() + "</td>");
                strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Supervisor"]).Trim() + "</td>");
                strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["DueDate"]).Trim() + "</td>");
                strbuild.Append("</tr>");
                count++;
            }
            strbuild.Append("</table>");
            sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccEmails);
        }
        //}
        //catch (Exception)
        //{

        //throw;
        //}

    }
    public void Task_Monitoring_Executer(DataTable dtAtt, string toMailIDs, string meetingTitle, string meetingDate, string meetingType, string TaskRefId, string link, string ccEmails)
    {
        MailMessage mail = new MailMessage();
        SmtpClient SmtpServer = new SmtpClient();
        StringBuilder strbuild = new StringBuilder();
        DataTable dt_emp = new DataTable();
        var strsubject = "Task Assignment For -" + meetingTitle + " - " + meetingDate + "";
        //try
        //{
        strbuild = new StringBuilder();
        if (dtAtt.Rows.Count > 0)
        {
            var count = 1;
            strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'>");
            strbuild.Append("<tr style='height:20px;'><td colspan='5'>Dear Sir/Madam </td></tr>");
            strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
            strbuild.Append("<tr style='height:20px;'><td colspan='5'>Following is the list of task assigned to you in <b>" + meetingTitle + "</b> Dated <b>" + meetingDate + "</b> You can record your action <a href='" + link + "'> here</a>.</td></tr>");
            strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
            strbuild.Append("</table>");

            strbuild.Append("<table style='width:100%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
            strbuild.Append("<tr><td width:'25%' style='width:25%'>Task Reference ID        </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + TaskRefId + "</td></tr>");
            strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Title </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingTitle + "</td></tr>");
            strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Date  </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingDate + "</td></tr>");
            strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/ Discussion Type </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingType + "</td></tr>");
            strbuild.Append("<tr style='height:20px;'><td width:'25%' style='width:25%'></td><td width:'1%' style='width:1%'></td><td width:'74%' style='width:74%'></td></tr>");
            strbuild.Append("</table>");


            strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;border-collapse: collapse !important;border: 1px solid black;'>");
            strbuild.Append("<tr style='text-align:left !important;height:50px;border: 1px solid black;'><th style='border: 1px solid black;'>Task ID</th><th style='border: 1px solid black;'>Task Creation Date</th><th style='border: 1px solid black;'>Task Description</th><th style='border: 1px solid black;'>Project / Location</th><th style='border: 1px solid black;'>Task Executor</th><th style='border: 1px solid black;'>Task Supervisor</th><th style='border: 1px solid black;'>Task Due Date</th></tr>");
            for (int irow = 0; irow < dtAtt.Rows.Count; irow++)
            {
                strbuild.Append("<tr style='text-align:left !important;border: 1px solid black;'>");
                strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_ID"]).Trim() + "</td>");
                strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Created_On"]).Trim() + "</td>");
                strbuild.Append("<td width:'25%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_Description"]).Trim() + "</td>");
                strbuild.Append("<td width:'25%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["ProjectLocation"]).Trim() + "</td>");
                strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Executer"]).Trim() + "</td>");
                strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Supervisor"]).Trim() + "</td>");
                strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["DueDate"]).Trim() + "</td>");
                strbuild.Append("</tr>");
                count++;
            }
            strbuild.Append("</table>");
            sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccEmails);
        }
        //}
        //catch (Exception)
        //{

        //throw;
        //}

    }
    public void Task_Monitoring_Executer_Assgine(DataTable dtAtt, string toMailIDs, string meetingTitle, string meetingDate, string meetingType, string TaskRefId, string link, string ccEmails, string ActionRemarks)
    {
        MailMessage mail = new MailMessage();
        SmtpClient SmtpServer = new SmtpClient();
        StringBuilder strbuild = new StringBuilder();
        DataTable dt_emp = new DataTable();
        var strsubject = "Task Assigned For -" + meetingTitle + " - " + meetingDate + "";
        try
        {
            strbuild = new StringBuilder();
            if (dtAtt.Rows.Count > 0)
            {
                var count = 1;
                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Dear Sir/Madam </td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Following is the task assigned to you in <b>" + meetingTitle + "</b> Dated <b>" + meetingDate + "</b> You can record your action <a href='" + link + "'> here</a>.</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("</table>");

                strbuild.Append("<table style='width:100%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Task Reference ID        </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + TaskRefId + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Title </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingTitle + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Date  </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingDate + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/ Discussion Type </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingType + "</td></tr>");

                strbuild.Append("<tr><td width:'25%' style='width:25%;vertical-align:top;'>Remarks</td><td width:'1%;vertical-align:top;' style='width:1;vertical-align:top;%'>:</td><td width:'74%' style='width:74%'> " + ActionRemarks + "</td></tr>");

                strbuild.Append("<tr style='height:20px;'><td width:'25%' style='width:25%'></td><td width:'1%' style='width:1%'></td><td width:'74%' style='width:74%'></td></tr>");
                strbuild.Append("</table>");


                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;border-collapse: collapse !important;border: 1px solid black;'>");
                strbuild.Append("<tr style='text-align:left !important;height:50px;border: 1px solid black;'><th style='border: 1px solid black;'>Task ID</th><th style='border: 1px solid black;'>Task Creation Date</th><th style='border: 1px solid black;'>Task Description</th><th style='border: 1px solid black;'>Project / Location</th><th style='border: 1px solid black;'>Task Executor</th><th style='border: 1px solid black;'>Task Supervisor</th><th style='border: 1px solid black;'>Task Due Date</th></tr>");
                for (int irow = 0; irow < dtAtt.Rows.Count; irow++)
                {
                    strbuild.Append("<tr style='text-align:left !important;border: 1px solid black;'>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_ID"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Created_On"]).Trim() + "</td>");
                    strbuild.Append("<td width:'25%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_Description"]).Trim() + "</td>");
                    strbuild.Append("<td width:'25%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["ProjectLocation"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Executer"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Supervisor"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["DueDate"]).Trim() + "</td>");
                    strbuild.Append("</tr>");
                    count++;
                }
                strbuild.Append("</table>");
                sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccEmails);
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    public void Task_Monitoring_Executer_Re_Assgine(DataTable dtAtt, string toMailIDs, string meetingTitle, string meetingDate, string meetingType, string TaskRefId, string link, string ccEmails, string getCurrent_remark)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "Task Re-assigned For -" + meetingTitle + " - " + meetingDate + "";
        try
        {
            strbuild = new StringBuilder();
            if (dtAtt.Rows.Count > 0)
            {
                var count = 1;
                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Dear Sir/Madam </td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Following is the task re-assigned to you in <b>" + meetingTitle + "</b> Dated <b>" + meetingDate + "</b> You can record your action <a href='" + link + "'> here</a>.</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("</table>");

                strbuild.Append("<table style='width:100%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Task Reference ID        </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + TaskRefId + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Title </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingTitle + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Date  </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingDate + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/ Discussion Type </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingType + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%;vertical-align:top;'>Remark </td><td width:'1%;vertical-align:top;' style='width:1%;vertical-align:top;'>:</td><td width:'74%' style='width:74%'> " + getCurrent_remark + "</td></tr>");

                strbuild.Append("<tr style='height:20px;'><td width:'25%' style='width:25%'></td><td width:'1%' style='width:1%'></td><td width:'74%' style='width:74%'></td></tr>");
                strbuild.Append("</table>");


                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;border-collapse: collapse !important;border: 1px solid black;'>");
                strbuild.Append("<tr style='text-align:left !important;height:50px;border: 1px solid black;'><th style='border: 1px solid black;'>Task ID</th><th style='border: 1px solid black;'>Task Creation Date</th><th style='border: 1px solid black;'>Task Description</th><th style='border: 1px solid black;'>Project / Location</th><th style='border: 1px solid black;'>Task Executor</th><th style='border: 1px solid black;'>Task Supervisor</th><th style='border: 1px solid black;'>Task Due Date</th></tr>");
                for (int irow = 0; irow < dtAtt.Rows.Count; irow++)
                {
                    strbuild.Append("<tr style='text-align:left !important;border: 1px solid black;'>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_ID"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Created_On"]).Trim() + "</td>");
                    strbuild.Append("<td width:'25%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_Description"]).Trim() + "</td>");
                    strbuild.Append("<td width:'25%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["ProjectLocation"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Executer"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Supervisor"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["DueDate"]).Trim() + "</td>");
                    strbuild.Append("</tr>");
                    count++;
                }
                strbuild.Append("</table>");
                sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccEmails);
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    public DataTable getTempIntimation(string qtype, string empCode, double Task_Ref_Id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Task_Ref_Id", Task_Ref_Id),
            new SqlParameter("@EmpCode", empCode)
        };
        return ExecuteDataTable("getTempIntimation","SP_TASK_M_DETAILS", qtype, parameters);
    }
    public bool DeleteTaskIntimationDetails(double id, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", id)
        };
        var status = ExecuteNonQuery("DeleteTaskIntimationDetails","SP_TASK_M_DETAILS", qtype, parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public void Task_Monitoring_Close_Request_Approve(DataTable dtAtt, string toMailIDs, string meetingTitle, string meetingDate, string meetingType, string TaskRefId, string link, string ccEmails, string getCurrent_remark)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "Task Closure Request Approved For -" + meetingTitle + " - " + meetingDate + "";
        try
        {
            strbuild = new StringBuilder();
            if (dtAtt.Rows.Count > 0)
            {
                var count = 1;
                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Dear Sir/Madam </td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Task closure request is approved for the following task in  <b>" + meetingTitle + "</b> Dated <b>" + meetingDate + "</b></td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("</table>");

                strbuild.Append("<table style='width:100%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Task Reference ID        </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + TaskRefId + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Title </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingTitle + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Date  </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingDate + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/ Discussion Type </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingType + "</td></tr>");
                strbuild.Append("<tr><td style='width:25%; vertical-align:top;'>Remarks</td><td style='width:1%; vertical-align:top;'>:</td><td style='width:74%'>" + getCurrent_remark + "</td></tr>");

                // strbuild.Append("<tr><td width:'25%' style='width:25%'>Remark </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + getCurrent_remark + "</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td width:'25%' style='width:25%'></td><td width:'1%' style='width:1%'></td><td width:'74%' style='width:74%'></td></tr>");
                strbuild.Append("</table>");


                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;border-collapse: collapse !important;border: 1px solid black;'>");
                strbuild.Append("<tr style='text-align:left !important;height:50px;border: 1px solid black;'><th style='border: 1px solid black;'>Task ID</th><th style='border: 1px solid black;'>Task Creation Date</th><th style='border: 1px solid black;'>Task Description</th><th style='border: 1px solid black;'>Project / Location</th><th style='border: 1px solid black;'>Task Executor</th><th style='border: 1px solid black;'>Task Supervisor</th><th style='border: 1px solid black;'>Task Due Date</th></tr>");
                for (int irow = 0; irow < dtAtt.Rows.Count; irow++)
                {
                    strbuild.Append("<tr style='text-align:left !important;border: 1px solid black;'>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_ID"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Created_On"]).Trim() + "</td>");
                    strbuild.Append("<td width:'25%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_Description"]).Trim() + "</td>");
                    strbuild.Append("<td width:'25%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["ProjectLocation"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Executer"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Supervisor"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["DueDate"]).Trim() + "</td>");
                    strbuild.Append("</tr>");
                    count++;
                }
                strbuild.Append("</table>");
                sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccEmails);
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    public void Task_Monitoring_Close(DataTable dtAtt, string toMailIDs, string meetingTitle, string meetingDate, string meetingType, string TaskRefId, string link, string ccEmails, string ExecutorName, string ActionRemarks)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "Task Closure Request For - " + meetingTitle + " - " + meetingDate + "";
        try
        {
            strbuild = new StringBuilder();
            if (dtAtt.Rows.Count > 0)
            {
                var count = 1;
                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Dear Sir/Madam </td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Following task assigned to <b>" + ExecutorName + "</b> in <b>" + meetingTitle + "</b> - dated <b>" + meetingDate + "</b>, is closed. Please click <a href='" + link + "'> here</a> to view the task.</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("</table>");

                strbuild.Append("<table style='width:100%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Task Reference ID        </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + TaskRefId + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Title </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingTitle + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Date  </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingDate + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/ Discussion Type </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingType + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%;vertical-align:top;'>Remarks </td><td width:'1%;vertical-align:top;' style='width:1%;vertical-align:top;'>:</td><td width:'74%' style='width:74%'> " + ActionRemarks + "</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td width:'25%' style='width:25%'></td><td width:'1%' style='width:1%'></td><td width:'74%' style='width:74%'></td></tr>");
                strbuild.Append("</table>");


                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;border-collapse: collapse !important;border: 1px solid black;'>");
                strbuild.Append("<tr style='text-align:left !important;height:50px;border: 1px solid black;'><th style='border: 1px solid black;'>Task ID</th><th style='border: 1px solid black;'>Task Creation Date</th><th style='border: 1px solid black;'>Task Description</th><th style='border: 1px solid black;'>Project / Location</th><th style='border: 1px solid black;'>Task Executor</th><th style='border: 1px solid black;'>Task Supervisor</th><th style='border: 1px solid black;'>Task Due Date</th></tr>");
                for (int irow = 0; irow < dtAtt.Rows.Count; irow++)
                {
                    strbuild.Append("<tr style='text-align:left !important;border: 1px solid black;'>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_ID"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Created_On"]).Trim() + "</td>");
                    strbuild.Append("<td width:'25%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_Description"]).Trim() + "</td>");
                    strbuild.Append("<td width:'25%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["ProjectLocation"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Executer"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Supervisor"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["DueDate"]).Trim() + "</td>");
                    strbuild.Append("</tr>");
                    count++;
                }
                strbuild.Append("</table>");
                sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccEmails);
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    public void Task_Monitoring_Due_Date_Change(int id, string status, DataTable dtAtt, string toMailIDs, string meetingTitle, string meetingDate, string meetingType, string TaskRefId, string link, string ccEmails, string ExecutorName, string getCurrent_remark)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "Due Date change request for a Task of -" + meetingTitle + " - " + meetingDate + "";
        if (id == 1)
        {
            strsubject = "Due Date change request " + status + " for a Task of-" + meetingTitle + " - " + meetingDate + "";
        }
        try
        {
            strbuild = new StringBuilder();
            if (dtAtt.Rows.Count > 0)
            {
                var count = 1;
                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Dear Sir/Madam </td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                var getStatus = "Requested Due Date";
                if (id == 0)
                {
                    strbuild.Append("<tr style='height:20px;'><td colspan='5'><b>" + ExecutorName + "</b> has requested for a due date change for a task in <b>" + meetingTitle + "</b> - dated <b>" + meetingDate + "</b>. Click <a href='" + link + "'> here</a> for review & action.</td></tr>");
                    //strbuild.Append("<tr style='height:20px;'><td colspan='5'><b>" + ExecutorName + "</b> has requested for a due date change for a task in <b>" + meetingTitle + "</b> - dated <b>" + meetingDate + "</b>.click <a href='" + link + "'> here</a> for review & action .</td></tr>");
                }
                else
                {
                    //strbuild.Append("<tr style='height:20px;'><td colspan='5'>This is to inform you that <b>"+ ExecutorName + "</b> has <b>" + status+"</b> your due date change request for a task in <b>" + meetingTitle + "</b> - dated <b>" + meetingDate + "</b>.click <a href='" + link + "'> here</a> for review & action.</td></tr>");
                    strbuild.Append("<tr style='height:20px;'><td colspan='5'>This is to inform you that <b>" + ExecutorName + "</b> has <b>" + status + "</b> your due date change request for a task in <b>" + meetingTitle + "</b> - dated <b>" + meetingDate + "</b>.</td></tr>");

                    if (status == "Approved")
                    {
                        getStatus = "Approved Due Date";
                    }
                }
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("</table>");

                strbuild.Append("<table style='width:100%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Task Reference ID        </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + TaskRefId + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Title </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingTitle + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/Discussion Date  </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingDate + "</td></tr>");
                strbuild.Append("<tr><td width:'25%' style='width:25%'>Meeting/ Discussion Type </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + meetingType + "</td></tr>");

                //strbuild.Append("<tr><td width:'25%' style='width:25%'>Remarks </td><td width:'1%' style='width:1%'>:</td><td width:'74%' style='width:74%'> " + getCurrent_remark + "</td></tr>");
                strbuild.Append("<tr><td style='width:25%; vertical-align:top;'>Remarks</td><td style='width:1%; vertical-align:top;'>:</td><td style='width:74%'>" + getCurrent_remark + "</td></tr>");

                strbuild.Append("<tr style='height:20px;'><td width:'25%' style='width:25%'></td><td width:'1%' style='width:1%'></td><td width:'74%' style='width:74%'></td></tr>");

                strbuild.Append("</table>");


                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;border-collapse: collapse !important;border: 1px solid black;'>");
                strbuild.Append("<tr style='text-align:left !important;height:50px;border: 1px solid black;'><th style='border: 1px solid black;'>Task ID</th><th style='border: 1px solid black;'>Task Creation Date</th><th style='border: 1px solid black;'>Task Description</th><th style='border: 1px solid black;'>Project / Location</th><th style='border: 1px solid black;'>Task Executor</th><th style='border: 1px solid black;'>Task Supervisor</th><th style='border: 1px solid black;'>Task Due Date</th><th style='border: 1px solid black;'>" + getStatus + "</th></tr>");
                for (int irow = 0; irow < dtAtt.Rows.Count; irow++)
                {
                    strbuild.Append("<tr style='text-align:left !important;border: 1px solid black;'>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_ID"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Created_On"]).Trim() + "</td>");
                    strbuild.Append("<td width:'20%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Task_Description"]).Trim() + "</td>");
                    strbuild.Append("<td width:'20%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["ProjectLocation"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Executer"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["Supervisor"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["DueDate"]).Trim() + "</td>");
                    strbuild.Append("<td width:'15%' style='border: 1px solid black;'>" + Convert.ToString(dtAtt.Rows[irow]["NewDueDate"]).Trim() + "</td>");
                    strbuild.Append("</tr>");
                    count++;
                }
                strbuild.Append("</table>");
                sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccEmails);
            }
        }
        catch (Exception)
        {

            throw;
        }

    }
    public DataSet getPendingTaskList(string empcode)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", "GetPendingTaskList"),
            new SqlParameter("@EmpCode", empcode)
        };
        return ExecuteDataSet("getPendingTaskList","SP_TASK_M_DETAILS_DASHBOARD", "GetPendingTaskList", parameters);
    }
    public DataSet getTaskDetails(string empcode, string LoggedEmpCode, string Type)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", "GetPendingTaskListDetails"),
            new SqlParameter("@EmpCode", empcode),
            new SqlParameter("@LoggedEmpCode", LoggedEmpCode),
            new SqlParameter("@Type", Type)
        };
        return ExecuteDataSet("getTaskDetails","SP_TASK_M_DETAILS_DASHBOARD", "GetPendingTaskListDetails", parameters);
    }
    
    #region Mayur
    public DataSet getTaskExecuterDDL(string empCode, string QType, string TaskId, string TaskRefId, string OldDueDate, string NewDueDate, string Created_By, int ActionStatus, string ActionRemarks, string DueDate, string Executer, string Supervisor,
         string TaskDescription, string TaskRemarks, string SubExecuter, string SubSupervisor, string SubDueDate, bool ReminderBeforeDueDate, int ReminderBeforeDay, bool IsAEsclationMail, int EscalationMailDay,bool IsRepeatedMail, bool IsOnlyInformation)
    {
        var parameters = new[]
        {
            new SqlParameter("@EmpCode", empCode),
            new SqlParameter("@TaskId", TaskId),
            new SqlParameter("@TaskRefId", TaskRefId),
            new SqlParameter("@qtype", QType),
            new SqlParameter("@OldDueDate", OldDueDate),
            new SqlParameter("@NewDueDate", NewDueDate),
            new SqlParameter("@Created_By", Created_By),
            new SqlParameter("@ActionStatus", ActionStatus),
            new SqlParameter("@ActionRemarks", ActionRemarks),
            new SqlParameter("@DueDate", DueDate),
            new SqlParameter("@Executer", Executer),
            new SqlParameter("@Supervisor", Supervisor),
            //new Parameter added for creating sub Task request
            new SqlParameter("@Task_Description", TaskDescription),
            new SqlParameter("@TaskRemarks", TaskRemarks),
            new SqlParameter("@Sub_Executer", SubExecuter),
            new SqlParameter("@Sub_Spervisor", SubSupervisor),
            new SqlParameter("@Sub_DueDate", SubDueDate),
            new SqlParameter("@ReminderBeforDueDate", ReminderBeforeDueDate),
            new SqlParameter("@ReminderBeforDay", ReminderBeforeDay),
            new SqlParameter("@IsEscalationEmail", IsAEsclationMail),
            new SqlParameter("@EscalationEmailDay", EscalationMailDay),
            new SqlParameter("@IsRepeatedEmail", IsRepeatedMail),
            new SqlParameter("@IsOnlyInformation", IsOnlyInformation)
        };
        return ExecuteDataSet("getTaskExecuterDDL","SP_TASK_M_EXECUTER", QType, parameters);

    }
    public void InsertChangeActionRequest(string empCode, string qtype, string TaskId, string TaskRefId, string OldDueDate, string NewDueDate, string Created_By, int ActionStatus, string ActionRemarks, string DueDate, string Executer, string Supervisor,
                                       string TaskDescription, string TaskRemarks, string SubExecuter, string SubSupervisor, string SubDueDate, bool ReminderBeforeDueDate, int ReminderBeforeDay, bool IsAEsclationMail, int EscalationMailDay,
                                       bool IsRepeatedMail, bool IsOnlyInformation, string UpdatedBy, string FilePath)
    {

        var parameters = new[]
       {
            new SqlParameter("@EmpCode", empCode),
            new SqlParameter("@TaskId", TaskId),
            new SqlParameter("@TaskRefId", TaskRefId),
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@OldDueDate", OldDueDate),
            new SqlParameter("@NewDueDate", NewDueDate),
            new SqlParameter("@Created_By", Created_By),
            new SqlParameter("@ActionStatus", ActionStatus),
            new SqlParameter("@ActionRemarks", ActionRemarks),
            new SqlParameter("@DueDate", DueDate),
            new SqlParameter("@Executer", Executer),
            new SqlParameter("@Supervisor", Supervisor),
            //new Parameter added for creating sub Task request
            new SqlParameter("@Task_Description", TaskDescription),
            new SqlParameter("@TaskRemarks", TaskRemarks),
            new SqlParameter("@Sub_Executer", SubExecuter),
            new SqlParameter("@Sub_Spervisor", SubSupervisor),
            new SqlParameter("@Sub_DueDate", SubDueDate),
            new SqlParameter("@ReminderBeforDueDate", ReminderBeforeDueDate),
            new SqlParameter("@ReminderBeforDay", ReminderBeforeDay),
            new SqlParameter("@IsEscalationEmail", IsAEsclationMail),
            new SqlParameter("@EscalationEmailDay", EscalationMailDay),
            new SqlParameter("@IsRepeatedEmail", IsRepeatedMail),
            new SqlParameter("@IsOnlyInformation", IsOnlyInformation),
            new SqlParameter("@Updated_By", UpdatedBy),
            new SqlParameter("@FilePath", FilePath)
        };
        ExecuteNonQuery("InsertChangeActionRequest","SP_TASK_M_EXECUTER", qtype,parameters);
    }

    #endregion

    
    #endregion

    #region InserClearanceFormBG/PDCDetails
    public bool InserClearanceForm_BG_PCD_Details(int ResignationID, int DeptID, string emp_code, string IsBGVerify, string IsPDCVerify)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "InsertExitClearanceBG_PDCDetails"),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@ResignationID", ResignationID),
            new SqlParameter("@ClearanceDeptID", DeptID),
            new SqlParameter("@IsBGVerify", IsBGVerify),
            new SqlParameter("@IsPDCVerify", IsPDCVerify),
        };
        var status = ExecuteNonQuery("InserClearanceForm_BG_PCD_Details","spExitProc_ClearanceForm", "InsertExitClearanceBG_PDCDetails" ,parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    #endregion

    #region GetBG/PDCDetails check
    public DataSet GetBG_PDC_Check(string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "Get_BG_PDC_Check_Details"),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataSet("GetBG_PDC_Check","spExitProc_ClearanceForm", "Get_BG_PDC_Check_Details", parameters);
    }
    #endregion
       
    #region KRA Methods Sanjay
    public DataSet KRA_getEmployeedetails(string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_employee_details"),
            new SqlParameter("@empcode", strempcode)
        };
        return ExecuteDataSet("KRA_getEmployeedetails", "SP_KRA_GETALL_DETAILS", "get_employee_details", parameters);
    }
    public DataSet KRA_getunits()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_unit_list")
        };
        return ExecuteDataSet("KRA_getunits", "SP_KRA_GETALL_DETAILS", "get_unit_list", parameters);
    }
    public DataSet KRA_get_Mesurements_detials_edit(string strempcode, Int32 imeasurementId)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_measurements_details_edit"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@Measurement_id", imeasurementId)
        };
        return ExecuteDataSet("KRA_get_Mesurements_detials_edit", "SP_KRA_GETALL_DETAILS", "get_measurements_details_edit", parameters);
    }
    public DataSet get_KRA_Approver_List(Int32 iperiodid, string sAppr_empcode, string sptype, decimal dKRA_ID)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", sptype),
            new SqlParameter("@empcode", sAppr_empcode),
            new SqlParameter("@period_id", iperiodid),
            new SqlParameter("@KRA_ID", dKRA_ID)
        };
        return ExecuteDataSet("get_KRA_Approver_List", "SP_KRA_GETALL_DETAILS", sptype, parameters);
    }
    public DataSet KRA_getEmployeedetails_KRA(decimal dKRA_ID)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_employee_details_KRA"),
            new SqlParameter("@KRA_ID", dKRA_ID)
        };
        return ExecuteDataSet("KRA_getEmployeedetails_KRA", "SP_KRA_GETALL_DETAILS", "get_employee_details_KRA", parameters);
    }
    public void KRA_insert_NextApprover_details(double dKRA_ID, string sappr_empcode, Int32 iappr_id, string saction, string sremarks)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "insert_Next_Approver"),
            new SqlParameter("@KRA_ID", dKRA_ID),
            new SqlParameter("@Approver_emp_code", sappr_empcode),
            new SqlParameter("@Approver_id", iappr_id),
            new SqlParameter("@Action", saction),
            new SqlParameter("@remarks", sremarks),
        };
        ExecuteDataSet("KRA_insert_NextApprover_details", "SP_KRA_Insert_Update", "insert_Next_Approver", parameters);
    }
    public DataTable getPendingKRACount(string sempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Pending_KRA_Count"),
            new SqlParameter("@empcode", sempcode)
        };
        return ExecuteDataTable("getPendingKRACount", "SP_KRA_GETALL_DETAILS", "get_Pending_KRA_Count", parameters);
    }
    public void KRA_insert_CurrentApprover_details(double dKRA_ID, string sappr_empcode, Int32 iappr_id, string saction, string sremarks, Boolean isFinalApprover, string sfileName)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "insert_Current_Approver"),
            new SqlParameter("@KRA_ID", dKRA_ID),
            new SqlParameter("@Approver_emp_code", sappr_empcode),
            new SqlParameter("@Approver_id", iappr_id),
            new SqlParameter("@Action", saction),
            new SqlParameter("@remarks", sremarks),
            new SqlParameter("@IsFinalApprover", isFinalApprover),
            new SqlParameter("@KRAFilePath", sfileName)
        };
        ExecuteDataSet("KRA_insert_CurrentApprover_details", "SP_KRA_Insert_Update", "insert_Current_Approver", parameters);
    }
    public DataTable getLoginEmployeeIsReviewer(string sempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_LoginEmployeeIsReviewer"),
            new SqlParameter("@empcode", sempcode)
        };
        return ExecuteDataTable("getLoginEmployeeIsReviewer", "SP_KRA_GETALL_DETAILS", "get_LoginEmployeeIsReviewer", parameters);
    }
    public DataSet KRA_getRoles(string sempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Roles_list"),
            new SqlParameter("@empcode", sempcode)
        };
        return ExecuteDataSet("KRA_getRoles", "SP_KRA_GETALL_DETAILS", "get_Roles_list", parameters);
    }
    public DataSet KRA_get_Template_Mesurements_detials_edit(string strempcode, Int32 imeasurementId)
    {
        var parameters = new[]
       {
            new SqlParameter("@stype", "get_Template_measurements_details_edit"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@Measurement_id", imeasurementId)
        };
        return ExecuteDataSet("KRA_get_Template_Mesurements_detials_edit", "SP_KRA_GETALL_DETAILS", "get_Template_measurements_details_edit", parameters);
    }
    public DataSet KRA_Insert_Update_Role(string stype, string sroleCreatedBy, string srolename)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@Role_Created_By", sroleCreatedBy),
            new SqlParameter("@Role_Name", srolename)
        };
        return ExecuteDataSet("KRA_Insert_Update_Role", "SP_KRA_Insert_Update", stype, parameters);
    }
    #endregion

    #region WFO/WFH Vidhyadhar
    public DataTable GetApproverStatusWFO(string empcode, string Reqid, int leaveid, string strleavetype, Decimal inoofDays)
    {
        var parameters = new[]
       {
            new SqlParameter("@emp_code", empcode),
            new SqlParameter("@REQID", Convert.ToInt32(Reqid)),
            new SqlParameter("@leaveConditionTypeid", leaveid),
            new SqlParameter("@LeaveType", Convert.ToString(leaveid) == "" ? DBNull.Value : (object)strleavetype),
            new SqlParameter("@noofdays", inoofDays)
       };
        return ExecuteDataTable("GetApproverStatusWFO", "SP_WFO_WFH_GETAPPROVERSTATUS", "", parameters);
    }
    public DataTable GetLeaveTypeOD(string Emp_code, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@EmpCode", Emp_code),
            new SqlParameter("@qtype", qtype)
        };
        return ExecuteDataTable("GetLeaveTypeOD", "SP_WFO_WFH_DETAILS", qtype, parameters);
    }
    public object InsertUpdateWFOWFH(double App_Id, int Appr_id, string qtype, string emp_code, string createdBy, int TypeId, string From_Date, string To_date, string From_Duration, string To_Duration, string Reason, string A_Emp_Code, string City, string Client)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@App_Id", App_Id),
            new SqlParameter("@Appr_id", Appr_id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@TypeId", TypeId),
            new SqlParameter("@From_Date", From_Date),
            new SqlParameter("@To_Date", To_date),
            new SqlParameter("@From_Duration", From_Duration),
            new SqlParameter("@To_Duration", To_Duration),
            new SqlParameter("@A_Emp_Code", A_Emp_Code),
            new SqlParameter("@Created_By", createdBy),
            new SqlParameter("@Reason", Reason),
            new SqlParameter("@City", City),
            new SqlParameter("@Client", Client)
        };
        var status = ExecuteScalar("InsertUpdateWFOWFH", "SP_WFO_WFH_DETAILS", qtype, parameters);
        if (status != null)
        {
            return status;
        }
        else
        {
            return "0";
        }
    }
    public DataTable GetODApplicationInbox(string app_Code, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@A_Emp_Code", app_Code)
        };
        return ExecuteDataTable("GetODApplicationInbox", "SP_WFO_WFH_DETAILS", qtype, parameters);
    }
    public DataSet getODApplicationDetails(string Reqid, string qtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@App_Id", Convert.ToDouble(Reqid))
        };
        return ExecuteDataSet("getODApplicationDetails", "SP_WFO_WFH_DETAILS", qtype, parameters);
    }
    public DataTable GetApproverEmailIDWFO(string empcode, string Grade, int Leaveconditionid, string strleavetype, Decimal inoofdays)
    {
        var parameters = new[]
        {
            new SqlParameter("@Emp_code", empcode),
            new SqlParameter("@Grade", Grade),
            new SqlParameter("@Conditiontype_id", Leaveconditionid),
            new SqlParameter("@LeaveType", strleavetype),
            new SqlParameter("@noofdays", inoofdays)
        };
        return ExecuteDataTable("GetApproverEmailIDWFO", "SP_WFO_WFH_GETREQUESTERAPPMETRIX", "", parameters);
    }
    public DataTable GetNextApproverDetailsWFH(string empcode, double Reqid, int leaveid, string qtype)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@EmpCode", empcode),
            new SqlParameter("@App_Id", Reqid),
            new SqlParameter("@Leavetype_id", leaveid)
        };
        return ExecuteDataTable("GetNextApproverDetailsWFH", "SP_WFO_WFH_DETAILS", qtype, parameters);
    }
    public bool INSERTUPDATEAPP(double App_Id, int Appr_id, string qtype, string emp_code, string createdBy, string Reason, string A_Emp_Code)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@App_Id", App_Id),
            new SqlParameter("@Appr_id", Appr_id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@A_Emp_Code", A_Emp_Code),
            new SqlParameter("@Created_By", createdBy),
            new SqlParameter("@Reason", Reason)
        };
        var status = ExecuteNonQuery("INSERTUPDATEAPP", "SP_WFO_WFH_DETAILS", qtype, parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public DataTable GetDeploymentTypeStatus(string qtype, string Emp_Code, string From_Date)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@EmpCode", Emp_Code),
            new SqlParameter("@From_Date", From_Date)
        };
        return ExecuteDataTable("GetDeploymentTypeStatus", "SP_WFO_WFH_DETAILS", qtype, parameters);
    }
    public void send_mailto_RM_ODApprover(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string ccmailid, string strLeaveReqstURL, string applist, string strinertmediaterList, string ClientName)
    {
        StringBuilder strbuild = new StringBuilder();
        //Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();

        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Emp_Name + " has applied for Outdoor Duty  as per the details below. Request your approval please.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;;font-style:Regular;width:70%'>");
                strbuild.Append("<tr><td>Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
                //strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Client  :</td><td colspan=2> " + ClientName + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'><a herf='InboxLeave_Req.aspx' title='Please click here to review / approve'> Please click here to review / approve</a></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strLeaveReqstURL + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void send_mailto_Next_ApproverWFO(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string applist, string Emp_Name, string strinertmediaterList, string strLeaveReqstURL)
    {
        StringBuilder strbuild = new StringBuilder();
        //string Emp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();

            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td> " + Emp_Name + " has applied for " + tType + " as per the details below and is approved by following. Request your approval please.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;;font-style:Regular>");
                strbuild.Append("<tr><td>Leave Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
                //strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'><a href='" + strLeaveReqstURL + "'> Please click here to review / approve </a></td></tr>");
                strbuild.Append("</table>");
            }
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ReqMailID);
        }
        catch (Exception ex)
        {

        }
    }
    public void send_mailto_RequesterWFH(string ReqMailID, string toMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string AppMailID, string Rej_Remarks, string applist, string Emp_Name, string strinertmediaterList)
    {
        StringBuilder strbuild = new StringBuilder();
        string AppEmp_Name = "";
        //dt_emp = GetEmployeeData_Email(ReqMailID.ToString());
        //Emp_Name = dt_emp.Rows[0]["Emp_Name"].ToString();
        strsubject = strsubject + " of " + Emp_Name;
        //dt_emp = new DataTable();
        //dt_emp = GetEmployeeData_Email(AppMailID.ToString());
        //AppEmp_Name = dt_emp.Columns["Emp_Name"].ToString();
        AppEmp_Name = AppMailID;

        try
        {
            strbuild = new StringBuilder();

            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>This is to inform you that " + AppEmp_Name + " has Approved your below said " + tType + " request.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:70%;color:#000000;font-size:11pt;font-family:Trebuchet MS;;font-style:Regular'>");
                strbuild.Append("<tr><td>Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
                //strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Approver Remarks :</td><td colspan=2> " + Rej_Remarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("</table>");

            }
            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", toMailIDs);
        }
        catch (Exception ex)
        {

        }
    }
    public void send_mail_Rejection_CorrectionWFH(string ReqMailID, string ApprMailIDs, string strsubject, string tType, string tDays, string tRemarks, string tFrom, string tFrom_For, string tTo, string tTo_For, string strcc, string applist, string Emp_Name, string strinertmediaterList)
    {
        StringBuilder strbuild = new StringBuilder();
        strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                if (strsubject.Contains("Rejection"))
                    strbuild.Append("<tr><td> This is to inform you that " + ApprMailIDs + " has <b>Rejected</b> " + tType + " request of " + Emp_Name + " as per the details below. </td></tr>");
                else
                    strbuild.Append("<tr><td> This is to inform you that " + ApprMailIDs + " has sent back the " + tType + " request for correction of " + Emp_Name + " as per the details below. </td></tr>");

                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:70%  'color:#000000;font-size:11pt;font-family:Trebuchet MS;;font-style:Regular'>");
                strbuild.Append("<tr><td>Type :</td><td colspan=2> " + tType + "</td></tr>");
                strbuild.Append("<tr><td>From :</td><td> " + tFrom + " - " + tFrom_For + "</td><td></td></tr>");
                strbuild.Append("<tr><td>To :</td><td> " + tTo + " - " + tTo_For + "</td><td></td></tr>");
                //strbuild.Append("<tr><td>Leave Days :</td><td> " + tDays + "</td></tr>");
                strbuild.Append("<tr><td>Remarks :</td><td colspan=2> " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td>Status :</td><td colspan=2>" + applist + "</td></tr>");
                if (Convert.ToString(strinertmediaterList).Trim() != "")
                    strbuild.Append("<tr><td>For Information To :</td><td colspan=2>" + strinertmediaterList + "</td></tr>");
                strbuild.Append("<tr><td> For your information please.</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", strcc);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region Appointment Latter Bharat 03-06-22
    public DataTable Get_APP_Employee_Details(string qtype, string sp_Name, string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@EmpCode", empCode)
        };
        return ExecuteDataTable("Get_APP_Employee_Details", sp_Name, qtype, parameters);
    }
    public DataTable Get_APP_Approval_Details(string qtype, string sp_Name, string empCode, int Appointment_ID)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@EmpCode", empCode),
            new SqlParameter("@Appointment_ID", Appointment_ID)
        };
        return ExecuteDataTable("Get_APP_Approval_Details", sp_Name, qtype, parameters);
    }
    public void Update_APP_Employee_Details(string qtype, int Appointment_ID, string SignFile, string empCode, int StatusID, string MEmpCode, int Read_Acceptance, string Remark)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@EmpCode", empCode),
            new SqlParameter("@StatusID", StatusID),
            new SqlParameter("@SignFile", SignFile),
            new SqlParameter("@MEmpCode", MEmpCode),
            new SqlParameter("@Read_Acceptance", Read_Acceptance),
            new SqlParameter("@Appointment_ID", Appointment_ID),
            new SqlParameter("@Remark", Remark)
        };
        ExecuteNonQuery("Update_APP_Employee_Details", "SP_APP_Employee_Details", qtype, parameters);
    }
    #endregion

    #region Policies & Document - Chirag
    public DataTable GetDocumentUploadList(int MainDocID)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "SelectDocUploadListForUser"),
            new SqlParameter("@MainDocID", MainDocID == 0 ? DBNull.Value : (object)MainDocID)
        };
        return ExecuteDataTable("GetDocumentUploadList", "sp_DocumentType", "SelectDocUploadListForUser", parameters);
    }
    #endregion

    #region Holiday List - Chirag 29-12-2022
    public DataTable GetHolidayList(string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("GetHolidayList", "spGetHolidayList", "", parameters);
    }
    #endregion

    #region ELC_CandidateDetail
    public void send_mailto_CandidateLoginDetail_ELC(string StrCandidateName, string StrCandidateUserName, string toMailIDs, string strsubject, string StrPassword, string StrmailContain, String StrLink, string emailCC)
    {
        StringBuilder strbuild = new StringBuilder();
        strsubject = strsubject + "  ";
        try
        {
            strbuild = new StringBuilder();
            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td> Dear  " + StrCandidateName + ", </td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Warm wishes from Highbar!. We are happy to have you onboard at earliest</ td></tr>");
            strbuild.Append("<tr><td><b>We request you to complete pre-joining formalities before your Date of Joining. Please provide all required details and documents marked with (*) by clicking on this link and filling up the form</b> <a href='" + StrLink + "'> Please click here to open the form </a></ td></tr>");
            strbuild.Append("<tr><td>Following are your credentials to access this form</ td></tr>");
            strbuild.Append("<tr><td>User Id : " + StrCandidateUserName + "</ td></tr>");
            strbuild.Append("<tr><td>Password : " + StrPassword + "</ td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("</table>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", emailCC);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region CTC Exception Shortlist  Bharat 28-06-22
    public DataTable CTC_Exception_Shortlisting(string QueueType, string Recruitment_ReqID, string Candidate_ID, string EmpCode, int StatusID)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@Recruitment_ReqID", Recruitment_ReqID),
            new SqlParameter("@Candidate_ID", Candidate_ID),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@StatusID", StatusID)
        };
        return ExecuteDataTable("CTC_Exception_Shortlisting", "SP_Shortlisting_CTC_Exception", QueueType, parameters);
    }
    public void Insert_CTC_Exception_ApproverRequest(string QueueType, string apprcode, string Action, int apprid, int MaxRequestId)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@CTCID", MaxRequestId),
            new SqlParameter("@EmpCode", apprcode),
            new SqlParameter("@Action", Action),
            new SqlParameter("@APPR_ID", apprid)
         };
        ExecuteNonQuery("Insert_CTC_Exception_ApproverRequest", "SP_Shortlisting_CTC_Exception", QueueType, parameters);
    }
    public DataTable CTC_Exception_Approval(string QueueType, int Recruitment_ReqID, int Candidate_ID, string EmpCode, int StatusID, int CTCID, int IsException)
    {
        var parameters = new[]
       {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@Recruitment_ReqID", Recruitment_ReqID),
            new SqlParameter("@Candidate_ID", Candidate_ID),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@StatusID", StatusID),
            new SqlParameter("@CTCID", CTCID),
            new SqlParameter("@IsException", IsException)
        };
        return ExecuteDataTable("CTC_Exception_Approval", "SP_Shortlisting_CTC_Exception", QueueType, parameters);
    }
    public void Update_CTC_Exception_ApproverRequest(string QueueType, int Candidate_ID, string apprcode, string Action, int apprid, int MaxRequestId, string finalstatus, string APPComment, int ShortListMain_ID, int IsException)
    {
        var parameters = new List<SqlParameter>
       {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@CTCID", MaxRequestId),
            new SqlParameter("@EmpCode", apprcode),
            new SqlParameter("@Action", Action),
            new SqlParameter("@APPR_ID", apprid),
            new SqlParameter("@APPComment", APPComment),
            new SqlParameter("@Candidate_ID", Candidate_ID),
            new SqlParameter("@ShortListMain_ID", ShortListMain_ID),
            new SqlParameter("@IsException", IsException)
        };
        if (Convert.ToString(finalstatus).Trim() != "")
        {
            parameters.Add(new SqlParameter("@FinalStatus", finalstatus));
        }

        ExecuteNonQuery("Update_CTC_Exception_ApproverRequest", "SP_Shortlisting_CTC_Exception", QueueType, parameters.ToArray());
    }

    #endregion

    #region Salary Status Update - Chirag Bhandari - 01-07-2022
    public DataTable CheckEmpDetailsForSalaryApproval(int RMSalStatusID)
    {
        var parameters = new[]
       {
            new SqlParameter("@Type", "CheckEmpData"),
            new SqlParameter("@RMSalStatusID", RMSalStatusID)
        };
        return ExecuteDataTable("CheckEmpDetailsForSalaryApproval", "spGetEmpDetailsForSalary", "CheckEmpData", parameters);
    }
    public DataTable GetSavedEmpDetailsForSalaryApproval(int RMSalStatusId)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "GetEmpSavedData"),
            new SqlParameter("@RMSalStatusID", RMSalStatusId)
        };
        return ExecuteDataTable("GetSavedEmpDetailsForSalaryApproval", "spGetEmpDetailsForSalary", "GetEmpSavedData", parameters);
    }
    public DataTable getEmpDetailsForSalaryApproval(string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "GetEmpData"),
            new SqlParameter("@RMEMPCode", EmpCode)
        };
        return ExecuteDataTable("getEmpDetailsForSalaryApproval", "spGetEmpDetailsForSalary", "GetEmpData", parameters);
    }
    public bool InsertEmpDataForSalaryApproval(string EMPCode, int SalaryStatus, string Remarks, string MonthAndYear, string RMEMPCode, int RMSalStatusID)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "EmpSaveData"),
            new SqlParameter("@EMPCode", EMPCode),
            new SqlParameter("@SalaryStatus", SalaryStatus),
            new SqlParameter("@Remarks", Remarks),
            new SqlParameter("@MonthAndYear", MonthAndYear),
            new SqlParameter("@RMEmpCode", RMEMPCode),
            new SqlParameter("@RMSalStatusID", RMSalStatusID),
        };
        var status = ExecuteNonQuery("InsertEmpDataForSalaryApproval", "spGetEmpDetailsForSalary", "EmpSaveData", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool InsertRMEmpDataForSalaryApproval(string RMEMPCode, int SalaryStatus, string MonthAndYear)
    {
        var parameters = new[]
       {
            new SqlParameter("@Type", "RMEmpSaveData"),
            new SqlParameter("@RMEmpCode", RMEMPCode),
            new SqlParameter("@SalaryStatus", SalaryStatus),
            new SqlParameter("@MonthAndYear", MonthAndYear)
        };
        var status = ExecuteNonQuery("InsertRMEmpDataForSalaryApproval", "spGetEmpDetailsForSalary", "RMEmpSaveData", parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public DataTable GetProcessedSalary(string EmpCode)
    {
        var parameters = new[]
       {
            new SqlParameter("@Type", "GetProcessedSalary"),
            new SqlParameter("@RMEMPCode", EmpCode)
        };
        return ExecuteDataTable("GetProcessedSalary", "spGetEmpDetailsForSalary", "GetProcessedSalary", parameters);
    }
    public DataSet GetSalaryApprovalReport(string EmpCode, string monthyear, int SalaryStatus)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "GetSalaryApprovalReport"),
            new SqlParameter("@RMEMPCode", EmpCode),
            new SqlParameter("@MonthAndYear", monthyear),
            new SqlParameter("@SalaryStatus", SalaryStatus == 2 ? DBNull.Value : (object)SalaryStatus),
        };
        return ExecuteDataSet("GetSalaryApprovalReport", "spGetEmpDetailsForSalary", "GetSalaryApprovalReport", parameters);
    }
    public DataTable GetPendingSalaryStatusUpdateForRM(string EmpCode)
    {
        var parameters = new[]
       {
            new SqlParameter("@Type", "GetPendingSalaryUpdateDataForRM"),
            new SqlParameter("@RMEMPCode", EmpCode)
        };
        return ExecuteDataTable("GetPendingSalaryStatusUpdateForRM", "spGetEmpDetailsForSalary", "GetPendingSalaryUpdateDataForRM", parameters);
    }
    public DataTable GetEmpDatawithSalStatusId(int RMSalStatusID)
    {
        var parameters = new[]
        {
            new SqlParameter("@Type", "GetEmpDatawithSalStatusId"),
            new SqlParameter("@RMSalStatusID", RMSalStatusID)
        };
        return ExecuteDataTable("GetEmpDatawithSalStatusId", "spGetEmpDetailsForSalary", "GetEmpDatawithSalStatusId", parameters);
    }

    #endregion

    #region OT Request
    public DataTable GetOTRequestEmployeeDetails(string qtype, string Emp_Code, string From_Date, string ToDate)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Emp_Code", Emp_Code),
            new SqlParameter("@FromDate", From_Date),
            new SqlParameter("@ToDate", ToDate)
        };
        return ExecuteDataTable("GetOTRequestEmployeeDetails", "SP_OT_Request_HR", qtype, parameters);
    }
    public object Insert_OT_Request(string qtype, string Emp_Code, string EligibleOTHours, string EligiblePayableOTAmount, string OTAmountToBePaid, string CREATEDBY, string OverallRemarks, string FromDate, string ToDate, string selectedMonth)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Emp_Code", Emp_Code),
            new SqlParameter("@EligibleOTHours", EligibleOTHours),
            new SqlParameter("@EligiblePayableOTAmount", EligiblePayableOTAmount),
            new SqlParameter("@OTAmountToBePaid", OTAmountToBePaid),
            new SqlParameter("@CREATEDBY", CREATEDBY),
            new SqlParameter("@OverallRemarks", OverallRemarks),
            new SqlParameter("@FromDate", FromDate),
            new SqlParameter("@ToDate", ToDate),
            new SqlParameter("@SelectedMonth", selectedMonth)
        };
        var status = ExecuteScalar("Insert_OT_Request", "SP_OT_Request_HR", qtype, parameters);

        if (status != null)
        {
            return status;
        }
        else
        {
            return "0";
        }
    }
    public void BulkInsertToOTRequest(DataTable dataTable)
    {

        SqlConnection scon = new SqlConnection(ConfigurationManager.ConnectionStrings["sqlconnection"].ToString());
        if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
            scon.Open();
        //creating object of SqlBulkCopy  
        SqlBulkCopy objbulk = new SqlBulkCopy(scon);
        //assigning Destination table name  
        objbulk.DestinationTableName = "tbl_OT_Report_Details";
        //Mapping Table column  
        objbulk.ColumnMappings.Add("App_Id", "App_Id");
        objbulk.ColumnMappings.Add("Emp_Code", "Emp_Code");
        objbulk.ColumnMappings.Add("Att_Date", "Att_Date");
        objbulk.ColumnMappings.Add("In_Time_Out_Time", "In_Time_Out_Time");
        objbulk.ColumnMappings.Add("In_Out_Status", "In_Out_Status");
        objbulk.ColumnMappings.Add("Leave_Type", "Leave_Type");
        objbulk.ColumnMappings.Add("Leave_Status", "Leave_Status");
        objbulk.ColumnMappings.Add("Reason", "Reason");
        objbulk.ColumnMappings.Add("WorkingHours", "WorkingHours");
        objbulk.ColumnMappings.Add("TotalWorkingHours", "TotalWorkingHours");
        objbulk.ColumnMappings.Add("OverTime", "OverTime");
        objbulk.ColumnMappings.Add("TotalOverTime", "TotalOverTime");
        objbulk.ColumnMappings.Add("Remark", "Remark");
        objbulk.ColumnMappings.Add("CreatedBy", "CreatedBy");
        objbulk.ColumnMappings.Add("CreatedOn", "CreatedOn");
        //inserting bulk Records into DataBase   
        objbulk.WriteToServer(dataTable);
    }
    public DataSet getOTReport(string Reqid, string qtype)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", Convert.ToDouble(Reqid))
        };
        return ExecuteDataSet("getOTReport", "SP_OT_Request_HR", qtype, parameters);
    }
    public void send_mailto_OTReportManager(string StrRMName, string toMailIDs, string strsubject, string StrLink, string employeeName, string month, string ReportingManager)
    {
        StringBuilder strbuild = new StringBuilder();
        strsubject = strsubject + "  ";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td> Dear  " + StrRMName + ", </td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            // strbuild.Append("<tr><td style='height:20px'>To Email :- "+ toMailIDs + "</td></tr>");
            strbuild.Append("<tr><td>Please find below is the link to view & download OT Calculation of  " + employeeName + " for the month of " + month + ".</td></tr>");
            strbuild.Append("<tr><td> This is already reviewed and approved by " + ReportingManager + ".</td></tr>");
            strbuild.Append("<tr><td> <a href='" + StrLink + "'>click here to open the link</a> </td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("</table>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region NEW 
    public DataTable GetPRMForLeaveDetails(string qtype, string Emp_Code)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Emp_Code", Emp_Code)
        };
        return ExecuteDataTable("GetPRMForLeaveDetails", "SP_Admin_Change_PM_Location", qtype, parameters);
    }
    #endregion

    #region New Approver Location
    public DataTable getPaymentVoucher_List_COMP(string empcode, string comp_code)
    {
        var parameters = new[]
       {
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@comp_Code", comp_code),
            new SqlParameter("@stype", "sp_getPaymentVoucher_List_COMP")
        };
        return ExecuteDataTable("getPaymentVoucher_List_COMP", "SP_GETALLreembursement_DETAILS", "sp_getPaymentVoucher_List_COMP", parameters);
    }
    public DataTable GETALLNearByPaymentDetails(string empcode, double rem_Id)
    {
        var parameters = new[]
        {
            new SqlParameter("@empcode", empcode),
            new SqlParameter("@rem_id", rem_Id),
            new SqlParameter("@stype", "GETALLNearByPaymentDetails")
        };
        return ExecuteDataTable("GETALLNearByPaymentDetails", "SP_GETALLNearByPaymentDetails", "GETALLNearByPaymentDetails", parameters);
    }
    public DataTable GeTPaymentVoucherApproverEmailID_Comp(string empcode, string Grade, int Leaveconditionid, Decimal remid, string comp_code, int dept_Id)
    {

        var parameters = new List<SqlParameter>
       {
            new SqlParameter("@Emp_code", empcode),
            new SqlParameter("@Grade", Grade),
            new SqlParameter("@Conditiontype_id", Leaveconditionid),
            new SqlParameter("@Comp_Code", comp_code),
            new SqlParameter("@DeptId", dept_Id)
        };
        if (Convert.ToString(remid).Trim() != "0")
            parameters.Add(new SqlParameter("@rem_id", remid));

        return ExecuteDataTable("GeTPaymentVoucherApproverEmailID_Comp", "SP_GETPAYMENTVOUCHERAPPROVERSEMAIL_COMP", "", parameters.ToArray());
    }
    public DataTable getRMForPaymentCC(string qtype, string emp_name)
    {
        var parameters = new[]
       {
            new SqlParameter("@empcode", emp_name),
            new SqlParameter("@stype", qtype)
        };
        return ExecuteDataTable("getRMForPaymentCC", "SP_GETALLreembursement_DETAILS", qtype, parameters);
    }
    #endregion

    #region Vendor Sub -Con Billing Bharat 24-12-2021
    public DataSet dtPOWoNumberDetails(string QueueType, string EmpCode, int POID)
    {
        var parameters = new[]
       {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@POID", POID)
       };
        return ExecuteDataSet("dtPOWoNumberDetails", "sp_VSCB_CreatePOWO_Users", QueueType, parameters);
    }
    public DataSet Vendor_InvoiceDetails(string QueueType, string EmpCode, int InvoiceID)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@InvoiceID", InvoiceID)
        };
        return ExecuteDataSet("Vendor_InvoiceDetails", "sp_VSCB_CreatePOWO_Users", QueueType, parameters);
    }
    public DataTable dtPOWoCreate(string QueueType, string EmpCode)
    {
        var parameters = new[]
       {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("dtPOWoCreate", "sp_VSCB_CreatePOWO_Users", QueueType, parameters);
    }
    public DataTable dtShowInvoiceDetailsForPayment(string QueueType, string EmpCode, int InvoiceID, int MstoneID)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@InvoiceID", InvoiceID),
            new SqlParameter("@MstoneID", MstoneID)
        };
        return ExecuteDataTable("dtShowInvoiceDetailsForPayment", "sp_VSCB_CreatePOWO_Users", QueueType, parameters);
    }
    public DataTable dtInsert_Payment_Request(string QueueType, string EmpCode, int InvoiceID, int MstoneID, int Payment_ID, string PaymentReqNo, decimal TobePaidAmtWithtax, DateTime PaymentReqDate, int Status_id, int PaymentStatusID, decimal Amt_paid_Account, decimal BalanceAmt, string Ref_PaymentReqNo, string UploadFileNames)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@InvoiceID", InvoiceID),
            new SqlParameter("@MstoneID", MstoneID),
            new SqlParameter("@Payment_ID", Payment_ID),
            new SqlParameter("@PaymentReqNos", PaymentReqNo),
            new SqlParameter("@TobePaidAmtWithtax", TobePaidAmtWithtax),
            new SqlParameter("@PaymentReqDate", PaymentReqDate),
            new SqlParameter("@Status_id", Status_id),
            new SqlParameter("@PaymentStatusID", PaymentStatusID),
            new SqlParameter("@Amt_paid_Account", Amt_paid_Account),
            new SqlParameter("@BalanceAmt", BalanceAmt),
            new SqlParameter("@Ref_PaymentReqNo", Ref_PaymentReqNo),
            new SqlParameter("@UploadFileNames", UploadFileNames)
        };
        return ExecuteDataTable("dtInsert_Payment_Request", "sp_VSCB_CreatePOWO_Users", QueueType, parameters);
    }
    public DataTable Get_Payment_Request_ApproverEmailID(string empcode, string @DeptName, string Tallycode, int Payment_ID, string sPotype)
    {
        var parameters = new[]
        {
            new SqlParameter("@Emp_code", empcode),
            new SqlParameter("@QueueType", "GetPaymentApprovalList"),
            new SqlParameter("@DeptName", DeptName),
            new SqlParameter("@Tallycode", Tallycode),
            new SqlParameter("@Payment_ID", Payment_ID),
            new SqlParameter("@POType", sPotype),
         };
        return ExecuteDataTable("Get_Payment_Request_ApproverEmailID", "SP_VSCB_GETPAYMENT_APPMETRIX", "GetPaymentApprovalList", parameters);
    }
    public DataTable Get_Payment_Request_ApproverList(string empcode, int Payment_ID, string DeptName, string TallyCode, string spotype)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", "GetPaymentApprovalList"),
            new SqlParameter("@Emp_code", empcode),
            new SqlParameter("@Payment_ID", Payment_ID),
            new SqlParameter("@DeptName", DeptName),
            new SqlParameter("@TallyCode", TallyCode),
            new SqlParameter("@POType", spotype)
         };
        return ExecuteDataTable("Get_Payment_Request_ApproverList", "SP_VSCB_GETPAYMENT_APPMETRIX", "GetPaymentApprovalList", parameters);
    }
    public DataTable Get_Payment_Request_Approver_CCmail(string QueueType, string empcode, int Payment_ID, string DeptName, string TallyCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@Emp_code", empcode),
            new SqlParameter("@Payment_ID", Payment_ID),
            new SqlParameter("@DeptName", DeptName),
            new SqlParameter("@TallyCode", TallyCode)
        };
        return ExecuteDataTable("Get_Payment_Request_Approver_CCmail", "SP_VSCB_GETPAYMENT_APPMETRIX", QueueType, parameters);
    }
    public void Insert_Payment_Approver_Request(string apprcode, int apprid, int MaxRequestId)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", "INSERT"),
            new SqlParameter("@Payment_ID", MaxRequestId),
            new SqlParameter("@APPR_EMP_CODE", apprcode),
            new SqlParameter("@Action", "Pending"),
            new SqlParameter("@APPR_ID", apprid)
        };
        ExecuteNonQuery("Insert_Payment_Approver_Request", "SP_VSCB_SAVE_PAYMENT_APPR_STATUS", "INSERT", parameters);
    }
    public void Update_Payment_Request_Apporver(int reqid, string status, string comment, string finalstatus, int apprid)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@QueueType", "UPDATE"),
            new SqlParameter("@Payment_ID", reqid),
            new SqlParameter("@ACTION", status),
            new SqlParameter("@appr_comments", comment),
            new SqlParameter("@APPR_ID", apprid)
         };
        if (Convert.ToString(finalstatus).Trim() != "")
        {
            parameters.Add(new SqlParameter("@finalstatus", finalstatus));
        }

        ExecuteNonQuery("Update_Payment_Request_Apporver", "SP_VSCB_SAVE_PAYMENT_APPR_STATUS", "UPDATE", parameters.ToArray());
    }
    public void send_mailto_VSCB_Payment_Request_Approver(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string TBody, string ccmailid, string strLeaveReqstURL, string applist, string POWONo, string POWOTitle, string POWODate, string POWOType, string VendorName, string POWOAmount_WithTaxes, string POWO_PaidAmount, string POWO_BalAmount, string ProjectName, string InvoiceNo, string InvoiceAmount, string Invoice_BalAmount, string Payment_RequestNo, string Request_Date, string Payment_RequestAmt, string CostCenter, string DirectTax, string DirectTaxPer, string DirectTaxAmount, string PayableAmountIn, string MilestoneNo, string MilestoneName, string MilestAmount, string MilestCGST, string MilestSGST, string MilestIGST, string MilestAmtWithTax, string MilestPyamentStatus, DataSet dsMilestoneList)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild = new StringBuilder();
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td>Dear " + Emp_Name + ",</td></tr>");
                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td> " + TBody + " </td></tr>");
                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:80% !important;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
                strbuild.Append("<tr><td width='30%'>Payment Request No  :</td><td width='70%'>" + Payment_RequestNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Request Date  :</td><td width='70%'>" + Request_Date + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Amount to be paid (with Tax) :</td><td width='70%'>" + Payment_RequestAmt + "</td></tr>");
                strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td width='30%'>Invoice No  :</td><td width='70%'>" + InvoiceNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Invoice Amount  :</td><td width='70%'>" + InvoiceAmount + "</td></tr>");
                if (DirectTax != "")
                {
                    strbuild.Append("<tr><td width='30%'>Direct Tax  :</td><td width='70%'>" + DirectTax + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>DirectTax(%)  :</td><td width='70%'>" + DirectTaxPer + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>Direct Tax Amount  :</td><td width='70%'>" + DirectTaxAmount + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>Payable Amount (with Tax)  :</td><td width='70%'>" + PayableAmountIn + "</td></tr>");
                }
                strbuild.Append("<tr><td width='30%'>Balance Amount  :</td><td width='70%'>" + Invoice_BalAmount + "</td></tr>");

                strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");

                if (dsMilestoneList != null)
                {
                    if (dsMilestoneList.Tables[0].Rows.Count > 0)
                    {
                        strbuild.Append("<tr><td style='height:20px'></td></tr>");
                        strbuild.Append("<tr><td colspan=3>");
                        strbuild.Append("<table cellpadding='5' cellspacing='0' style='font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;'>");
                        strbuild.Append("<tr><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Particular</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount Consumed For Invoice</th>");
                        //<th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Settlement Amount</th>
                        strbuild.Append("<th style='background-color: #C7D3D4;border: 1px solid #ccc'>CGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>SGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>IGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount For Invoice (With Tax)</th>");
                        strbuild.Append("<th style='background-color: #C7D3D4;border: 1px solid #ccc'>Direct Tax Amount</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Payable Amount</th></tr>");
                        for (Int32 irow = 0; irow < dsMilestoneList.Tables[0].Rows.Count; irow++)
                        {
                            strbuild.Append("<tr><td style='width:40%;border: 1px solid #ccc'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["MilestoneName"]).Trim() + " </td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["AmtWithTax"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milesstone_Amt_ForInvoice"]).Trim() + "</td>");
                            //strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milestone_settlementAmt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["CGST_Amt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["SGST_Amt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["IGST_Amt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["MilestoneAmt_WithTax_ForInvoice"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Collect_TDS_Amt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milesstone_PaybleInvoice_Amt"]).Trim() + "</td>");
                        }

                        strbuild.Append("</table>");
                        strbuild.Append("</td></tr>");

                    }
                }

                #region not required
                /* 
                strbuild.Append("<tr><td width='30%'>Milestone No : </td><td width='70%'>" + MilestoneNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Milestone Particulars : </td><td width='70%'>" + MilestoneName + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Milestone Amount : </td><td width='70%'>" + MilestAmount + "</td></tr>");
                if (MilestCGST != "" && MilestCGST != "0.00")
                {
                    strbuild.Append("<tr><td width='30%'>CGST Amount : </td><td width='70%'>" + MilestCGST + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>SGST Amount : </td><td width='70%'> " + MilestSGST + "</td></tr>");
                }
                if (MilestIGST != "" && MilestIGST != "0.00")
                {
                    strbuild.Append("<tr><td width='30%'>IGST Amount : </td><td width='70%'> " + MilestIGST + "</td></tr>");
                }
                strbuild.Append("<tr><td width='30%'>Amount With Tax :</td><td width='70%'>" + MilestAmtWithTax + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Payment Status  :</td><td width='70%'>" + MilestPyamentStatus + "</td></tr>");*/
                #endregion

                strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO No : </td><td width='70%'>" + POWONo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Type : </td><td width='70%'>" + POWOType + "</td></tr>");
                //strbuild.Append("<tr><td width='30%'>PO/ WO Title : </td><td width='70%'>" + POWOTitle + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Date : </td><td width='70%'>" + POWODate + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Vendor Name : </td><td width='70%'> " + VendorName + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Cost Center   :</td><td width='70%'>" + CostCenter + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Amount (With Taxes) :</td><td width='70%'>" + POWOAmount_WithTaxes + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Paid Amount  :</td><td width='70%'>" + POWO_PaidAmount + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Balance Amount  :</td><td width='70%'>" + POWO_BalAmount + "</td></tr>");
                // strbuild.Append("<tr><td width='30%'>Department   :</td><td width='70%'>" + ProjectName + "</td></tr>");

                strbuild.Append("<tr><td colspan=2 style='height:10px;'></td></tr>");
                //strbuild.Append("<tr><td width='30%'>Approval Status :</td><td colspan=2>" + applist + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append(applist);
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                if (strLeaveReqstURL != "")
                {
                    strbuild.Append("<tr><td style='height:30px'><a href='" + strLeaveReqstURL + "' target='_blank'>Please click here to take action on payment request</a></td></tr>");
                }
                //strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr colspan=2 ><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
                strbuild.Append("</table>");
            }
            sendMail_VSCB(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void send_mailto_VSCB_Payment_Request_Next_Approver(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string TBody, string ccmailid, string strLeaveReqstURL, string applist, string POWONo, string POWOTitle, string POWODate, string POWOType, string VendorName, string POWOAmount_WithTaxes, string POWO_PaidAmount, string POWO_BalAmount, string ProjectName, string InvoiceNo, string InvoiceAmount, string Invoice_BalAmount, string Payment_RequestNo, string Request_Date, string Payment_RequestAmt, string CostCenter, string DirectTax, string DirectTaxPer, string DirectTaxAmount, string PayableAmountIn, string MilestoneNo, string MilestoneName, string MilestAmount, string MilestCGST, string MilestSGST, string MilestIGST, string MilestAmtWithTax, string MilestPyamentStatus, DataSet dsMilestoneList)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild = new StringBuilder();
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td>Dear " + Emp_Name + ",</td></tr>");
                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td> " + TBody + "</td></tr>");
                strbuild.Append("<tr><td  style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:80% !important;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
                strbuild.Append("<tr><td width='30%'>Payment Request No  :</td><td width='70%'>" + Payment_RequestNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Request Date  :</td><td width='70%'>" + Request_Date + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Amount to be paid (with Tax) :</td><td width='70%'>" + Payment_RequestAmt + "</td></tr>");
                strbuild.Append("<tr><td style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td width='30%'>Invoice No  :</td><td width='70%'>" + InvoiceNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Invoice Amount  :</td><td width='70%'>" + InvoiceAmount + "</td></tr>");
                if (DirectTax != "")
                {
                    strbuild.Append("<tr><td width='30%'>Direct Tax  :</td><td width='70%'>" + DirectTax + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>DirectTax(%)  :</td><td width='70%'>" + DirectTaxPer + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>Direct Tax Amount  :</td><td width='70%'>" + DirectTaxAmount + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>Payable Amount (with Tax)  :</td><td width='70%'>" + PayableAmountIn + "</td></tr>");

                }
                strbuild.Append("<tr><td width='30%'>Balance Amount  :</td><td width='70%'>" + Invoice_BalAmount + "</td></tr>");
                strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");

                #region not required
                /*strbuild.Append("<tr><td width='30%'>Milestone No : </td><td width='70%'>" + MilestoneNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Milestone Particulars : </td><td width='70%'>" + MilestoneName + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Milestone Amount : </td><td width='70%'>" + MilestAmount + "</td></tr>");

                if (MilestCGST != "" && MilestCGST != "0.00")
                {
                    strbuild.Append("<tr><td width='30%'>CGST Amount : </td><td width='70%'>" + MilestCGST + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>SGST Amount : </td><td width='70%'> " + MilestSGST + "</td></tr>");
                }
                if (MilestIGST != "" && MilestIGST != "0.00")
                {
                    strbuild.Append("<tr><td width='30%'>IGST Amount : </td><td width='70%'> " + MilestIGST + "</td></tr>");
                }
                strbuild.Append("<tr><td width='30%'>Amount With Tax :</td><td width='70%'>" + MilestAmtWithTax + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Payment Status  :</td><td width='70%'>" + MilestPyamentStatus + "</td></tr>");
                */
                #endregion

                if (dsMilestoneList != null)
                {
                    if (dsMilestoneList.Tables[0].Rows.Count > 0)
                    {
                        strbuild.Append("<tr><td style='height:20px'></td></tr>");
                        strbuild.Append("<tr><td colspan=3>");
                        strbuild.Append("<table cellpadding='5' cellspacing='0' style='font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;'>");
                        strbuild.Append("<tr><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Particular</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount Consumed For Invoice</th>");
                        //<th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Settlement Amount</th>
                        strbuild.Append("<th style='background-color: #C7D3D4;border: 1px solid #ccc'>CGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>SGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>IGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount For Invoice (With Tax)</th>");
                        strbuild.Append("<th style='background-color: #C7D3D4;border: 1px solid #ccc'>Direct Tax Amount</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Payable Amount</th></tr>");
                        for (Int32 irow = 0; irow < dsMilestoneList.Tables[0].Rows.Count; irow++)
                        {
                            strbuild.Append("<tr><td style='width:40%;border: 1px solid #ccc'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["MilestoneName"]).Trim() + " </td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["AmtWithTax"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milesstone_Amt_ForInvoice"]).Trim() + "</td>");
                            //strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milestone_settlementAmt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["CGST_Amt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["SGST_Amt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["IGST_Amt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["MilestoneAmt_WithTax_ForInvoice"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Collect_TDS_Amt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milesstone_PaybleInvoice_Amt"]).Trim() + "</td>");
                        }

                        strbuild.Append("</table>");
                        strbuild.Append("</td></tr>");

                    }
                }

                strbuild.Append("<tr><td style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO No : </td><td width='70%'>" + POWONo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Type : </td><td width='70%'>" + POWOType + "</td></tr>");
                //strbuild.Append("<tr><td width='30%'>PO/WO Title : </td><td width='70%'>" + POWOTitle + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Date : </td><td width='70%'>" + POWODate + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Vendor Name : </td><td width='70%'> " + VendorName + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Cost Center   :</td><td width='70%'>" + CostCenter + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Amount (With Taxes) :</td><td width='70%'>" + POWOAmount_WithTaxes + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Paid Amount  :</td><td width='70%'>" + POWO_PaidAmount + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Balance Amount  :</td><td width='70%'>" + POWO_BalAmount + "</td></tr>");
                //strbuild.Append("<tr><td width='30%'>Department   :</td><td width='70%'>" + ProjectName + "</td></tr>");

                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                //strbuild.Append("<tr><td width='30%'>Approval Status :</td><td colspan=2>" + applist + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append(applist);
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                if (strLeaveReqstURL != "")
                {
                    strbuild.Append("<tr><td style='height:30px'><a href='" + strLeaveReqstURL + "' target='_blank'>Please click here to take action on payment request</a></td></tr>");
                }
                //strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr colspan=2 ><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
                strbuild.Append("</table>");
            }
            sendMail_VSCB(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void send_mailto_VSCB_Payment_Request_Account_Approver(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string TBody, string ccmailid, string strLeaveReqstURL, string applist, string POWONo, string POWOTitle, string POWODate, string POWOType, string VendorName, string POWOAmount_WithTaxes, string POWO_PaidAmount, string POWO_BalAmount, string ProjectName, string InvoiceNo, string InvoiceAmount, string Invoice_BalAmount, string Payment_RequestNo, string Request_Date, string Payment_RequestAmt, string AmountpaidAccounts, string BalanceAmount, string CostCenter, string DirectTax, string DirectTaxPer, string DirectTaxAmount, string PayableAmountIn, string MilestoneNo, string MilestoneName, string MilestAmount, string MilestCGST, string MilestSGST, string MilestIGST, string MilestAmtWithTax, string MilestPyamentStatus, DataSet dsMilestoneList)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild = new StringBuilder();
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td>Dear " + Emp_Name + ",</td></tr>");
                //strbuild.Append("<tr><td> This is to inform you that a  new candidate is referred by <b>" + employeeName + "</b>. Please take appropriate action.</td></tr>");
                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td>" + TBody + " </td></tr>");
                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:80% !important;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
                strbuild.Append("<tr><td width='30%'>Payment Request No  :</td><td width='70%'>" + Payment_RequestNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Request Date  :</td><td width='70%'>" + Request_Date + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Amount to be paid (with Tax) :</td><td width='70%'>" + Payment_RequestAmt + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Amount paid by Accounts :</td><td width='70%'>" + AmountpaidAccounts + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Balance Amount :</td><td width='70%'>" + BalanceAmount + "</td></tr>");
                strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td width='30%'>Invoice No  :</td><td width='70%'>" + InvoiceNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Invoice Amount  :</td><td width='70%'>" + InvoiceAmount + "</td></tr>");
                if (DirectTax != "")
                {
                    strbuild.Append("<tr><td width='30%'>Direct Tax  :</td><td width='70%'>" + DirectTax + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>DirectTax(%)  :</td><td width='70%'>" + DirectTaxPer + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>Direct Tax Amount  :</td><td width='70%'>" + DirectTaxAmount + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>Payable Amount (with Tax)  :</td><td width='70%'>" + PayableAmountIn + "</td></tr>");

                }
                strbuild.Append("<tr><td width='30%'>Balance Amount  :</td><td width='70%'>" + Invoice_BalAmount + "</td></tr>");
                strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");

                if (dsMilestoneList != null)
                {
                    if (dsMilestoneList.Tables[0].Rows.Count > 0)
                    {
                        // strbuild.Append("<tr><td style='height:20px'></td></tr>");
                        strbuild.Append("<tr><td colspan=3>");
                        strbuild.Append("<table cellpadding='5' cellspacing='0' style='font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;'>");
                        strbuild.Append("<tr><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Particular</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount Consumed For Invoice</th>");
                        //<th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Settlement Amount</th>
                        strbuild.Append("<th style='background-color: #C7D3D4;border: 1px solid #ccc'>CGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>SGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>IGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount For Invoice (With Tax)</th>");
                        strbuild.Append("<th style='background-color: #C7D3D4;border: 1px solid #ccc'>Direct Tax Amount</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Payable Amount</th></tr>");
                        for (Int32 irow = 0; irow < dsMilestoneList.Tables[0].Rows.Count; irow++)
                        {
                            strbuild.Append("<tr><td style='width:40%;border: 1px solid #ccc'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["MilestoneName"]).Trim() + " </td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["AmtWithTax"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milesstone_Amt_ForInvoice"]).Trim() + "</td>");
                            //strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milestone_settlementAmt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["CGST_Amt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["SGST_Amt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["IGST_Amt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["MilestoneAmt_WithTax_ForInvoice"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Collect_TDS_Amt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milesstone_PaybleInvoice_Amt"]).Trim() + "</td>");
                        }

                        strbuild.Append("</table>");
                        strbuild.Append("</td></tr>");

                    }
                }

                #region not required
                /* strbuild.Append("<tr><td width='30%'>Milestone No : </td><td width='70%'>" + MilestoneNo + "</td></tr>");
                 strbuild.Append("<tr><td width='30%'>Milestone Particulars : </td><td width='70%'>" + MilestoneName + "</td></tr>");
                 strbuild.Append("<tr><td width='30%'>Milestone Amount : </td><td width='70%'>" + MilestAmount + "</td></tr>");
                 if (MilestCGST != "" && MilestCGST != "0.00")
                 {
                     strbuild.Append("<tr><td width='30%'>CGST Amount : </td><td width='70%'>" + MilestCGST + "</td></tr>");
                     strbuild.Append("<tr><td width='30%'>SGST Amount : </td><td width='70%'> " + MilestSGST + "</td></tr>");
                 }
                 if (MilestIGST != "" && MilestIGST != "0.00")
                 {
                     strbuild.Append("<tr><td width='30%'>IGST Amount : </td><td width='70%'> " + MilestIGST + "</td></tr>");
                 }
                 strbuild.Append("<tr><td width='30%'>Amount With Tax :</td><td width='70%'>" + MilestAmtWithTax + "</td></tr>");
                 strbuild.Append("<tr><td width='30%'>Payment Status  :</td><td width='70%'>" + MilestPyamentStatus + "</td></tr>");
                 */
                #endregion

                strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO No : </td><td width='70%'>" + POWONo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Type : </td><td width='70%'>" + POWOType + "</td></tr>");
                //strbuild.Append("<tr><td width='30%'>PO/WO Title : </td><td width='70%'>" + POWOTitle + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Date : </td><td width='70%'>" + POWODate + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Vendor Name : </td><td width='70%'> " + VendorName + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Cost Center   :</td><td width='70%'>" + CostCenter + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Amount (With Taxes) :</td><td width='70%'>" + POWOAmount_WithTaxes + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Paid Amount  :</td><td width='70%'>" + POWO_PaidAmount + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Balance Amount  :</td><td width='70%'>" + POWO_BalAmount + "</td></tr>");
                // strbuild.Append("<tr><td width='30%'>Department   :</td><td width='70%'>" + ProjectName + "</td></tr>");

                strbuild.Append("<tr><td colspan=2 style='height:10px;'></td></tr>");
                //strbuild.Append("<tr><td width='30%'>Approval Status :</td><td colspan=2>" + applist + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append(applist);
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                if (strLeaveReqstURL != "")
                {
                    strbuild.Append("<tr><td style='height:30px'><a href='" + strLeaveReqstURL + "' target='_blank'>Please click here to take action on payment request</a></td></tr>");
                }
                //strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr colspan=2 ><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
                strbuild.Append("</table>");
            }
            sendMail_VSCB(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void send_mail_VSCB_Payment_Rejection_Correction(string Emp_Name, string ReqMailID, string toMailIDs, string Tbody, string strsubject, string ccmailid, string strLeaveReqstURL, string applist, string POWONo, string POWOTitle, string POWODate, string POWOType, string VendorName, string POWOAmount_WithTaxes, string POWO_PaidAmount, string POWO_BalAmount, string ProjectName, string InvoiceNo, string InvoiceAmount, string Invoice_BalAmount, string Payment_RequestNo, string Request_Date, string Payment_RequestAmt, string CostCenter, string DirectTax, string DirectTaxPer, string DirectTaxAmount, string PayableAmountIn, string MilestoneNo, string MilestoneName, string MilestAmount, string MilestCGST, string MilestSGST, string MilestIGST, string MilestAmtWithTax, string MilestPyamentStatus, DataSet dsMilestoneList)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");

                //strbuild.Append("<tr><td> This is to inform you that " + ApprMailIDs + " has <b>Rejected</b> request " + tType + " of " + Emp_Name + " as per the details below. </td></tr>");			
                //strbuild.Append("<tr><td> This is to inform you that " + ApprMailIDs + " has sent back the " + tType + " request for correction . </td></tr>");//of " + Emp_Name + " as per the details below.
                strbuild.Append("<tr><td> " + Tbody + "</td></tr>");
                strbuild.Append("<tr><td style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:80% !important;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
                strbuild.Append("<tr><td width='30%'>Payment Request No  :</td><td width='70%'>" + Payment_RequestNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Request Date  :</td><td width='70%'>" + Request_Date + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Amount to be paid (with Tax) :</td><td width='70%'>" + Payment_RequestAmt + "</td></tr>");
                strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td width='30%'>Invoice No  :</td><td width='70%'>" + InvoiceNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Invoice Amount  :</td><td width='70%'>" + InvoiceAmount + "</td></tr>");
                if (DirectTax != "")
                {
                    strbuild.Append("<tr><td width='30%'>Direct Tax  :</td><td width='70%'>" + DirectTax + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>DirectTax(%)  :</td><td width='70%'>" + DirectTaxPer + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>Direct Tax Amount  :</td><td width='70%'>" + DirectTaxAmount + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>Payable Amount (with Tax)  :</td><td width='70%'>" + PayableAmountIn + "</td></tr>");

                }
                strbuild.Append("<tr><td width='30%'>Balance Amount  :</td><td width='70%'>" + Invoice_BalAmount + "</td></tr>");
                strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");


                if (dsMilestoneList != null)
                {
                    if (dsMilestoneList.Tables[0].Rows.Count > 0)
                    {
                        // strbuild.Append("<tr><td style='height:20px'></td></tr>");
                        strbuild.Append("<tr><td colspan=3>");
                        strbuild.Append("<table cellpadding='5' cellspacing='0' style='font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;'>");
                        strbuild.Append("<tr><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Particular</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount Consumed For Invoice</th>");
                        //<th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Settlement Amount</th>
                        strbuild.Append("<th style='background-color: #C7D3D4;border: 1px solid #ccc'>CGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>SGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>IGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount For Invoice (With Tax)</th>");
                        strbuild.Append("<th style='background-color: #C7D3D4;border: 1px solid #ccc'>Direct Tax Amount</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Payable Amount</th></tr>");
                        for (Int32 irow = 0; irow < dsMilestoneList.Tables[0].Rows.Count; irow++)
                        {
                            strbuild.Append("<tr><td style='width:40%;border: 1px solid #ccc'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["MilestoneName"]).Trim() + " </td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["AmtWithTax"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milesstone_Amt_ForInvoice"]).Trim() + "</td>");
                            //strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milestone_settlementAmt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["CGST_Amt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["SGST_Amt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["IGST_Amt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["MilestoneAmt_WithTax_ForInvoice"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Collect_TDS_Amt"]).Trim() + "</td>");
                            strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milesstone_PaybleInvoice_Amt"]).Trim() + "</td>");
                        }

                        strbuild.Append("</table>");
                        strbuild.Append("</td></tr>");

                    }
                }

                #region not Required
                /*strbuild.Append("<tr><td width='30%'>Milestone No : </td><td width='70%'>" + MilestoneNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Milestone Particulars : </td><td width='70%'>" + MilestoneName + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Milestone Amount : </td><td width='70%'>" + MilestAmount + "</td></tr>");
                if (MilestCGST != "" && MilestCGST != "0.00")
                {
                    strbuild.Append("<tr><td width='30%'>CGST Amount : </td><td width='70%'>" + MilestCGST + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>SGST Amount : </td><td width='70%'> " + MilestSGST + "</td></tr>");
                }
                if (MilestIGST != "" && MilestIGST != "0.00")
                {
                    strbuild.Append("<tr><td width='30%'>IGST Amount : </td><td width='70%'> " + MilestIGST + "</td></tr>");
                }
                strbuild.Append("<tr><td width='30%'>Amount With Tax :</td><td width='70%'>" + MilestAmtWithTax + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Payment Status  :</td><td width='70%'>" + MilestPyamentStatus + "</td></tr>");
                */
                #endregion

                strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO No : </td><td width='70%'>" + POWONo + "</td></tr>");
                //strbuild.Append("<tr><td width='30%'>PO/WO Title : </td><td width='70%'>" + POWOTitle + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Type : </td><td width='70%'>" + POWOType + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Date : </td><td width='70%'>" + POWODate + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Vendor Name : </td><td width='70%'> " + VendorName + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Cost Center   :</td><td width='70%'>" + CostCenter + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Amount (With Taxes) :</td><td width='70%'>" + POWOAmount_WithTaxes + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Paid Amount  :</td><td width='70%'>" + POWO_PaidAmount + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Balance Amount  :</td><td width='70%'>" + POWO_BalAmount + "</td></tr>");
                //strbuild.Append("<tr><td width='30%'>Department   :</td><td width='70%'>" + ProjectName + "</td></tr>");

                strbuild.Append("<tr><td colspan=2 style='height:10px;'></td></tr>");
                //strbuild.Append("<tr><td width='30%'>Approval Status :</td><td colspan=2>" + applist + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append(applist);
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail_VSCB(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);

        }
        catch (Exception ex)
        {

        }
    }
    public void send_mailto_VSCB_Payment_Request_Partial_Payment(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string TBody, string ccmailid, string strLeaveReqstURL, string applist, string POWONo, string POWOTitle, string POWODate, string POWOType, string VendorName, string POWOAmount_WithTaxes, string POWO_PaidAmount, string POWO_BalAmount, string ProjectName, string InvoiceNo, string InvoiceAmount, string Invoice_BalAmount, string Payment_RequestNo, string Request_Date, string Payment_RequestAmt, string AmountpaidAccounts, string BalanceAmount, string OldPayment_RequestNo, string CostCenter, string DirectTax, string DirectTaxPer, string DirectTaxAmount, string PayableAmountIn)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild = new StringBuilder();
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td>Dear " + Emp_Name + ",</td></tr>");
                //strbuild.Append("<tr><td> This is to inform you that a  new candidate is referred by <b>" + employeeName + "</b>. Please take appropriate action.</td></tr>");
                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td>" + TBody + " </td></tr>");
                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:80% !important;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
                strbuild.Append("<tr><td width='30%'>Payment Request No  :</td><td width='70%'>" + Payment_RequestNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Old Payment Request No  :</td><td width='70%'>" + OldPayment_RequestNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Request Date  :</td><td width='70%'>" + Request_Date + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Amount to be paid (with Tax) :</td><td width='70%'>" + Payment_RequestAmt + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Amount paid by Accounts :</td><td width='70%'>" + AmountpaidAccounts + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Balance Amount :</td><td width='70%'>" + BalanceAmount + "</td></tr>");

                strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td width='30%'>Invoice No  :</td><td width='70%'>" + InvoiceNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Invoice Amount  :</td><td width='70%'>" + InvoiceAmount + "</td></tr>");
                if (DirectTax != "")
                {
                    strbuild.Append("<tr><td width='30%'>Direct Tax  :</td><td width='70%'>" + DirectTax + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>DirectTax(%)  :</td><td width='70%'>" + DirectTaxPer + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>Direct Tax Amount  :</td><td width='70%'>" + DirectTaxAmount + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>Payable Amount (with Tax)  :</td><td width='70%'>" + PayableAmountIn + "</td></tr>");

                }
                strbuild.Append("<tr><td width='30%'>Balance Amount  :</td><td width='70%'>" + Invoice_BalAmount + "</td></tr>");
                strbuild.Append("<tr><td style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/WO No : </td><td width='70%'>" + POWONo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/WO Title : </td><td width='70%'>" + POWOTitle + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/WO Date : </td><td width='70%'>" + POWODate + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/WO Type : </td><td width='70%'>" + POWOType + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Vendor Name : </td><td width='70%'> " + VendorName + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Amount (With Taxes) :</td><td width='70%'>" + POWOAmount_WithTaxes + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Paid Amount  :</td><td width='70%'>" + POWO_PaidAmount + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Balance Amount  :</td><td width='70%'>" + POWO_BalAmount + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Department   :</td><td width='70%'>" + ProjectName + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Cost Center   :</td><td width='70%'>" + CostCenter + "</td></tr>");
                //strbuild.Append("<tr><td width='25%'>Status :</td><td colspan=2>" + applist + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                if (strLeaveReqstURL != "")
                {
                    strbuild.Append("<tr><td style='height:30px'><a href='" + strLeaveReqstURL + "' target='_blank'>Please click here to take action on payment request</a></td></tr>");
                }
                //strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr colspan=2 ><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
                strbuild.Append("</table>");
            }
            sendMail_VSCB(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public DataTable GetVSCB_POWONoList(string Emp_Code, string stype)
    {
        var parameters = new[]
       {
            new SqlParameter("@QueueType", stype),
            new SqlParameter("@EmpCode", Emp_Code)
        };
        return ExecuteDataTable("GetVSCB_POWONoList", "sp_VSCB_CreatePOWO_Users", stype, parameters);
    }
    public DataTable GetVSCB_Payment_Request_PendingList(string Emp_Code, string stype, int POID, int Vendor_ID, int InvoiceID, int Payment_ID, int Status_id, string POWODate, string PayementRDates, string PayementAmt, int Dept_ID, string CostCentor, string PaymentReqFromDate, string PaymentReqToDate)
    {
        var parameters = new[]
       {
            new SqlParameter("@QueueType", stype),
            new SqlParameter("@EmpCode", Emp_Code),
            new SqlParameter("@POID", POID),
            new SqlParameter("@Vendor_ID", Vendor_ID),
            new SqlParameter("@InvoiceID", InvoiceID),
            new SqlParameter("@Payment_ID", Payment_ID),
            //new SqlParameter("@Status_id", Status_id),
            new SqlParameter("@POWODates", POWODate),
            //new SqlParameter("@PayementRDates", PayementRDates),
            new SqlParameter("@PayementAmt", PayementAmt),
            new SqlParameter("@Dept_ID", Dept_ID),
            new SqlParameter("@CostCentor", CostCentor),
            new SqlParameter("@PaymentReqFromDate", PaymentReqFromDate),
            new SqlParameter("@PaymentReqToDate", PaymentReqToDate)
         };
        return ExecuteDataTable("GetVSCB_Payment_Request_PendingList", "sp_VSCB_CreatePOWO_Users", stype, parameters);
    }
    public DataTable GetVSCB_Payment_Request_PendingList(string Emp_Code, string stype, int POID, int Vendor_ID, int InvoiceID, int Payment_ID, int Status_id, string POWODate, string PayementRDates, string PayementAmt, int Dept_ID, string CostCentor)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", stype),
            new SqlParameter("@EmpCode", Emp_Code),
            new SqlParameter("@POID", POID),
            new SqlParameter("@Vendor_ID", Vendor_ID),
            new SqlParameter("@InvoiceID", InvoiceID),
            new SqlParameter("@Payment_ID", Payment_ID),
            new SqlParameter("@Status_id", Status_id),
            new SqlParameter("@POWODates", POWODate),
            new SqlParameter("@PayementRDates", PayementRDates),
            new SqlParameter("@PayementAmt", PayementAmt),
            new SqlParameter("@Dept_ID", Dept_ID),
            new SqlParameter("@CostCentor", CostCentor)
         };
        return ExecuteDataTable("GetVSCB_Payment_Request_PendingList", "sp_VSCB_CreatePOWO_Users", stype, parameters);
    }
    public DataSet GetVSCB_Payment_Request_ReportList(string Emp_Code, string stype, string POID, string Vendor_ID, string InvoiceID, string Payment_ID, string Status_id, string POWODate, string PayementRDates, string CostCentor, string Dept_ID, string FromDate, string ToDate)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", stype),
            new SqlParameter("@EmpCode", Emp_Code),
            new SqlParameter("@POID", POID),
            new SqlParameter("@Vendor_ID", Vendor_ID),
            new SqlParameter("@InvoiceID", InvoiceID),
            new SqlParameter("@Payment_ID", Payment_ID),
            new SqlParameter("@Status_id", Status_id),
            new SqlParameter("@POWODates", POWODate),
            new SqlParameter("@PayementRDates", PayementRDates),
            new SqlParameter("@CostCentor", CostCentor),
            new SqlParameter("@Dept_ID", Dept_ID),
            new SqlParameter("@FromDate", FromDate),
            new SqlParameter("@ToDate", ToDate)
        };
        return ExecuteDataSet("GetVSCB_Payment_Request_ReportList", "SP_VSCB_AuditTrai_Report", stype, parameters);
    }
    public DataSet GetVSCB_MyPaymentDetails(string QueueType, string EmpCode, int POID, int Payment_ID)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@POID", POID),
            new SqlParameter("@Payment_ID", Payment_ID)
        };
        return ExecuteDataSet("GetVSCB_MyPaymentDetails", "sp_VSCB_CreatePOWO_Users", QueueType, parameters);
    }
    public int GetPaymentRequest_Pending_InboxList_Count(string stype, string empcode)
    {
        int RequestCount = 0;
        DataTable dtAttlvInbox = new DataTable();

        var parameters = new[]
        {
            new SqlParameter("@QueueType", stype),
            new SqlParameter("@EmpCode", empcode)
        };
        dtAttlvInbox = ExecuteDataTable("GetPaymentRequest_Pending_InboxList_Count", "sp_VSCB_CreatePOWO_Users", stype, parameters);
        if (dtAttlvInbox.Rows.Count > 0)
        {
            RequestCount = (int)dtAttlvInbox.Rows[0]["Paymentcnt"];
        }
        return RequestCount;
    }
    public DataTable GetCurrent_Payment_ApprID(string stype, int Reqid, string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Payment_ID", Reqid),
            new SqlParameter("@QueueType", stype),
            new SqlParameter("@EmpCode", strempcode)
        };
        return ExecuteDataTable("GetCurrent_Payment_ApprID", "sp_VSCB_CreatePOWO_Users", stype, parameters);
    }
    public DataTable GetNext_Payment_Request_ApproverDetails(string QueueType, string empcode, int Payment_ID, string DeptName, string TallyCode, string sPOtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@Emp_code", empcode),
            new SqlParameter("@Payment_ID", Payment_ID),
            new SqlParameter("@DeptName", DeptName),
            new SqlParameter("@TallyCode", TallyCode),
            new SqlParameter("@POType", sPOtype)
        };
        return ExecuteDataTable("GetNext_Payment_Request_ApproverDetails", "SP_VSCB_GETPAYMENT_APPMETRIX", QueueType, parameters);
    }
    public DataTable Get_Payment_AccountApprovalEmp(string QueueType, string empcode, int Payment_ID)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@Emp_code", empcode),
            new SqlParameter("@Payment_ID", Payment_ID)
        };
        return ExecuteDataTable("Get_Payment_AccountApprovalEmp", "SP_VSCB_GETPAYMENT_APPMETRIX", QueueType, parameters);
    }
    public void VSCB_Reject_Payment_Request(string QueueType, int reqid, string emp_code, int apprid, int Status_id, string comments)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@APPR_EMP_CODE", emp_code),
            new SqlParameter("@Payment_ID", reqid),
            new SqlParameter("@APPR_ID", apprid),
            new SqlParameter("@Status_id", Status_id),
            new SqlParameter("@appr_comments", comments),
        };
        ExecuteNonQuery("VSCB_Reject_Payment_Request", "SP_VSCB_SAVE_PAYMENT_APPR_STATUS", QueueType, parameters);
    }
    public DataTable Get_VSCB_Payment_DeleteFile(string QueueType, string empcode, int Payment_ID, string FileName)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@EmpCode", empcode),
            new SqlParameter("@Payment_ID", Payment_ID),
            new SqlParameter("@UploadFileNames", FileName)
        };
        return ExecuteDataTable("Get_VSCB_Payment_DeleteFile", "sp_VSCB_CreatePOWO_Users", QueueType, parameters);
    }
    public DataTable Get_Project_CostCenter(string QueueType, string empcode, string DeptName)
    {
        var parameters = new[]
       {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@Emp_code", empcode),
            new SqlParameter("@DeptName", DeptName)
        };
        return ExecuteDataTable("Get_Project_CostCenter", "SP_VSCB_GETPAYMENT_APPMETRIX", QueueType, parameters);
    }
    public DataTable GetInvoiceTDS_Amt(string QueueType, string empcode, int InvoiceID)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@EmpCode", empcode),
            new SqlParameter("@InvoiceID", InvoiceID)
        };
        return ExecuteDataTable("GetInvoiceTDS_Amt", "sp_VSCB_CreatePOWO_Users", QueueType, parameters);
    }
    
    #region  Vendor Billing Advance Payment  
    public DataTable Insert_Advance_Pay_Request(string QueueType, string EmpCode, int POWOID, int InvoiceID, int AdvancePayTypeID, int Payment_ID, string PaymentReqNo, decimal TobePaidAmtWithtax, DateTime PaymentReqDate, int Status_id, int PaymentStatusID, decimal Amt_paid_Account, decimal BalanceAmt, string Ref_PaymentReqNo, string UploadFileNames, string Remarks, double sAdvamtWithoutGST, string sCGSTAmt, string sSGSTAmt, string sIGSTAmt)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@POID", POWOID),
            new SqlParameter("@InvoiceID", InvoiceID),
            new SqlParameter("@AdvancePayTypeID", AdvancePayTypeID),
            new SqlParameter("@Payment_ID", Payment_ID),
            new SqlParameter("@PaymentReqNos", PaymentReqNo),
            new SqlParameter("@TobePaidAmtWithtax", TobePaidAmtWithtax),
            new SqlParameter("@PaymentReqDate", PaymentReqDate),
            new SqlParameter("@Status_id", Status_id),
            new SqlParameter("@PaymentStatusID", PaymentStatusID),
            new SqlParameter("@Amt_paid_Account", Amt_paid_Account),
            new SqlParameter("@BalanceAmt", BalanceAmt),
            new SqlParameter("@Ref_PaymentReqNo", Ref_PaymentReqNo),
            new SqlParameter("@Remarks", Remarks),
            new SqlParameter("@UploadFileNames", UploadFileNames),
            new SqlParameter("@TobePaidAmtWithOuttax", sAdvamtWithoutGST)
      };

        if (Convert.ToString(sCGSTAmt).Trim() != "")
        {
            parameters.Add(new SqlParameter("@CGST_Amt", Convert.ToDouble(sCGSTAmt)));
        }

        if (Convert.ToString(sCGSTAmt).Trim() != "")
        {
            parameters.Add(new SqlParameter("@SGST_Amt", Convert.ToDouble(sSGSTAmt)));
        }

        if (Convert.ToString(sIGSTAmt).Trim() != "")
        {
            parameters.Add(new SqlParameter("@IGST_Amt", Convert.ToDouble(sIGSTAmt)));
        }
        return ExecuteDataTable("Insert_Advance_Pay_Request", "sp_VSCB_CreatePOWO_Users", QueueType, parameters.ToArray());

    }
    public void send_mailto_VSCB__Advance_Pay_Approver(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string TBody, string ccmailid, string strLeaveReqstURL, string applist, string POWONo, string POWOTitle, string POWODate, string POWOType, string VendorName, string POWOAmount_WithTaxes, string POWO_PaidAmount, string POWO_BalAmount, string ProjectName, string InvoiceNo, string InvoiceAmount, string Invoice_BalAmount, string Payment_RequestNo, string Request_Date, string Payment_RequestAmt, string AdvancePayType, string Remarks, string CostCenter, string DirectTax, string DirectTaxPer, string DirectTaxAmount, string PayableAmountIn, string MilestoneNo, string MilestoneName, string MilestAmount, string MilestCGST, string MilestSGST, string MilestIGST, string MilestAmtWithTax, string MilestPyamentStatus, DataSet dsMilestoneList)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild = new StringBuilder();
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td>Dear " + Emp_Name + ",</td></tr>");
                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td> " + TBody + " </td></tr>");
                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:80% !important;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
                strbuild.Append("<tr><td width='30%'>Payment Request No  :</td><td width='70%'>" + Payment_RequestNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Request Date  :</td><td width='70%'>" + Request_Date + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Payment Amount:</td><td width='70%'>" + Payment_RequestAmt + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Payment Type :</td><td width='70%'>" + AdvancePayType + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Remarks :</td><td width='70%'>" + Remarks + "</td></tr>");
                strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");

                if (dsMilestoneList != null)
                {
                    //if (dsMilestoneList.Tables[0].Rows.Count > 0)
                    //{
                    //	strbuild.Append("<tr><td style='height:20px'></td></tr>");
                    //	strbuild.Append("<tr><td colspan=3>");
                    //	strbuild.Append("<table cellpadding='5' cellspacing='0' style='font-size:11pt;font-family:Arial;font-style:Regular;width:100%;'>");
                    //	strbuild.Append("<tr><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Particular</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount Consumed For Invoice</th>");
                    //	//<th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Settlement Amount</th>
                    //	strbuild.Append("<th style='background-color: #C7D3D4;border: 1px solid #ccc'>CGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>SGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>IGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount For Invoice (With Tax)</th>");
                    //	strbuild.Append("<th style='background-color: #C7D3D4;border: 1px solid #ccc'>Direct Tax Amount</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Payable Amount</th></tr>");
                    //	for (Int32 irow = 0; irow < dsMilestoneList.Tables[0].Rows.Count; irow++)
                    //	{
                    //		strbuild.Append("<tr><td style='width:40%;border: 1px solid #ccc'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["MilestoneName"]).Trim() + " </td>");
                    //		strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["AmtWithTax"]).Trim() + "</td>");
                    //		strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milesstone_Amt_ForInvoice"]).Trim() + "</td>");
                    //		//strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milestone_settlementAmt"]).Trim() + "</td>");
                    //		strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["CGST_Amt"]).Trim() + "</td>");
                    //		strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["SGST_Amt"]).Trim() + "</td>");
                    //		strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["IGST_Amt"]).Trim() + "</td>");
                    //		strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["MilestoneAmt_WithTax_ForInvoice"]).Trim() + "</td>");
                    //		strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Collect_TDS_Amt"]).Trim() + "</td>");
                    //		strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milesstone_PaybleInvoice_Amt"]).Trim() + "</td>");
                    //	}

                    //	strbuild.Append("</table>");
                    //	strbuild.Append("</td></tr>");

                    //}
                }

                strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO No : </td><td width='70%'>" + POWONo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Type : </td><td width='70%'>" + POWOType + "</td></tr>");
                //strbuild.Append("<tr><td width='30%'>PO/ WO Title : </td><td width='70%'>" + POWOTitle + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Date : </td><td width='70%'>" + POWODate + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Vendor Name : </td><td width='70%'> " + VendorName + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Cost Center   :</td><td width='70%'>" + CostCenter + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Amount (With Taxes) :</td><td width='70%'>" + POWOAmount_WithTaxes + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Paid Amount  :</td><td width='70%'>" + POWO_PaidAmount + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Balance Amount  :</td><td width='70%'>" + POWO_BalAmount + "</td></tr>");
                // strbuild.Append("<tr><td width='30%'>Department   :</td><td width='70%'>" + ProjectName + "</td></tr>");

                strbuild.Append("<tr><td colspan=2 style='height:10px;'></td></tr>");
                //strbuild.Append("<tr><td width='30%'>Approval Status :</td><td colspan=2>" + applist + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append(applist);
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                if (strLeaveReqstURL != "")
                {
                    strbuild.Append("<tr><td style='height:30px'><a href='" + strLeaveReqstURL + "' target='_blank'>Please click here to take action on payment request</a></td></tr>");
                }
                strbuild.Append("</table>");
            }
            sendMail_VSCB(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }

    public DataTable Get_Advance_Pay_ApproverEmailID(string QueueType, string empcode, string @DeptName, string Tallycode, int Payment_ID, string sPotype)
    {
        var parameters = new[]
        {
            new SqlParameter("@Emp_code", empcode),
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@DeptName", DeptName),
            new SqlParameter("@Tallycode", Tallycode),
            new SqlParameter("@Payment_ID", Payment_ID),
            new SqlParameter("@POType", sPotype),
        };
        return ExecuteDataTable("Get_Advance_Pay_ApproverEmailID", "SP_VSCB_GETPAYMENT_APPMETRIX", QueueType, parameters);
    }
    public void Insert_Advance_Pay_Approver_Request(string QueueType, string apprcode, int apprid, int MaxRequestId, string Action, string comment, string finalstatus)
    {
        var parameters = new[]
       {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@Payment_ID", MaxRequestId),
            new SqlParameter("@APPR_EMP_CODE", apprcode),
            new SqlParameter("@Action", Action),
            new SqlParameter("@APPR_ID", apprid),
            new SqlParameter("@appr_comments", comment),
            new SqlParameter("@finalstatus", string.IsNullOrWhiteSpace(finalstatus) ? DBNull.Value :(object)finalstatus)
        };

        ExecuteNonQuery("Insert_Advance_Pay_Approver_Request", "SP_VSCB_SAVE_PAYMENT_APPR_STATUS", QueueType, parameters);
    }
    public void send_mailto_VSCB_ADV_Pay_Next_Approver(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string TBody, string ccmailid, string strLeaveReqstURL, string applist, string POWONo, string POWOTitle, string POWODate, string POWOType, string VendorName, string POWOAmount_WithTaxes, string POWO_PaidAmount, string POWO_BalAmount, string ProjectName, string InvoiceNo, string InvoiceAmount, string Invoice_BalAmount, string Payment_RequestNo, string Request_Date, string Payment_RequestAmt, string CostCenter, string DirectTax, string DirectTaxPer, string DirectTaxAmount, string PayableAmountIn, string MilestoneNo, string MilestoneName, string MilestAmount, string MilestCGST, string MilestSGST, string MilestIGST, string MilestAmtWithTax, string MilestPyamentStatus, DataSet dsMilestoneList, string PaymentType, string Remark)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild = new StringBuilder();
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td>Dear " + Emp_Name + ",</td></tr>");
                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td> " + TBody + "</td></tr>");
                strbuild.Append("<tr><td  style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:80% !important;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
                strbuild.Append("<tr><td width='30%'>Payment Request No  :</td><td width='70%'>" + Payment_RequestNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Request Date  :</td><td width='70%'>" + Request_Date + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Advance Payment Amount:</td><td width='70%'>" + Payment_RequestAmt + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Payment Type :</td><td width='70%'>" + PaymentType + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Remark :</td><td width='70%'>" + Remark + "</td></tr>");

                //strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");

                if (dsMilestoneList != null)
                {
                    //if (dsMilestoneList.Tables[0].Rows.Count > 0)
                    //{
                    //strbuild.Append("<tr><td style='height:20px'></td></tr>");
                    //strbuild.Append("<tr><td colspan=3>");
                    //strbuild.Append("<table cellpadding='5' cellspacing='0' style='font-size:11pt;font-family:Arial;font-style:Regular;width:100%;'>");
                    //strbuild.Append("<tr><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Particular</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount Consumed For Invoice</th>");
                    ////<th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Settlement Amount</th>
                    //strbuild.Append("<th style='background-color: #C7D3D4;border: 1px solid #ccc'>CGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>SGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>IGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount For Invoice (With Tax)</th>");
                    //strbuild.Append("<th style='background-color: #C7D3D4;border: 1px solid #ccc'>Direct Tax Amount</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Payable Amount</th></tr>");
                    //for (Int32 irow = 0; irow < dsMilestoneList.Tables[0].Rows.Count; irow++)
                    //{
                    //	strbuild.Append("<tr><td style='width:40%;border: 1px solid #ccc'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["MilestoneName"]).Trim() + " </td>");
                    //	strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["AmtWithTax"]).Trim() + "</td>");
                    //	strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milesstone_Amt_ForInvoice"]).Trim() + "</td>");
                    //	//strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milestone_settlementAmt"]).Trim() + "</td>");
                    //	strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["CGST_Amt"]).Trim() + "</td>");
                    //	strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["SGST_Amt"]).Trim() + "</td>");
                    //	strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["IGST_Amt"]).Trim() + "</td>");
                    //	strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["MilestoneAmt_WithTax_ForInvoice"]).Trim() + "</td>");
                    //	strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Collect_TDS_Amt"]).Trim() + "</td>");
                    //	strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milesstone_PaybleInvoice_Amt"]).Trim() + "</td>");
                    //}

                    //strbuild.Append("</table>");
                    //strbuild.Append("</td></tr>");

                    //}
                }

                strbuild.Append("<tr><td style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO No : </td><td width='70%'>" + POWONo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Type : </td><td width='70%'>" + POWOType + "</td></tr>");
                //strbuild.Append("<tr><td width='30%'>PO/WO Title : </td><td width='70%'>" + POWOTitle + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Date : </td><td width='70%'>" + POWODate + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Vendor Name : </td><td width='70%'> " + VendorName + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Cost Center   :</td><td width='70%'>" + CostCenter + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Amount (With Taxes) :</td><td width='70%'>" + POWOAmount_WithTaxes + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Paid Amount  :</td><td width='70%'>" + POWO_PaidAmount + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Balance Amount  :</td><td width='70%'>" + POWO_BalAmount + "</td></tr>");

                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                strbuild.Append("</table>");
                strbuild.Append(applist);
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                if (strLeaveReqstURL != "")
                {
                    strbuild.Append("<tr><td style='height:30px'><a href='" + strLeaveReqstURL + "' target='_blank'>Please click here to take action on payment request</a></td></tr>");
                }
                strbuild.Append("</table>");
            }
            sendMail_VSCB(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void send_mailto_VSCB_ADV_Pay_Account_Approver(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string TBody, string ccmailid, string strLeaveReqstURL, string applist, string POWONo, string POWOTitle, string POWODate, string POWOType, string VendorName, string POWOAmount_WithTaxes, string POWO_PaidAmount, string POWO_BalAmount, string ProjectName, string InvoiceNo, string InvoiceAmount, string Invoice_BalAmount, string Payment_RequestNo, string Request_Date, string Payment_RequestAmt, string AmountpaidAccounts, string BalanceAmount, string CostCenter, string DirectTax, string DirectTaxPer, string DirectTaxAmount, string PayableAmountIn, string MilestoneNo, string MilestoneName, string MilestAmount, string MilestCGST, string MilestSGST, string MilestIGST, string MilestAmtWithTax, string MilestPyamentStatus, DataSet dsMilestoneList, string PaymentType, string Remark, string DirectName, string DirectTaxName, string DirectTax_Per, string DirectTaxAmt)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild = new StringBuilder();
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td>Dear " + Emp_Name + ",</td></tr>");
                //strbuild.Append("<tr><td> This is to inform you that a  new candidate is referred by <b>" + employeeName + "</b>. Please take appropriate action.</td></tr>");
                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td>" + TBody + " </td></tr>");
                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:80% !important;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
                strbuild.Append("<tr><td width='30%'>Payment Request No  :</td><td width='70%'>" + Payment_RequestNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Request Date  :</td><td width='70%'>" + Request_Date + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Advance Payment Amount :</td><td width='70%'>" + Payment_RequestAmt + "</td></tr>");
                if (Convert.ToString(DirectName) != "0" && Convert.ToString(DirectName) != "1")
                {

                    strbuild.Append("<tr><td width='30%'>Direct Tax  :</td><td width='70%'>" + DirectTaxName + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>Direct Tax(%) :</td><td width='70%'>" + DirectTax_Per + "</td></tr>");
                    strbuild.Append("<tr><td width='30%'>Direct Tax Amount :</td><td width='70%'>" + DirectTaxAmt + "</td></tr>");
                }
                strbuild.Append("<tr><td width='30%'>Amount paid by Accounts :</td><td width='70%'>" + AmountpaidAccounts + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Balance Amount :</td><td width='70%'>" + BalanceAmount + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Payment Type :</td><td width='70%'>" + PaymentType + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Remark :</td><td width='70%'>" + Remark + "</td></tr>");

                // strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");

                if (dsMilestoneList != null)
                {
                    //if (dsMilestoneList.Tables[0].Rows.Count > 0)
                    //{

                    //strbuild.Append("<tr><td colspan=3>");
                    //strbuild.Append("<table cellpadding='5' cellspacing='0' style='font-size:11pt;font-family:Arial;font-style:Regular;width:100%;'>");
                    //strbuild.Append("<tr><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Particular</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount Consumed For Invoice</th>");
                    //strbuild.Append("<th style='background-color: #C7D3D4;border: 1px solid #ccc'>CGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>SGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>IGST Amount </th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Amount For Invoice (With Tax)</th>");
                    //strbuild.Append("<th style='background-color: #C7D3D4;border: 1px solid #ccc'>Direct Tax Amount</th><th style='background-color: #C7D3D4;border: 1px solid #ccc'>Milestone Payable Amount</th></tr>");
                    //for (Int32 irow = 0; irow < dsMilestoneList.Tables[0].Rows.Count; irow++)
                    //{
                    //	strbuild.Append("<tr><td style='width:40%;border: 1px solid #ccc'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["MilestoneName"]).Trim() + " </td>");
                    //	strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["AmtWithTax"]).Trim() + "</td>");
                    //	strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milesstone_Amt_ForInvoice"]).Trim() + "</td>");
                    //	//strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milestone_settlementAmt"]).Trim() + "</td>");
                    //	strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["CGST_Amt"]).Trim() + "</td>");
                    //	strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["SGST_Amt"]).Trim() + "</td>");
                    //	strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["IGST_Amt"]).Trim() + "</td>");
                    //	strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["MilestoneAmt_WithTax_ForInvoice"]).Trim() + "</td>");
                    //	strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Collect_TDS_Amt"]).Trim() + "</td>");
                    //	strbuild.Append("<td style='width:15%;border: 1px solid #ccc;text-align:right'>" + Convert.ToString(dsMilestoneList.Tables[0].Rows[irow]["Milesstone_PaybleInvoice_Amt"]).Trim() + "</td>");
                    //}
                    //strbuild.Append("</table>");
                    //strbuild.Append("</td></tr>");

                    //}
                }

                strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO No : </td><td width='70%'>" + POWONo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Type : </td><td width='70%'>" + POWOType + "</td></tr>");
                //strbuild.Append("<tr><td width='30%'>PO/WO Title : </td><td width='70%'>" + POWOTitle + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Date : </td><td width='70%'>" + POWODate + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Vendor Name : </td><td width='70%'> " + VendorName + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Cost Center   :</td><td width='70%'>" + CostCenter + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Amount (With Taxes) :</td><td width='70%'>" + POWOAmount_WithTaxes + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Paid Amount  :</td><td width='70%'>" + POWO_PaidAmount + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Balance Amount  :</td><td width='70%'>" + POWO_BalAmount + "</td></tr>");

                strbuild.Append("<tr><td colspan=2 style='height:10px;'></td></tr>");
                //strbuild.Append("<tr><td width='30%'>Approval Status :</td><td colspan=2>" + applist + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append(applist);
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                if (strLeaveReqstURL != "")
                {
                    strbuild.Append("<tr><td style='height:30px'><a href='" + strLeaveReqstURL + "' target='_blank'>Please click here to take action on payment request</a></td></tr>");
                }
                strbuild.Append("</table>");
            }
            sendMail_VSCB(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void send_mail_VSCB_Advance_Pay_Rejection_Correction(string Emp_Name, string ReqMailID, string toMailIDs, string Tbody, string strsubject, string ccmailid, string strLeaveReqstURL, string applist, string POWONo, string POWOTitle, string POWODate, string POWOType, string VendorName, string POWOAmount_WithTaxes, string POWO_PaidAmount, string POWO_BalAmount, string ProjectName, string InvoiceNo, string InvoiceAmount, string Invoice_BalAmount, string Payment_RequestNo, string Request_Date, string Payment_RequestAmt, string CostCenter, string DirectTax, string DirectTaxPer, string DirectTaxAmount, string PayableAmountIn, string MilestoneNo, string MilestoneName, string MilestAmount, string MilestCGST, string MilestSGST, string MilestIGST, string MilestAmtWithTax, string MilestPyamentStatus, DataSet dsMilestoneList, string PaymentType, string Remark)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");

                strbuild.Append("<tr><td> " + Tbody + "</td></tr>");
                strbuild.Append("<tr><td style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:80% !important;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
                strbuild.Append("<tr><td width='30%'>Payment Request No  :</td><td width='70%'>" + Payment_RequestNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Request Date  :</td><td width='70%'>" + Request_Date + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Advance Payment Amount :</td><td width='70%'>" + Payment_RequestAmt + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Payment Type :</td><td width='70%'>" + PaymentType + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Remark :</td><td width='70%'>" + Remark + "</td></tr>");

                strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO No : </td><td width='70%'>" + POWONo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Type : </td><td width='70%'>" + POWOType + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Date : </td><td width='70%'>" + POWODate + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Vendor Name : </td><td width='70%'> " + VendorName + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Cost Center   :</td><td width='70%'>" + CostCenter + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Amount (With Taxes) :</td><td width='70%'>" + POWOAmount_WithTaxes + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Paid Amount  :</td><td width='70%'>" + POWO_PaidAmount + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Balance Amount  :</td><td width='70%'>" + POWO_BalAmount + "</td></tr>");

                strbuild.Append("<tr><td colspan=2 style='height:10px;'></td></tr>");
                strbuild.Append("</table>");
                strbuild.Append(applist);
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("</table>");
            }

            sendMail_VSCB(ReqMailID, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);

        }
        catch (Exception ex)
        {

        }
    }
    public void send_mailto_VSCB_Advance_Pay_Partial_Payment(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string TBody, string ccmailid, string strLeaveReqstURL, string applist, string POWONo, string POWOTitle, string POWODate, string POWOType, string VendorName, string POWOAmount_WithTaxes, string POWO_PaidAmount, string POWO_BalAmount, string ProjectName, string InvoiceNo, string InvoiceAmount, string Invoice_BalAmount, string Payment_RequestNo, string Request_Date, string Payment_RequestAmt, string AmountpaidAccounts, string BalanceAmount, string OldPayment_RequestNo, string CostCenter, string DirectTax, string DirectTaxPer, string DirectTaxAmount, string PayableAmountIn, string PaymentType, string Remark)
    {
        StringBuilder strbuild = new StringBuilder();
        //strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild = new StringBuilder();
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td>Dear " + Emp_Name + ",</td></tr>");
                //strbuild.Append("<tr><td> This is to inform you that a  new candidate is referred by <b>" + employeeName + "</b>. Please take appropriate action.</td></tr>");
                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td>" + TBody + " </td></tr>");
                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:80% !important;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
                strbuild.Append("<tr><td width='30%'>Payment Request No  :</td><td width='70%'>" + Payment_RequestNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Old Payment Request No  :</td><td width='70%'>" + OldPayment_RequestNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Request Date  :</td><td width='70%'>" + Request_Date + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Amount to be paid (with Tax) :</td><td width='70%'>" + Payment_RequestAmt + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Amount paid by Accounts :</td><td width='70%'>" + AmountpaidAccounts + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Balance Amount :</td><td width='70%'>" + BalanceAmount + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Payment Type :</td><td width='70%'>" + PaymentType + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Remark :</td><td width='70%'>" + Remark + "</td></tr>");

                //strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");
                //strbuild.Append("<tr><td width='30%'>Invoice No  :</td><td width='70%'>" + InvoiceNo + "</td></tr>");
                //strbuild.Append("<tr><td width='30%'>Invoice Amount  :</td><td width='70%'>" + InvoiceAmount + "</td></tr>");
                //if (DirectTax != "")
                //{
                //	strbuild.Append("<tr><td width='30%'>Direct Tax  :</td><td width='70%'>" + DirectTax + "</td></tr>");
                //	strbuild.Append("<tr><td width='30%'>DirectTax(%)  :</td><td width='70%'>" + DirectTaxPer + "</td></tr>");
                //	strbuild.Append("<tr><td width='30%'>Direct Tax Amount  :</td><td width='70%'>" + DirectTaxAmount + "</td></tr>");
                //	strbuild.Append("<tr><td width='30%'>Payable Amount (with Tax)  :</td><td width='70%'>" + PayableAmountIn + "</td></tr>");

                //}
                //strbuild.Append("<tr><td width='30%'>Balance Amount  :</td><td width='70%'>" + Invoice_BalAmount + "</td></tr>");
                strbuild.Append("<tr><td style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/WO No : </td><td width='70%'>" + POWONo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/WO Title : </td><td width='70%'>" + POWOTitle + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/WO Date : </td><td width='70%'>" + POWODate + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/WO Type : </td><td width='70%'>" + POWOType + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Vendor Name : </td><td width='70%'> " + VendorName + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Amount (With Taxes) :</td><td width='70%'>" + POWOAmount_WithTaxes + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Paid Amount  :</td><td width='70%'>" + POWO_PaidAmount + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Balance Amount  :</td><td width='70%'>" + POWO_BalAmount + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Department   :</td><td width='70%'>" + ProjectName + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Cost Center   :</td><td width='70%'>" + CostCenter + "</td></tr>");
                //strbuild.Append("<tr><td width='25%'>Status :</td><td colspan=2>" + applist + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                if (strLeaveReqstURL != "")
                {
                    strbuild.Append("<tr><td style='height:30px'><a href='" + strLeaveReqstURL + "' target='_blank'>Please click here to take action on payment request</a></td></tr>");
                }
                //strbuild.Append("<tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr colspan=2 ><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
                strbuild.Append("</table>");
            }
            sendMail_VSCB(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void send_mailto_VSCB__Advance_Pay_Cancel(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string TBody, string ccmailid, string strLeaveReqstURL, string applist, string POWONo, string POWOTitle, string POWODate, string POWOType, string VendorName, string POWOAmount_WithTaxes, string POWO_PaidAmount, string POWO_BalAmount, string ProjectName, string InvoiceNo, string InvoiceAmount, string Invoice_BalAmount, string Payment_RequestNo, string Request_Date, string Payment_RequestAmt, string AdvancePayType, string Remarks, string CostCenter, string DirectTax, string DirectTaxPer, string DirectTaxAmount, string PayableAmountIn, string MilestoneNo, string MilestoneName, string MilestAmount, string MilestCGST, string MilestSGST, string MilestIGST, string MilestAmtWithTax, string MilestPyamentStatus, DataSet dsMilestoneList, string CancelRemarks)
    {
        StringBuilder strbuild = new StringBuilder();
        //strsubject = strsubject + " of " + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild = new StringBuilder();
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS ;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td>Dear All,</td></tr>");
                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td> " + TBody + " </td></tr>");
                strbuild.Append("<tr><td style='height:10px;'></td></tr>");
                strbuild.Append("<tr><td>");
                strbuild.Append("<table style='width:80% !important;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
                strbuild.Append("<tr><td width='30%'>Payment Request No  :</td><td width='70%'>" + Payment_RequestNo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Request Date  :</td><td width='70%'>" + Request_Date + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Advance Payment Amount :</td><td width='70%'>" + Payment_RequestAmt + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Advance Payment Type :</td><td width='70%'>" + AdvancePayType + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Remarks :</td><td width='70%'>" + Remarks + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Cancel Remarks :</td><td width='70%'>" + CancelRemarks + "</td></tr>");
                strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");

                strbuild.Append("<tr><td colspan=2 style='height:20px;'></td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO No : </td><td width='70%'>" + POWONo + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Type : </td><td width='70%'>" + POWOType + "</td></tr>");
                //strbuild.Append("<tr><td width='30%'>PO/ WO Title : </td><td width='70%'>" + POWOTitle + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Date : </td><td width='70%'>" + POWODate + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Vendor Name : </td><td width='70%'> " + VendorName + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Cost Center   :</td><td width='70%'>" + CostCenter + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>PO/ WO Amount (With Taxes) :</td><td width='70%'>" + POWOAmount_WithTaxes + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Paid Amount  :</td><td width='70%'>" + POWO_PaidAmount + "</td></tr>");
                strbuild.Append("<tr><td width='30%'>Balance Amount  :</td><td width='70%'>" + POWO_BalAmount + "</td></tr>");
                // strbuild.Append("<tr><td width='30%'>Department   :</td><td width='70%'>" + ProjectName + "</td></tr>");

                strbuild.Append("<tr><td colspan=2 style='height:10px;'></td></tr>");
                //strbuild.Append("<tr><td width='30%'>Approval Status :</td><td colspan=2>" + applist + "</td></tr>");
                strbuild.Append("</table>");
                strbuild.Append(applist);
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                if (strLeaveReqstURL != "")
                {
                    strbuild.Append("<tr><td style='height:30px'><a href='" + strLeaveReqstURL + "' target='_blank'>Please click here to take action on payment request</a></td></tr>");
                }
                strbuild.Append("</table>");
            }
            sendMail_VSCB(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void Insert_Invoice_Adv_Settlement_Amt(string stype, double dinvoiceId, double idept_id, decimal dCostcenterAmt, int srno, decimal dGSTAmt)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", stype),
            new SqlParameter("@InvoiceID", dinvoiceId),
            new SqlParameter("@POWOID", idept_id),
            new SqlParameter("@AmtWithoutTax", dCostcenterAmt),
            new SqlParameter("@potypeid", srno),
            new SqlParameter("@CGST_Amt", dGSTAmt)
        };
        ExecuteNonQuery("Insert_Invoice_Adv_Settlement_Amt", "SP_VSCB_CreateInvoice", stype, parameters);
    }
    public DataTable dtUpdate_Payment_Request(string QueueType, string EmpCode, int InvoiceID, int MstoneID, int Payment_ID, string PaymentReqNo, decimal TobePaidAmtWithtax, DateTime PaymentReqDate, int Status_id, int PaymentStatusID, decimal Amt_paid_Account, decimal BalanceAmt, string Ref_PaymentReqNo, string UploadFileNames, Int32 iDirectTaxTypeID, decimal dDirectTaxPercentage, decimal dDirectTaxPercentage_Amt, int IsLDC_Applicable)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@InvoiceID", InvoiceID),
            new SqlParameter("@MstoneID", MstoneID),
            new SqlParameter("@Payment_ID", Payment_ID),
            new SqlParameter("@PaymentReqNos", PaymentReqNo),
            new SqlParameter("@TobePaidAmtWithtax", TobePaidAmtWithtax),
            new SqlParameter("@PaymentReqDate", PaymentReqDate),
            new SqlParameter("@Status_id", Status_id),
            new SqlParameter("@PaymentStatusID", PaymentStatusID),
            new SqlParameter("@Amt_paid_Account", Amt_paid_Account),
            new SqlParameter("@BalanceAmt", BalanceAmt),
            new SqlParameter("@Ref_PaymentReqNo", Ref_PaymentReqNo),
            new SqlParameter("@UploadFileNames", UploadFileNames),
            new SqlParameter("@DirectTax_DescriptionID", iDirectTaxTypeID),
            new SqlParameter("@DirectTax_Percentage", dDirectTaxPercentage),
            new SqlParameter("@DirectTax_Amount", dDirectTaxPercentage_Amt),
            new SqlParameter("@IsLDC_Applicable", IsLDC_Applicable)
        };
        return ExecuteDataTable("dtUpdate_Payment_Request", "sp_VSCB_CreatePOWO_Users", QueueType, parameters);
    }

    #endregion

    #endregion

    #region Vendor Sub-con Billing Methods -Sanjay 
    public string get_SHOW_HIDE_From_ReportDetails(string strempcode, string sReportName)
    {
        DataSet dsmyInvoice = new DataSet();
        string sreportname = "HIDE";
        var parameters = new[]
        {
            new SqlParameter("@stype", "CheckIsShow_InvoiceAppMatrix"),
            new SqlParameter("@ReportName", sReportName),
            new SqlParameter("@empcode", strempcode)
        };
        dsmyInvoice = ExecuteDataSet("get_SHOW_HIDE_From_ReportDetails", "SP_VSCB_GETALL_DETAILS", "CheckIsShow_InvoiceAppMatrix", parameters);
        if (dsmyInvoice.Tables[0].Rows.Count > 0)
        {
            sreportname = Convert.ToString(dsmyInvoice.Tables[0].Rows[0]["IsAccess"]).Trim();
        }
        return sreportname;
    }
    public DataTable GetVSCB_Payment_Request_ApprovedListForChange(string Emp_Code, string stype, int POID, int Vendor_ID, int InvoiceID, int Payment_ID, int Status_id, string POWODate, string PayementRDates, string PayementAmt, int Dept_ID, string CostCentor, string PaymentReqFromDate, string PaymentReqToDate)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", stype),
            new SqlParameter("@EmpCode", Emp_Code),
            new SqlParameter("@POID", POID),
            new SqlParameter("@Vendor_ID", Vendor_ID),
            new SqlParameter("@InvoiceID", InvoiceID),
            new SqlParameter("@Payment_ID", Payment_ID),
            new SqlParameter("@POWODates", POWODate),
            new SqlParameter("@PayementAmt", PayementAmt),
            new SqlParameter("@Dept_ID", Dept_ID),
            new SqlParameter("@CostCentor", CostCentor),
            new SqlParameter("@PaymentReqFromDate", PaymentReqFromDate),
            new SqlParameter("@PaymentReqToDate", PaymentReqToDate)
        };
        return ExecuteDataTable("GetVSCB_Payment_Request_ApprovedListForChange", "sp_VSCB_CreatePOWO_Users", stype, parameters);
    }
    public void UpdateAmountPaidByAccount(int PaymentId, decimal amt_paid_Account, decimal balanceAmt, string updatedBy)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", "UpdateAmountPaidByAccount"),
            new SqlParameter("@Payment_ID", PaymentId),
            new SqlParameter("@Amt_paid_Account", amt_paid_Account),
            new SqlParameter("@BalanceAmt", balanceAmt),
            new SqlParameter("@EmpCode", updatedBy)
        };
        ExecuteNonQuery("UpdateAmountPaidByAccount", "sp_VSCB_CreatePOWO_Users", "UpdateAmountPaidByAccount", parameters);
    }
    public bool InsertUpdateInvoicePaymentCreators(int Prj_Dept_id, int POTYpeID, string InvoiceCreators, string PaymentCreators, string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "InsertUpdateInvoicePaymentCreator"),
            new SqlParameter("@Prj_Dept_id", Prj_Dept_id),
            new SqlParameter("@POTypeID", POTYpeID),
            new SqlParameter("@InvoiceCreators", string.IsNullOrWhiteSpace(InvoiceCreators) ? DBNull.Value :(object)InvoiceCreators),
            new SqlParameter("@PaymentCreators", string.IsNullOrWhiteSpace(PaymentCreators) ? DBNull.Value :(object)PaymentCreators),
            new SqlParameter("@empcode", empCode)
        };

        var status = ExecuteNonQuery("InsertUpdateInvoicePaymentCreators", "SP_VSCB_CreateInvoicePayment_Maker", "InsertUpdateInvoicePaymentCreator", parameters);
        if (status > 0)
            return true;
        else
            return false;
    }
    public DataTable GetVSCB_BatchApprovedList(string Emp_Code, string stype, int POID, int Vendor_ID, int InvoiceID, string CostCentor, int BatchId, string InvoiceFromDate, string InvoiceToDate)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@empcode", Emp_Code),
            new SqlParameter("@POID", POID),
            new SqlParameter("@VendorId", Vendor_ID),
            new SqlParameter("@InvoiceID", InvoiceID),
            new SqlParameter("@costcenter", CostCentor),
            new SqlParameter("@BatchID", BatchId),
            new SqlParameter("@InvoiceFromDate", InvoiceFromDate),
            new SqlParameter("@InvoiceToDate", InvoiceToDate)
        };
        return ExecuteDataTable("GetVSCB_BatchApprovedList", "SP_VSCB_GETALL_DETAILS", stype, parameters);
    }
    public DataTable getHPO_List()
    {
        var parameters = new[]
       {
            new SqlParameter("@stype", "get_HPO_List")
        };
        return ExecuteDataTable("getHPO_List", "SP_VSCB_GETALL_DETAILS", "get_HPO_List", parameters);
    }
    public DataSet dtPOWoNumberDetailsPRequestlist(string QueueType, string EmpCode, int POID, int InVID)
    {
        var parameters = new[]
        {
            new SqlParameter("@QueueType", QueueType),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@POID", POID),
            new SqlParameter("@InvoiceID", InVID)
        };
        return ExecuteDataSet("dtPOWoNumberDetailsPRequestlist", "sp_VSCB_CreatePOWO_Users", QueueType, parameters);
    }
    public DataTable get_ALLPOWOList(string sempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_ALL_POWOList_dropdown"),
            new SqlParameter("@empcode", sempcode)
        };
        return ExecuteDataTable("get_ALLPOWOList", "SP_VSCB_GETALL_DETAILS", "get_ALL_POWOList_dropdown", parameters);
    }
    public DataTable getTallyPOWOList(string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_TallyPOdetails"),
            new SqlParameter("@empcode", strempcode)
        };
        return ExecuteDataTable("getTallyPOWOList", "SP_VSCB_GETALL_DETAILS", "get_TallyPOdetails", parameters);
    }
    public DataSet getTallyPOWO_List(string strempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_TallyPOdetails_New"),
            new SqlParameter("@empcode", strempcode)
        };
        return ExecuteDataSet("getTallyPOWO_List", "SP_VSCB_GETALL_DETAILS", "get_TallyPOdetails_New", parameters);
    }
    public DataTable getCurrencyList()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_CurrenctList")
        };
        return ExecuteDataTable("getCurrencyList", "SP_VSCB_GETALL_DETAILS", "get_CurrenctList", parameters);
    }
    public DataTable getPOWOList(string sempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_POWOList_dropdown"),
            new SqlParameter("@empcode", sempcode)
        };
        return ExecuteDataTable("getPOWOList", "SP_VSCB_GETALL_DETAILS", "get_POWOList_dropdown", parameters);
    }
    public DataTable getPOWOList()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_POWOList_dropdown_ACC")
        };
        return ExecuteDataTable("getPOWOList", "SP_VSCB_GETALL_DETAILS", "get_POWOList_dropdown_ACC", parameters);
    }
    public DataTable getPOTypes()
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_POTypes")
        };
        return ExecuteDataTable("getPOTypes", "SP_VSCB_GETALL_DETAILS", "get_POTypes", parameters);
    }
    public DataTable getTallyPODetails(double lPowoid, string sempcode, string scurrency)
    {
        var parameters = new[]
       {
            new SqlParameter("@stype", "get_POWODetails_Tally"),
            new SqlParameter("@POWOID", lPowoid),
            new SqlParameter("@empcode", sempcode),
            new SqlParameter("@CurName", scurrency)
        };
        return ExecuteDataTable("getTallyPODetails", "SP_VSCB_GETALL_DETAILS", "get_POWODetails_Tally", parameters);
    }
    public DataSet getMilestoneFrom_Temptable(string strempcode, double iPoid, string sCurrency)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Milestone_fromTemp"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@POWOID", iPoid),
            new SqlParameter("@CurName", sCurrency)
        };
        return ExecuteDataSet("getMilestoneFrom_Temptable", "SP_VSCB_GETALL_DETAILS", "get_Milestone_fromTemp", parameters);
    }
    public DataTable getMilestoneAmount(string sPoWoNumber)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Milestone_Amount"),
            new SqlParameter("@powonumber", sPoWoNumber)
        };
        return ExecuteDataTable("getMilestoneAmount", "SP_VSCB_GETALL_DETAILS", "get_Milestone_Amount", parameters);
    }
    public DataTable getMyPOWOMilestoneList(string sempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_msgMilestoneList"),
            new SqlParameter("@empcode", sempcode)
        };
        return ExecuteDataTable("getMyPOWOMilestoneList", "SP_VSCB_GETALL_DETAILS", "get_msgMilestoneList", parameters);
    }
    public DataSet getMilestoneFrom_Temptable_edit(string strempcode, int srno)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Milestone_fromTemp_edit"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@Srno", srno)
        };
        return ExecuteDataSet("getMilestoneFrom_Temptable_edit", "SP_VSCB_GETALL_DETAILS", "get_Milestone_fromTemp_edit", parameters);
    }
    public DataSet getMilestone_edit_View(string strempcode, double dPOWOID)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Milestone_Details_update"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@POWOID", dPOWOID)
        };
        return ExecuteDataSet("getMilestone_edit_View", "SP_VSCB_GETALL_DETAILS", "get_Milestone_Details_update", parameters);
    }
    public DataSet getMilestone_edit_View_ACC(string strempcode, double dPOWOID)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Milestone_Details_update_ACC"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@POWOID", dPOWOID)
        };
        return ExecuteDataSet("getMilestone_edit_View_ACC", "SP_VSCB_GETALL_DETAILS", "get_Milestone_Details_update_ACC", parameters);
    }
    public DataSet getMilestone_list_CreateInvoice(string strempcode, double dPOWOID)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Milestone_List_CreateInvoice"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@POWOID", dPOWOID)
        };
        return ExecuteDataSet("getMilestone_list_CreateInvoice", "SP_VSCB_GETALL_DETAILS", "get_Milestone_List_CreateInvoice", parameters);
    }
    public DataSet getMilestone_Details_CreateInvoice(double dMilestoneId, double dPOWOID)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Milestone_Details_CreateInvoice"),
            new SqlParameter("@MstoneID", dMilestoneId),
            new SqlParameter("@POWOID", dPOWOID)
        };
        return ExecuteDataSet("getMilestone_Details_CreateInvoice", "SP_VSCB_GETALL_DETAILS", "get_Milestone_Details_CreateInvoice", parameters);
    }
    public DataSet getMilestone_Details_CreateInvoice(double dInvoiceId, double dMilestoneId, double dPOWOID, string sempcode, double dMilestoneAmt, double dMilestoneSettlementAmt, string sQtype)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", sQtype),
            new SqlParameter("@MstoneID", dMilestoneId),
            new SqlParameter("@POWOID", dPOWOID),
            new SqlParameter("@Milesstone_Amt_ForInvoice", dMilestoneAmt),
            new SqlParameter("@Milestone_settlementAmt", dMilestoneSettlementAmt),
            new SqlParameter("@Emp_Code", sempcode),
            new SqlParameter("@InvoiceID", dInvoiceId)
        };
        return ExecuteDataSet("getMilestone_Details_CreateInvoice", "SP_VSCB_CreateInvoice", sQtype, parameters);
    }
    public DataSet get_Invoice_Milestone_List(double dInvoiceId)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Invoice_MilestoneList"),
            new SqlParameter("@InvoiceId", dInvoiceId)
        };
        return ExecuteDataSet("get_Invoice_Milestone_List", "SP_VSCB_GETALL_DETAILS", "get_Invoice_MilestoneList", parameters);
    }

    public void InsertMilestoneDetails(string isrno, Double dPOID, string smilestone, Int32 iqty, decimal drate, decimal dAmount, decimal dCGSTPer, decimal dSGSTPer, decimal dIGSTPer, decimal dCGSTAmt, decimal dSGSTAmt, decimal dIGSTAmt, decimal dAmtwithTax, string sempcode, string stype, Int32 ipaymentstausid, Boolean isshortclose, Double dmilestoneid, string sRemarks, string smilestonedate)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@empcode", sempcode),
            new SqlParameter("@qtype", stype),
            new SqlParameter("@POID", dPOID),
            new SqlParameter("@MilestoneName", smilestone),
            new SqlParameter("@Quantity", iqty),
            new SqlParameter("@rate", drate),
            new SqlParameter("@Amount ", dAmount),
            new SqlParameter("@CGST_Per", dCGSTPer),
            new SqlParameter("@SGST_Per", dSGSTPer),
            new SqlParameter("@IGST_Per", dIGSTPer),
            new SqlParameter("@CGST_Amt", dCGSTAmt),
            new SqlParameter("@SGST_Amt", dSGSTAmt),
            new SqlParameter("@IGST_Amt", dIGSTAmt),
            new SqlParameter("@AmtWithTax", dAmtwithTax),
            new SqlParameter("@PaymentStatusID", ipaymentstausid),
            new SqlParameter("@IsShortClone", isshortclose),
            new SqlParameter("@Remarks", sRemarks),
            new SqlParameter("@MilestoneDueDate", smilestonedate),
        };
        if (dmilestoneid != 0)
            parameters.Add(new SqlParameter("@MstoneID", dmilestoneid));

        if (Convert.ToString(isrno).Trim() != "")
            parameters.Add(new SqlParameter("@srno", Convert.ToInt32(isrno)));

        ExecuteNonQuery("InsertMilestoneDetails", "SP_VSCB_CreateMilestone_Details", stype, parameters.ToArray());
    }
    public DataSet InsertUpdateMilestoneMain(string sempcode, string stype, string sponumber, string spodate, string sPotitle, Int32 ivendorid, int iPOTypeid, decimal dPOWOAmt, string strDeptProName, Double dPOID, double Prj_Dept_id, decimal dPOWOAmt_withTax, int iapprStatus_id, int icond_id, int iRange_type_id, Boolean IsShortClose, string sPowoContent, Int32 icurId, Int32 hPOTypeID, string shippingAddress, string PORemarks, decimal dSecurity_DepositAmt)
    {
        var parameters = new[]
        {
            new SqlParameter("@empcode", sempcode),
            new SqlParameter("@qtype", stype),
            new SqlParameter("@PONumber", sponumber),
            new SqlParameter("@PODate", spodate),
            new SqlParameter("@POTitle", sPotitle),
            new SqlParameter("@VendorID", ivendorid),
            new SqlParameter("@POTypeID", iPOTypeid),
            new SqlParameter("@POWOAmt", dPOWOAmt),
            new SqlParameter("@Comp_Code", strDeptProName),
            new SqlParameter("@Prj_Dept_id", Prj_Dept_id),
            new SqlParameter("@POWOAmount_withTax", dPOWOAmt_withTax),
            new SqlParameter("@appr_StatusId", iapprStatus_id),
            new SqlParameter("@cond_id", icond_id),
            new SqlParameter("@Range_type_id", iRange_type_id),
            new SqlParameter("@IsShortClone", IsShortClose),
            new SqlParameter("@PO_WO_Text", sPowoContent),
            new SqlParameter("@POID", dPOID),
            new SqlParameter("@Currency_ID", icurId),
            new SqlParameter("@HPOTypeID", hPOTypeID),
            new SqlParameter("@ShippingAddress", shippingAddress),
            new SqlParameter("@PORemarks", PORemarks),
            new SqlParameter("@Security_Deposit_Amount", dSecurity_DepositAmt)
        };
        return ExecuteDataSet("InsertUpdateMilestoneMain", "SP_VSCB_CreateMilestone_Details", stype, parameters);
    }

    public DataSet InsertUpdate_Invoice(string sempcode, string stype, double dMilestoneID, string sInvoiceNo, string sInvoicedate, decimal dAmtWithoutTax, decimal dCGST_Amt, decimal dSGST_Amt, decimal dIGST_Amt, decimal dCGST_Per, decimal dSGST_Per, decimal dIGST_Per, decimal dAmtWithTax, decimal dBalanceAmt, Int32 ipaymentStatusID, Int32 istatusId, Boolean IsInvoiceWithPO, double dProjectDept_id, Int32 iVendorId, string sinvoiceid, string sVoucherNo, string sSupplierDt, string spotypeid, string sinvoiceRemarks, double dpoid, Boolean IsScurityDeposit_Invoice, string sinvoicesdescription)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@qtype", stype),
            new SqlParameter("@MstoneID", dMilestoneID),
            new SqlParameter("@InvoiceNo", sInvoiceNo),
            new SqlParameter("@InvoiceDate", sInvoicedate),
            new SqlParameter("@AmtWithoutTax", dAmtWithoutTax),
            new SqlParameter("@CGST_Amt", dCGST_Amt),
            new SqlParameter("@SGST_Amt", dSGST_Amt),
            new SqlParameter("@IGST_Amt", dIGST_Amt),
            new SqlParameter("@CGST_Per", dCGST_Per),
            new SqlParameter("@SGST_Per", dSGST_Per),
            new SqlParameter("@IGST_Per", dIGST_Per),
            new SqlParameter("@AmtWithTax", dAmtWithTax),
            new SqlParameter("@BalanceAmt", dBalanceAmt),
            new SqlParameter("@Emp_Code", sempcode),
            new SqlParameter("@PaymentStatusID", ipaymentStatusID),
            new SqlParameter("@Status_id", istatusId),
            new SqlParameter("@IsInvoiceWithPO", IsInvoiceWithPO),
            new SqlParameter("@Prj_Dept_id", dProjectDept_id),
            new SqlParameter("@VendorId", iVendorId),
            new SqlParameter("@VoucherNo", sVoucherNo),
            new SqlParameter("@Supplier_Invoice_Date", sSupplierDt),
            new SqlParameter("@potypeid", spotypeid),
            new SqlParameter("@invoiceRemarks", sinvoiceRemarks),
            new SqlParameter("@invoices_description", sinvoicesdescription),
            new SqlParameter("@POWOID", dpoid),
            new SqlParameter("@IsSecurity_Deposit_Invoice", IsScurityDeposit_Invoice)
        };
        if (Convert.ToString(sinvoiceid).Trim() != "" && Convert.ToString(sinvoiceid).Trim() != "0")
            parameters.Add(new SqlParameter("@InvoiceID", sinvoiceid));

        return ExecuteDataSet("InsertUpdate_Invoice", "SP_VSCB_CreateInvoice", stype, parameters.ToArray());
    }
    public void InsertInvoice_ApproverDetails(string stype, double dinvoiceId, string sAppr_Emp_Code, int iAppr_ID, string sAction, string sremarks, string strcurrntAppr_emp_code, string sCurnt_Appr_Id, string sinvoice_description)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@qtype", stype),
            new SqlParameter("@Approval_Emp_Code", sAppr_Emp_Code),
            new SqlParameter("@Appr_ID", iAppr_ID),
            new SqlParameter("@Action", sAction),
            new SqlParameter("@Remarks", sremarks),
            new SqlParameter("@InvoiceID", dinvoiceId),
        };

        if (Convert.ToString(strcurrntAppr_emp_code).Trim() != "")
        {
            parameters.Add(new SqlParameter("@CurrentApprEmpCode", strcurrntAppr_emp_code));
            parameters.Add(new SqlParameter("@CurrentAppr_ID", Convert.ToInt32(sCurnt_Appr_Id)));
        }
        if (Convert.ToString(sinvoice_description).Trim() != "")
        {
            parameters.Add(new SqlParameter("@invoices_description", sinvoice_description));
        }

        ExecuteNonQuery("InsertInvoice_ApproverDetails", "SP_VSCB_CreateInvoice", stype, parameters.ToArray());
    }

    public void InsertInvoice_ApproverDetails_Final(string stype, double dinvoiceId, string sAppr_Emp_Code, int iAppr_ID, string sAction, string sremarks, string strcurrntAppr_emp_code, string sCurnt_Appr_Id, Int32 iDirectTaxTypeid, decimal dDirectTaxPer, decimal dDirectTaxPerAmt, decimal dPayableAmtWithtax, int iDirectTax_DescriptionID, Boolean isTDSApplicable, string sExpensesId, string sExpenseDtlsID, string sinvoice_description, string sItemDtlsId)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@qtype", stype),
            new SqlParameter("@Approval_Emp_Code", sAppr_Emp_Code),
            new SqlParameter("@Appr_ID", iAppr_ID),
            new SqlParameter("@Action", sAction),
            new SqlParameter("@Remarks", sremarks),
            new SqlParameter("@InvoiceID", dinvoiceId),
            new SqlParameter("@DirectTax_TypeID", iDirectTaxTypeid),
            new SqlParameter("@DirectTax_Percentage", dDirectTaxPer),
            new SqlParameter("@DirectTax_Amount", dDirectTaxPerAmt),
            new SqlParameter("@Payable_Amt_With_Tax", dPayableAmtWithtax),
            new SqlParameter("@DirectTax_DescriptionID", iDirectTax_DescriptionID),
            new SqlParameter("@IsLDC_Applicable", isTDSApplicable)
           };

        if (Convert.ToString(strcurrntAppr_emp_code).Trim() != "")
        {
            parameters.Add(new SqlParameter("@CurrentApprEmpCode", strcurrntAppr_emp_code));
            parameters.Add(new SqlParameter("@CurrentAppr_ID", Convert.ToInt32(sCurnt_Appr_Id)));
        }
        if (Convert.ToString(sExpensesId).Trim() != "")
            parameters.Add(new SqlParameter("@exp_id", sExpensesId));

        if (Convert.ToString(sExpenseDtlsID).Trim() != "")
            parameters.Add(new SqlParameter("@exp_dtl_id", sExpenseDtlsID));

        if (Convert.ToString(sinvoice_description).Trim() != "")
        {
            parameters.Add(new SqlParameter("@invoices_description", sinvoice_description));
        }
        if (Convert.ToString(sItemDtlsId).Trim() != "")
            parameters.Add(new SqlParameter("@Product_Item_Dtl", sItemDtlsId));

        ExecuteNonQuery("InsertInvoice_ApproverDetails_Final", "SP_VSCB_CreateInvoice", stype, parameters.ToArray());
    }

    public DataSet getMilestoneDetails_ForInvoice(string strempcode, int srno)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Milestone_fromTemp_edit"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@Srno", srno)
        };
        return ExecuteDataSet("getMilestoneDetails_ForInvoice", "SP_VSCB_GETALL_DETAILS", "get_Milestone_fromTemp_edit", parameters);
    }
    public DataSet VSCB_GetApproverEmailID(string strStype, string projectDept_Name, int iCntApprId)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", strStype),
            new SqlParameter("@Project_Dept_Name", projectDept_Name),
            new SqlParameter("@current_APPR_ID", iCntApprId)
        };
        return ExecuteDataSet("VSCB_GetApproverEmailID", "SP_VSCB_GETALL_DETAILS", strStype, parameters);
    }
    public DataTable getMyInvoiceList(string sempcode)
    {
        var parameters = new[]
       {
            new SqlParameter("@stype", "get_myInvoice_List"),
            new SqlParameter("@empcode", sempcode)
        };
        return ExecuteDataTable("getMyInvoiceList", "SP_VSCB_GETALL_DETAILS", "get_myInvoice_List", parameters);
    }
    public DataTable getPendingInvoiceList(string sempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Pending_InvoiceList"),
            new SqlParameter("@empcode", sempcode)
        };
        return ExecuteDataTable("getPendingInvoiceList", "SP_VSCB_GETALL_DETAILS", "get_Pending_InvoiceList", parameters);
    }
    public DataTable getPendingInvoiceCount(string sempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Pending_Invoice_Count"),
            new SqlParameter("@empcode", sempcode)
        };
        return ExecuteDataTable("getPendingInvoiceCount", "SP_VSCB_GETALL_DETAILS", "get_Pending_Invoice_Count", parameters);
    }
    public DataSet getInvoicedetails_edit_View(string strempcode, double dInvoiceId)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_myInvoice_details_Edit"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@InvoiceId", dInvoiceId)
        };
        return ExecuteDataSet("getInvoicedetails_edit_View", "SP_VSCB_GETALL_DETAILS", "get_myInvoice_details_Edit", parameters);
    }
    public DataSet getInvoicedetails_edit_View_withoutPO(string strempcode, double dInvoiceId)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_myInvoice_details_Edit_WithoutPO"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@InvoiceId", dInvoiceId)
        };
        return ExecuteDataSet("getInvoicedetails_edit_View_withoutPO", "SP_VSCB_GETALL_DETAILS", "get_myInvoice_details_Edit_WithoutPO", parameters);
    }
    public DataSet get_Invoice_Approver_List(double iInvoiceID, string sAppr_empcode, string strProject_Dept_name, string sPOtypeId, int sIsInvoiceWithPO)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@emp_code", sAppr_empcode),
            new SqlParameter("@Project_Dept_Name", strProject_Dept_name),
            new SqlParameter("@POTypeId", sPOtypeId),
            new SqlParameter("@IsInvoiceWithPO", sIsInvoiceWithPO)
        };

        if (iInvoiceID != 0 || Convert.ToString(iInvoiceID).Trim() == "")
            parameters.Add(new SqlParameter("@InvoiceId", iInvoiceID));

        return ExecuteDataSet("get_Invoice_Approver_List", "SP_VSCB_GET_Invoice_APPROVERSTATUS", "", parameters.ToArray());
    }
    public void Cancel_Invoicedetails(string strempcode, double dInvoiceId, string sInvoiceRemarks, string sinvoicedescription)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", "UpdateInvoice_Canceled"),
            new SqlParameter("@Emp_Code", strempcode),
            new SqlParameter("@InvoiceID", dInvoiceId),
            new SqlParameter("@invoiceRemarks", sInvoiceRemarks),
            new SqlParameter("@invoices_description", sinvoicedescription)
        };
        ExecuteNonQuery("Cancel_Invoicedetails", "SP_VSCB_CreateInvoice", "UpdateInvoice_Canceled", parameters);
    }
    public void InsertInvoiceUploaded_Files(double MaxInvoiceId, string strinsertdelete, string strfilename, string strfiletype, int fsrno)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", strinsertdelete),
            new SqlParameter("@t_id", MaxInvoiceId),
            new SqlParameter("@fsrno", fsrno),
            new SqlParameter("@filepath", strfilename),
            new SqlParameter("@filetype", strfiletype)
        };
        ExecuteNonQuery("InsertInvoiceUploaded_Files", "usp_InsertVSCB_Files", strinsertdelete, parameters);
    }
    public DataSet getVSCB_UploadedFiles(string stype, string sfileType, double dFileId, string sfileSrNo, string strEmpcode)
    {
        var parameters = new List<SqlParameter>
        {
             new SqlParameter("@stype", stype),
             new SqlParameter("@fileType", sfileType),
             new SqlParameter("@fileId", dFileId)
        };

        if (Convert.ToString(strEmpcode).Trim() != "")
            parameters.Add(new SqlParameter("@empcode", strEmpcode));

        return ExecuteDataSet("getVSCB_UploadedFiles", "SP_VSCB_GETALL_DETAILS", stype, parameters.ToArray());
    }
    public DataTable GetVSCB_POWONoList_S(string Emp_Code, string stype)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", stype),
             new SqlParameter("@empcode", Emp_Code)
        };
        return ExecuteDataTable("GetVSCB_POWONoList_S", "SP_VSCB_GETALL_DETAILS", stype, parameters);
    }
    public DataTable getDataTableList_VSCB(SqlParameter[] parameters, string strspname)
    {
        return ExecuteDataTable("getDataTableList_VSCB", strspname, "", parameters);
    }
    public DataSet Create_PaymentBatchRequest(string sempcode, string stype, string sbatchdate, string sBatchNo, int iNoofBatchRequest, decimal dTotalBatchPaymnt, string sMakerEmpCode, string sApprEmpCode1, string sApprEmpCode2, Boolean bIsverified, Int32 iStatusId, Int32 iBankID, Boolean blnIsBatchDraft)
    {

        var parameters = new List<SqlParameter>
       {
            new SqlParameter("@qtype", stype),
            new SqlParameter("@Emp_Code", sempcode),
            new SqlParameter("@Batch_No", sBatchNo),
            new SqlParameter("@Batch_No_Requests", iNoofBatchRequest),
            new SqlParameter("@Batch_Total_Payament", dTotalBatchPaymnt),
            new SqlParameter("@Mekar_Empcode", sMakerEmpCode),
            new SqlParameter("@ApporvalEmpCode1", sApprEmpCode1),
            new SqlParameter("@IsVerifed", bIsverified),
            new SqlParameter("@Status_Id", iStatusId),
            new SqlParameter("@BankID", iBankID),
            new SqlParameter("@IsDraft", blnIsBatchDraft)
       };
        if (Convert.ToString(sApprEmpCode2).Trim() != "")
            parameters.Add(new SqlParameter("@ApporvalEmpCode2", sApprEmpCode2));

        return ExecuteDataSet("Create_PaymentBatchRequest", "SP_VSCB_CreateBatchRequest", stype, parameters.ToArray());
    }
    public void InsertBatchRequest_ApproverDetails(string stype, double dbatchId, string sAppr_Emp_Code, int iAppr_ID, string sAction, string sremarks, string strcurrntAppr_emp_code, string sCurnt_Appr_Id)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@qtype", stype),
            new SqlParameter("@Approval_Emp_Code", sAppr_Emp_Code),
            new SqlParameter("@Appr_ID", iAppr_ID),
            new SqlParameter("@Action", sAction),
            new SqlParameter("@Remarks", sremarks),
            new SqlParameter("@Batch_ID", dbatchId)
         };
        if (Convert.ToString(strcurrntAppr_emp_code).Trim() != "")
        {
            parameters.Add(new SqlParameter("@CurrentApprEmpCode", strcurrntAppr_emp_code));
            parameters.Add(new SqlParameter("@CurrentAppr_ID", Convert.ToInt32(sCurnt_Appr_Id)));
        }

        ExecuteNonQuery("InsertBatchRequest_ApproverDetails", "SP_VSCB_CreateBatchRequest", stype, parameters.ToArray());
    }
    public DataSet getInvoice_Details_Edit_View(double dInvoiceId, double dMilestoneId, double dPOID)
    {
        var parameters = new[]
       {
             new SqlParameter("@stype", "get_Invoice_details_edit"),
             new SqlParameter("@InvoiceId", dInvoiceId),
             new SqlParameter("@MstoneID", dMilestoneId),
             new SqlParameter("@POWOID", dPOID)
        };
        return ExecuteDataSet("getInvoice_Details_Edit_View", "SP_VSCB_GETALL_DETAILS", "get_Invoice_details_edit", parameters);
    }    
    public void InsertBatchRequest_Details(string stype, double dbatchId, double dInvoiceId, double dPaymentId, Int32 isrno, double dPOID, Int32 ipaymentTypeid)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", stype),
            new SqlParameter("@Batch_ID", dbatchId),
            new SqlParameter("@POID", dPOID),
            new SqlParameter("@PaymentId", dPaymentId),
            new SqlParameter("@InvoiceId", dInvoiceId),
            new SqlParameter("@srno", isrno),
            new SqlParameter("@paymentType_id", ipaymentTypeid)
        };
        ExecuteNonQuery("InsertBatchRequest_Details", "SP_VSCB_CreateBatchRequest_Details", stype, parameters);
    }
    public DataTable getPendingBatchCount(string sempcode)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "get_PendingCount_BatchRequest"),
             new SqlParameter("@empcode", sempcode)
        };
        return ExecuteDataTable("getPendingBatchCount", "SP_VSCB_GETALL_DETAILS", "get_PendingCount_BatchRequest", parameters);
    }
    public DataTable getPendingBatchReqList(string sempcode)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "get_Pending_BatchReqList"),
            new SqlParameter("@empcode", sempcode)
        };
        return ExecuteDataTable("getPendingBatchReqList", "SP_VSCB_GETALL_DETAILS", "get_Pending_BatchReqList", parameters);
    }
    public DataTable getPendingBatchReqList_BankRef(string sempcode)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "get_Batch_List_PendingBankRef"),
            new SqlParameter("@empcode", sempcode)
        };
        return ExecuteDataTable("getPendingBatchReqList_BankRef", "SP_VSCB_GETALL_DETAILS", "get_Batch_List_PendingBankRef", parameters);
    }
    public DataSet get_UpdatePayment_Invoice_BatchReqApproved(double dbatchId, string sqtype)
    {
        var parameters = new[]
        {
             new SqlParameter("@qtype", sqtype),
            new SqlParameter("@Batch_Id", dbatchId)
        };
        return ExecuteDataSet("get_UpdatePayment_Invoice_BatchReqApproved", "SP_VSCB_PaymentStatus", sqtype, parameters);
    }
    public DataSet get_Milestone_Inovice_Amount(double dMilestoneId, double dinvoiceId)
    {
        var parameters = new[]
        {
             new SqlParameter("@stype", "get_Milestone_Invoice_Amt"),
            new SqlParameter("@MstoneID", dMilestoneId),
            new SqlParameter("@InvoiceId", dinvoiceId)
        };
        return ExecuteDataSet("get_Milestone_Inovice_Amount", "SP_VSCB_GETALL_DETAILS", "get_Milestone_Invoice_Amt", parameters);
    }
    public DataSet GetVSCB_MyPaymentDetails_View(string QueueType, string EmpCode, int POID, int Payment_ID)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", QueueType),
            new SqlParameter("@empcode", EmpCode),
            new SqlParameter("@POWOID", POID),
            new SqlParameter("@PaymentReqNo", Payment_ID)
        };
        return ExecuteDataSet("GetVSCB_MyPaymentDetails_View", "SP_VSCB_GETALL_DETAILS", QueueType, parameters);
    }
    public DataSet get_POWO_Approver_List(double dPOID, string sAppr_empcode, string strProject_Dept_name, decimal dPOWOAmt, Int32 ipotypeid)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@emp_code", sAppr_empcode),
            new SqlParameter("@Project_Dept_Name", strProject_Dept_name),
            new SqlParameter("@powoAmount", dPOWOAmt),
            new SqlParameter("@POTypeID", ipotypeid)
        };
        if (dPOID != 0 || Convert.ToString(dPOID).Trim() == "")
            parameters.Add(new SqlParameter("@POID", dPOID));

        return ExecuteDataSet("get_POWO_Approver_List", "SP_VSCB_GET_POWO_APPROVERSTATUS", "", parameters.ToArray());
    }
    public DataTable getPOTypes_ForApproval()
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@stype", "get_POType_List")
        };
        return ExecuteDataTable("getPOTypes_ForApproval", "SP_VSCB_GETALL_DETAILS", "get_POType_List", parameters.ToArray());
    }
    public void Insert_UpdatePOWO_ApproverDetails(string stype, double dPOWOId, string sAppr_Emp_Code, int iAppr_ID, string sAction, string sremarks, string strcurrntAppr_emp_code, string sCurnt_Appr_Id)
    {
        var parameters = new List<SqlParameter>
       {
            new SqlParameter("@qtype", stype),
            new SqlParameter("@Approval_Emp_Code", sAppr_Emp_Code),
            new SqlParameter("@Appr_ID", iAppr_ID),
            new SqlParameter("@Action", sAction),
            new SqlParameter("@Remarks", sremarks),
            new SqlParameter("@POID", dPOWOId)
        };
        if (Convert.ToString(strcurrntAppr_emp_code).Trim() != "")
        {
            parameters.Add(new SqlParameter("@CurrentApprEmpCode", strcurrntAppr_emp_code));
            parameters.Add(new SqlParameter("@CurrentAppr_ID", Convert.ToInt32(sCurnt_Appr_Id)));
        }

        ExecuteNonQuery("Insert_UpdatePOWO_ApproverDetails", "SP_VSCB_CreateMilestone_Details", stype, parameters.ToArray());
    }
    public DataTable getPendingPOWOCount(string sempcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Pending_POWO_Count"),
            new SqlParameter("@empcode", sempcode)
       };
        return ExecuteDataTable("getPendingPOWOCount", "SP_VSCB_GETALL_DETAILS", "get_Pending_POWO_Count", parameters);
    }
    public DataSet get_POWO_Details_ForApproval(string strempcode, double dPOWOID)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_POWO_Details_Apprvoval"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@POWOID", dPOWOID)
       };
        return ExecuteDataSet("get_POWO_Details_ForApproval", "SP_VSCB_GETALL_DETAILS", "get_POWO_Details_Apprvoval", parameters);
    }
    public DataSet get_Approved_POWOMilestone_Details(string strempcode, double dPOWOID)
    {
        var parameters = new[]
       {
            new SqlParameter("@stype", "get_ApprovedPOWO_Milestone_Details"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@POWOID", dPOWOID)
       };
        return ExecuteDataSet("get_Approved_POWOMilestone_Details", "SP_VSCB_GETALL_DETAILS", "get_ApprovedPOWO_Milestone_Details", parameters);
    }
    public DataSet get_Approved_Milestone_View(Double dPOID, int srno)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Approved_POWOMilestone_View"),
            new SqlParameter("@POID", dPOID),
            new SqlParameter("@Srno", srno)
        };
        return ExecuteDataSet("get_Approved_Milestone_View", "SP_VSCB_GETALL_DETAILS", "get_Approved_POWOMilestone_View", parameters);
    }
    public void InsertInvoice_CostCeterAmt(string stype, double dinvoiceId, int idept_id, decimal dCostcenterAmt, int srno)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", stype),
            new SqlParameter("@InvoiceID", dinvoiceId),
            new SqlParameter("@VendorId", idept_id),
            new SqlParameter("@DirectTax_Amount", dCostcenterAmt),
            new SqlParameter("@potypeid", srno)
        };
        ExecuteNonQuery("InsertInvoice_CostCeterAmt", "SP_VSCB_CreateInvoice", stype, parameters);
    }
    public void InsertInvoice_CostCeterAmt(string stype, double dinvoiceId, int idept_id, decimal dCostcenterAmt, int srno, decimal dCostcenterAmt_Acc)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", stype),
            new SqlParameter("@InvoiceID", dinvoiceId),
            new SqlParameter("@VendorId", idept_id),
            new SqlParameter("@DirectTax_Amount", dCostcenterAmt),
            new SqlParameter("@potypeid", srno),
            new SqlParameter("@payable_Amt_With_Tax", dCostcenterAmt_Acc)
        };
        ExecuteNonQuery("InsertInvoice_CostCeterAmt", "SP_VSCB_CreateInvoice", stype, parameters);
    }
    public DataSet getFormated_Amount(string stype, decimal InvoiceAmt, decimal CGSTAmt, decimal SGSTAmt, decimal IGSTAmt, decimal InvoiceAmtwithGST)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@InvoiceAmt", InvoiceAmt),
            new SqlParameter("@CGSTAmt", CGSTAmt),
            new SqlParameter("@SGSTAmt", SGSTAmt),
            new SqlParameter("@IGSTAmt", IGSTAmt),
            new SqlParameter("@InvoiceAmtwithGST", InvoiceAmtwithGST)
        };
        return ExecuteDataSet("getFormated_Amount", "SP_VSCB_GETALL_DETAILS", stype, parameters);
    }
    public DataSet getFormated_Amount(string stype, string scurrencyName, decimal InvoiceAmt, decimal CGSTAmt, decimal SGSTAmt, decimal IGSTAmt, decimal InvoiceAmtwithGST)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", stype),
            new SqlParameter("@InvoiceAmt", InvoiceAmt),
            new SqlParameter("@CGSTAmt", CGSTAmt),
            new SqlParameter("@SGSTAmt", SGSTAmt),
            new SqlParameter("@IGSTAmt", IGSTAmt),
            new SqlParameter("@InvoiceAmtwithGST", InvoiceAmtwithGST),
            new SqlParameter("@CurName", scurrencyName),
        };
        return ExecuteDataSet("getFormated_Amount", "SP_VSCB_GETALL_DETAILS", stype, parameters);
    }
    public DataSet getDelete_edit_View(string strempcode, double dPOWOID)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_DeletePOWOList_update"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@POWOID", dPOWOID)
        };
        return ExecuteDataSet("getDelete_edit_View", "SP_VSCB_GETALL_DETAILS", "get_DeletePOWOList_update", parameters);
    }
    public DataSet getDeletePOWOFrom_Temptable_edit(string strempcode, int srno)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Milestone_fromTemp_edit"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@Srno", srno)
        };
        return ExecuteDataSet("getDeletePOWOFrom_Temptable_edit", "SP_VSCB_GETALL_DETAILS", "get_Milestone_fromTemp_edit", parameters);
    }
    public DataSet getMilestoneFrom_Temptable_edit_New(string strempcode, int srno, string PoWoNO)
    {
        var parameters = new[]
        {
            new SqlParameter("@stype", "get_Milestone_fromTemp_edit"),
            new SqlParameter("@empcode", strempcode),
            new SqlParameter("@Srno", srno),
            new SqlParameter("@powonumber", PoWoNO)
        };
        return ExecuteDataSet("getMilestoneFrom_Temptable_edit_New", "SP_VSCB_GETALL_DETAILS", "get_Milestone_fromTemp_edit", parameters);
    }

    #endregion

    #region Candidate Offer Latter Generate 19-08-22

    public DataTable Insert_Generate_Offer_Candidate(string qtype, int TempLatterID, string Emp_Code, string Loc_code, int PID, string CandidateName, int Recruitment_ReqID, int Candidate_ID,
     decimal BASIC, decimal HRA, decimal CONVEYANCE, decimal ADHOC_ALLOWANCE, decimal SKILL_ALLOWANCE, decimal SUPERAN_ALLOWANCE, decimal CERTIFICATE_ALLOWANCE, decimal MULTI_SKILL_ALLOWANCE, decimal ADDITIONAL_SKILL_ALLOWANCE, decimal CAR_ALLOWANCE, decimal FOOD_ALLOWANCE, decimal Special_Allow,
     decimal TOTAL1, decimal LTA, decimal MEDICAL, decimal DRIVER_SALARY, decimal CAR_LEASE,
     decimal TOTAL2, decimal PF, decimal GRATUITY_B, decimal TOTAL3, decimal MEDICLAIM,
     decimal GROUP_ACC_POLICY, decimal RETENTION_BONUS, decimal TOTAL4, decimal CTC_PER_MONTH, decimal CTC_PER_ANNUM,
     decimal PLP_VARIABLE_PAY, decimal CTC_PER_ANNUM_INCLUDING_PLP, decimal ANNUAL_BONUS, decimal OTHER, int StructureID_HRA,
     int StructureID_SUPERAN, int StructureID_LTA, int StructureID_PF, int StructureID_GRATUTY, decimal PLP_VARIABLE_Percentage,
     int StructureID_Skill_All, string CandidateAddress, string Retention_Comment, decimal ALP_Amount, string ALP_Comment,
     decimal TOTAL5, decimal health_Check_Up, decimal Car_Hire_Cost, decimal Car_Expenses_Reimursement, decimal Car_FUEL_Expenses_Reimursement)
    {
        var parameters = new[]
       {
        new SqlParameter("@qtype", qtype),
        new SqlParameter("@EmpCode", Emp_Code),
        new SqlParameter("@TempLatterID", TempLatterID),
        new SqlParameter("@Loc_code", Loc_code),
        new SqlParameter("@PID", PID),
        new SqlParameter("@CandidateName", CandidateName),
        new SqlParameter("@Recruitment_ReqID", Recruitment_ReqID),
        new SqlParameter("@Candidate_ID", Candidate_ID),
        new SqlParameter("@BASIC", BASIC),
        new SqlParameter("@HRA", HRA),
        new SqlParameter("@CONVEYANCE", CONVEYANCE),
        new SqlParameter("@ADHOC_ALLOWANCE", ADHOC_ALLOWANCE),
        new SqlParameter("@SKILL_ALLOWANCE", SKILL_ALLOWANCE),
        new SqlParameter("@SUPERAN_ALLOWANCE", SUPERAN_ALLOWANCE),
        new SqlParameter("@CERTIFICATE_ALLOWANCE", CERTIFICATE_ALLOWANCE),
        new SqlParameter("@MULTI_SKILL_ALLOWANCE", MULTI_SKILL_ALLOWANCE),
        new SqlParameter("@ADDITIONAL_SKILL_ALLOWANCE", ADDITIONAL_SKILL_ALLOWANCE),
        new SqlParameter("@CAR_ALLOWANCE", CAR_ALLOWANCE),
        new SqlParameter("@FOOD_ALLOWANCE", FOOD_ALLOWANCE),
        new SqlParameter("@Special_Allow", Special_Allow),
        new SqlParameter("@TOTAL1", TOTAL1),
        new SqlParameter("@LTA", LTA),
        new SqlParameter("@MEDICAL", MEDICAL),
        new SqlParameter("@DRIVER_SALARY", DRIVER_SALARY),
        new SqlParameter("@CAR_LEASE", CAR_LEASE),
        new SqlParameter("@TOTAL2", TOTAL2),
        new SqlParameter("@PF", PF),
        new SqlParameter("@GRATUITY_B", GRATUITY_B),
        new SqlParameter("@TOTAL3", TOTAL3),
        new SqlParameter("@MEDICLAIM", MEDICLAIM),
        new SqlParameter("@GROUP_ACC_POLICY", GROUP_ACC_POLICY),
        new SqlParameter("@RETENTION_BONUS", RETENTION_BONUS),
        new SqlParameter("@TOTAL4", TOTAL4),
        new SqlParameter("@CTC_PER_MONTH", CTC_PER_MONTH),
        new SqlParameter("@CTC_PER_ANNUM", CTC_PER_ANNUM),
        new SqlParameter("@PLP_VARIABLE_PAY", @PLP_VARIABLE_PAY),
        new SqlParameter("@CTC_PER_ANNUM_INCLUDING_PLP", CTC_PER_ANNUM_INCLUDING_PLP),
        new SqlParameter("@ANNUAL_BONUS", ANNUAL_BONUS),
        new SqlParameter("@OTHER", OTHER),
        new SqlParameter("@StructureID_HRA", StructureID_HRA),
        new SqlParameter("@StructureID_SUPERAN", StructureID_SUPERAN),
        new SqlParameter("@StructureID_LTA", StructureID_LTA),
        new SqlParameter("@StructureID_PF", StructureID_PF),
        new SqlParameter("@StructureID_GRATUTY", StructureID_GRATUTY),
        new SqlParameter("@PLP_VARIABLE_Percentage", PLP_VARIABLE_Percentage),
        new SqlParameter("@StructureID_Skill_All", StructureID_Skill_All),
        new SqlParameter("@CandidateAddress", CandidateAddress),
        new SqlParameter("@Joining_Comment", Retention_Comment),
        new SqlParameter("@ALP_ALLOWANCE", ALP_Amount),
        new SqlParameter("@ALP_Comment", ALP_Comment),
        new SqlParameter("@health_Check_Up", health_Check_Up),
        new SqlParameter("@Total5", TOTAL5),
        new SqlParameter("@Car_Hire_Cost", Car_Hire_Cost),
        new SqlParameter("@Car_Expenses_Reimursement", Car_Expenses_Reimursement),
        new SqlParameter("@Car_FUEL_Expenses_Reimursement", Car_FUEL_Expenses_Reimursement)
    };
        return ExecuteDataTable("Insert_Generate_Offer_Candidate", "SP_Rec_Generate_Offer_Candidate", qtype, parameters);
    }

    public DataTable Get_Generate_Offer_Count(string qtype, int Offer_App_ID, int Recruitment_ReqID, int Candidate_ID, string Emp_Code)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Candidate_ID", Candidate_ID),
            new SqlParameter("@Offer_App_ID", Offer_App_ID),
            new SqlParameter("@Recruitment_ReqID", Recruitment_ReqID),
            new SqlParameter("@EmpCode", Emp_Code)
        };
        return ExecuteDataTable("Get_Generate_Offer_Count", "SP_Rec_Generate_Offer_Candidate", qtype, parameters);
    }
    public DataSet Get_Offer_Compensation_Parameters(string qtype, string Emp_Code, int EmploymentTypeID, string Band)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@EmpCode", Emp_Code),
            new SqlParameter("@Band", Band),
            new SqlParameter("@PID", EmploymentTypeID)
        };
        return ExecuteDataSet("Get_Offer_Compensation_Parameters", "SP_Rec_Generate_Offer_Candidate", qtype, parameters);
    }
    public void send_mailto_CandidateLoginDetail_ELC_Offer(string StrCandidateName, string StrCandidateUserName, string toMailIDs, string strsubject, string StrPassword, string StrmailContain, String StrLink, string emailCC, string Attachments, string Designation, string Releasedate, string RecruiterName, string RecruiterEmail, string RecruiterMobile)
    {
        StringBuilder strbuild = new StringBuilder();
        strsubject = strsubject + "  ";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td> Dear  " + StrCandidateName + ", </td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td> <span style='background-color: #f6fafd;color: #0072d0'>Congratulations </span> from HIGHBAR!</ td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td>After going through the HIGHBAR selection process, we believe that your knowledge, skills and experience would be suitable for our team. We hope you will enjoy your role and make a significant contribution to the overall success of organization.</ td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td>We are pleased to offer you a position in the company as <b>" + Designation + ".</b></ td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td>Please accept the attached offer letter through <a href='" + StrLink + "'> this link</a> and confirm the date of joining. The acceptance of this letter should reach us before <b>" + Releasedate + "</b> else this offer letter will stand cancelled.</ td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td>If you have any questions or need additional information, please don’t hesitate to contact <b>" + RecruiterName + "</b> by email " + RecruiterEmail + " and phone " + RecruiterMobile + ".</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td>We look forward to welcoming you to the HIGHBAR Family.</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td>Following are your credentials to access this form</td></tr>");
            strbuild.Append("<tr><td>User Id : " + StrCandidateUserName + "</ td></tr>");
            strbuild.Append("<tr><td>Password : " + StrPassword + "</ td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>Thanks & Regards,</td></tr>");
            strbuild.Append("<tr><td><b>HR Team</b></td></tr>");
            strbuild.Append("</table>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), Attachments, emailCC);
        }
        catch (Exception ex)
        {

        }
    }
    public void send_mailto_CandidateLoginDetail_ELC_Revised_Offer(string StrCandidateName, string StrCandidateUserName, string toMailIDs, string strsubject, string StrPassword, string StrmailContain, String StrLink, string emailCC, string Attachments, string Designation, string Releasedate, string RecruiterName, string RecruiterEmail, string RecruiterMobile)
    {
        StringBuilder strbuild = new StringBuilder();
        strsubject = strsubject + "  ";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td> Dear  " + StrCandidateName + ", </td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td> <span style='background-color: #f6fafd;color: #0072d0'>Congratulations </span> from HIGHBAR!</ td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td>After going through the HIGHBAR selection process, we believe that your knowledge, skills and experience would be suitable for our team. We hope you will enjoy your role and make a significant contribution to the overall success of organization.</ td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td>We are pleased to offer you a position in the company as <b>" + Designation + ".</b></ td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td>Please accept the attached offer letter through <a href='" + StrLink + "'> this link</a> and confirm the date of joining. The acceptance of this letter should reach us before <b>" + Releasedate + "</b> else this offer letter will stand cancelled.</ td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td>If you have any questions or need additional information, please don’t hesitate to contact <b>" + RecruiterName + "</b> by email " + RecruiterEmail + " and phone " + RecruiterMobile + ".</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td>We look forward to welcoming you to the HIGHBAR Family.</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td>Following are your credentials to access this form</td></tr>");
            strbuild.Append("<tr><td>User Id : " + StrCandidateUserName + "</ td></tr>");
            strbuild.Append("<tr><td>Password : " + StrPassword + "</ td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>Thanks & Regards,</td></tr>");
            strbuild.Append("<tr><td><b>HR Team</b></td></tr>");
            strbuild.Append("</table>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), Attachments, emailCC);
        }
        catch (Exception ex)
        {

        }
    }
    public DataTable Set_Generate_Offer_FileName(string qtype, int Offer_App_ID, int Recruitment_ReqID, int Candidate_ID, string Emp_Code, string FileName, string ProbableJoiningDate)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Candidate_ID", Candidate_ID),
            new SqlParameter("@Offer_App_ID", Offer_App_ID),
            new SqlParameter("@Recruitment_ReqID", Recruitment_ReqID),
            new SqlParameter("@EmpCode", Emp_Code),
            new SqlParameter("@CandidateName", FileName),
            new SqlParameter("@EffectiveDate", ProbableJoiningDate)
        };
        return ExecuteDataTable("Set_Generate_Offer_FileName", "SP_Rec_Generate_Offer_Candidate", qtype, parameters);

    }

    public DataTable InsertCandidate_Offer_Approval_New(string empCode, DateTime OfferDate, int RecJobJoiningID, int Recruitment_ReqID, int Candidate_ID, string Comment, string multiplefilenameadd, decimal Amount1, decimal Amount2, int IsException, string BAND, string RecruitmentCharges, DateTime ProbableJoiningDate, int PID, int PositionTitle_ID, string LocationName, string LocationOffice, DateTime ProbableAcceptDatee, string StrCheckdateAccpt)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@mode", "InsertOfferApproval"),
            new SqlParameter("@empCode", empCode),
            new SqlParameter("@OfferDate", OfferDate),
            new SqlParameter("@Candidate_ID", Candidate_ID),
            new SqlParameter("@RecJobJoiningID", RecJobJoiningID),
            new SqlParameter("@Recruitment_ReqID", Recruitment_ReqID),
            new SqlParameter("@Comment", Comment),
            new SqlParameter("@multiplefilenameadd", multiplefilenameadd),
            new SqlParameter("@Amount1", Amount1),
            new SqlParameter("@Amount2", Amount2),
            new SqlParameter("@IsException", IsException),
            new SqlParameter("@BAND", BAND),
            new SqlParameter("@RecruitmentCharges", RecruitmentCharges),
            new SqlParameter("@ProbableJoiningDate", ProbableJoiningDate),
            new SqlParameter("@PID", PID),
            new SqlParameter("@PositionTitle_ID", PositionTitle_ID),
            new SqlParameter("@loc_code", LocationName),
            new SqlParameter("@locOffice_code", LocationOffice)
        };
        if (StrCheckdateAccpt == "1")
            parameters.Add(new SqlParameter("@ProbableAcceptDate", ProbableAcceptDatee));
        else
            parameters.Add(new SqlParameter("@ProbableAcceptDate", DBNull.Value));


        return ExecuteDataTable("InsertCandidate_Offer_Approval_New", "sp_Offer_Approval_Details", "InsertOfferApproval", parameters.ToArray());
    }
    public void send_mailto_Recruiter_Joining_Extended(string Emp_Name, string ReqMailID, string toMailIDs, string strsubject, string name, string JoiningDate, string JoiningStatus, string remark, string mailContainoneline, string RequisitionNo, string RequisitionDate, string RequiredByDate, string Location, string Module, string PositionTitle, string DepartmentName, string Band, string NoOfPosition, string RecruiterName, string emailCC)
    {
        StringBuilder strbuild = new StringBuilder();
        strsubject = strsubject + "  ";
        try
        {
            strbuild = new StringBuilder();
            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td> Dear Sir/ Madam,</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>" + mailContainoneline + "</ td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
            strbuild.Append("<tr><td>Requisition No :</td><td> " + RequisitionNo + "</td><td></td></tr>");
            strbuild.Append("<tr><td>Requisitioner Name :</td><td> " + Emp_Name + "</td><td></td></tr>");
            strbuild.Append("<tr><td>Requisition Date :</td><td> " + RequisitionDate + "</td><td></td></tr>");
            strbuild.Append("<tr><td>Required By Date :</td><td> " + RequiredByDate + "</td><td></td></tr>");
            strbuild.Append("<tr><td>Department :</td><td colspan=2> " + DepartmentName + "</td></tr>");
            strbuild.Append("<tr><td>Location :</td><td colspan=2> " + Location + "</td></tr>");
            strbuild.Append("<tr><td>Skill Set :</td><td > " + Module + "</td><td></td></tr>");
            strbuild.Append("<tr><td>Position Title :</td><td colspan=2> " + PositionTitle + "</td></tr>");
            strbuild.Append("<tr><td>Band :</td><td> " + Band + "</td><td></td></tr>");
            strbuild.Append("<tr><td>NoOfPosition :</td><td> " + NoOfPosition + "</td><td></td></tr>");
            strbuild.Append("<tr><td>----------------------------------</td><td>------------------------------</td><td></td></tr>");
            strbuild.Append("<tr><td>Candidate name :</td><td> " + name + "</td><td></td></tr>");
            strbuild.Append("<tr><td>Recruiter name :</td><td> " + RecruiterName + "</td><td></td></tr>");
            strbuild.Append("<tr><td>Date :</td><td colspan=2> " + JoiningDate.Replace("/", "-") + "</td></tr>");
            strbuild.Append("<tr><td> Status :</td><td> " + JoiningStatus + "</td></tr>");
            strbuild.Append("<tr><td>Remark :</td><td> " + remark + "</td><td></td></tr>");

            if (Convert.ToString(name).Trim() != "")
                strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("</table>");


            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", emailCC);

        }
        catch (Exception ex)
        {

        }
    }

    public DataTable GetRequisition_OffER_Project_Detail(string OfferCondition, int Offer_App_ID, int Reqid, string qtype, string comp_code, int dept_Id)
    {
        var parameters = new[]
        {
            new SqlParameter("@Stype", "get_HOD_Project_Details"),
            new SqlParameter("@REQID", Reqid),
            new SqlParameter("@Offer_App_ID", Offer_App_ID),
            new SqlParameter("@comp_code", comp_code),
            new SqlParameter("@Dept_Id", dept_Id),
            new SqlParameter("@OfferCondition", OfferCondition)
        };
        return ExecuteDataTable("GetRequisition_OffER_Project_Detail", "GETREQUISITION_OFFER_APPROVER_STATUS_COMP", "get_HOD_Project_Details", parameters);
    }

    #endregion

    #region Temp Timesheet
    public DataSet GetTimesheetDetailForDate_Temp(string date, string emp_code, string status)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", "GETCurrentWeekDetail"),
            new SqlParameter("@Emp_Code", emp_code),
            new SqlParameter("@Timesheet_date", date),
            new SqlParameter("@status", status)

        };
        return ExecuteDataSet("GetTimesheetDetailForDate_Temp", "SP_Timesheet_Temp", "GETCurrentWeekDetail", parameters);
    }
    public DataSet GetTimesheetListDetailTAB_Temp(string emp_code)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GetTimesheetListDetailTAB"),
            new SqlParameter("@Emp_Code", emp_code)
        };
        return ExecuteDataSet("GetTimesheetListDetailTAB_Temp", "SP_Timesheet_Temp", "GetTimesheetListDetailTAB", parameters);
    }
    public DataTable GetWeekStartDateEndDate_Temp(string TimesheetDate)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETWeekDayes"),
            new SqlParameter("@Timesheet_date", TimesheetDate)
        };
        return ExecuteDataTable("GetWeekStartDateEndDate_Temp", "SP_Timesheet_Temp", "GETWeekDayes", parameters);
    }
    public void InsertTimeSheet_Temp(string qtype, double timesheet_id, string Emp_Code, string Timesheet_date, string ProjectName, int TaskId, string Hours, string status, string Description)
    {
        var parameters = new[]
           {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", timesheet_id),
            new SqlParameter("@TimesheetId", timesheet_id),
            new SqlParameter("@Emp_Code", Emp_Code),
            new SqlParameter("@Timesheet_date", Timesheet_date),
            new SqlParameter("@ProjectName", ProjectName),
            new SqlParameter("@TaskId", TaskId),
            new SqlParameter("@Hours", Hours),
            new SqlParameter("@status", status),
            new SqlParameter("@Description", Description)
        };
        ExecuteScalar("InsertTimeSheet_Temp", "SP_Timesheet_Temp", qtype, parameters);
    }
    #endregion

    #region Candidate details 08-12-2022
    public DataTable getRecruitmentInboxByCandiate(string qtype, string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@CreatedBy", empCode)
        };
        return ExecuteDataTable("getRecruitmentInboxByCandiate", "SP_ELC_CandidateDetails", qtype, parameters);
    }
    public DataSet getRecruitmentCandiateDetailsByCandidate(string qtype, double CandidateId)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@CandidateId", CandidateId)
        };
        return ExecuteDataSet("getRecruitmentCandiateDetailsByCandidate", "SP_ELC_CandidateDetails", qtype, parameters);
    }
    public void UpdateCandidateCompletedStatus(string qtype, string CreatedBy, double CandidateId, bool IsCompletedCanDetails, string Remark)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@CandidateId", CandidateId),
            new SqlParameter("@IsCompletedCanDetails", IsCompletedCanDetails),
            new SqlParameter("@CreatedBy", CreatedBy),
            new SqlParameter("@RecruiterRemark", Remark)
        };
        ExecuteScalar("UpdateCandidateCompletedStatus", "SP_ELC_CandidateDetails", qtype, parameters);
    }
    public void send_mailto_Candidate_Re_Submit(string candidateName, string rec_Name, string toMailIDs, string strsubject, string tRemarks, string ccmailid, string strLeaveReqstURL)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                strbuild.Append("<tr><td>TO:" + toMailIDs + "</td></tr>");
                strbuild.Append("<tr><td>CC:" + ccmailid + "</td></tr>");
                strbuild.Append("<tr><td style='height:10px'></td></tr>");
                strbuild.Append("<tr><td> Dear " + candidateName + ",</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>This is to inform you that " + rec_Name + " has sent back the Pre-joining form for correction with following remarks. Do the corrections as directed and re-submit the Pre-joining form on immediate priority.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>Recruiter’s Correction Remarks:- " + tRemarks + "</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'> Click <a href='" + strLeaveReqstURL + "'> here </a> to go Pre-Joining Form</td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);


        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region Retaination_Resignation
    public void SendMail_Retaination_Moderation(string toMailIDs, string Name, string strsubject, string Employee_Name, string LoginName, string strbody, string cc_email, string redirectURL, string MailAttachment, string FileName)
    {
        StringBuilder strbuild = new StringBuilder();
        //strsubject = strsubject + " of " + Employee_Name;
        try
        {
            strbuild = new StringBuilder();
            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td> Dear " + Name + ",</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td> This is to bring it to your notice, that <B>" + Employee_Name + "</B> is retained by <B>" + LoginName + "</B> </td></tr>");// again before the agreed Mandatory Bond / Retention Date - <b>" + Retentiondate + "</b>.</td></tr>");
            strbuild.Append("<tr><td> Following are the details for your reference. Kindly take appropriate actions and share the revised CTC letter using the link below.</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td style='height:10px'><a href='" + redirectURL + "' target='_blank'> Click here to take action</td></tr>");
            strbuild.Append("<tr><td style='height:5px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
            if (Convert.ToString(strbody).Trim() != "")
            {
                strbuild.Append("<tr><td style='height:15px'></td></tr>");
                strbuild.Append("<tr><td colspan=2>" + Convert.ToString(strbody).Trim() + "</td></tr>");
            }
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:15px'></td></tr>");
            strbuild.Append("<tr><td>This is a system generated mail, Please do not reply.</td></tr>");
            strbuild.Append("</table>");
            sendMail_Retention_Employee(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), MailAttachment, cc_email, FileName);
        }
        catch (Exception ex)
        {

        }
    }
    public void SendMail_Retaination_CreateBy(string toMailIDs, string Name, string strsubject, string Employee_Name, string strbody, string cc_email, string redirectURL, string FileName)
    {
        StringBuilder strbuild = new StringBuilder();
        //strsubject = strsubject + " of " + Employee_Name;
        try
        {
            strbuild = new StringBuilder();
            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td> Dear All,</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td> This is to bring it to your notice, that <B>" + Name + "</B> has uploaded the revised CTC letter for <B>" + Employee_Name + " </B></td></tr>");// again before the agreed Mandatory Bond / Retention Date - <b>" + Retentiondate + "</b>.</td></tr>");
            strbuild.Append("<tr><td> Following are the details for your reference. Kindly take appropriate action.</td></tr>");
            strbuild.Append("<tr><td style='height:5px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:95%';'color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular>");
            if (Convert.ToString(strbody).Trim() != "")
            {
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td colspan=2>" + Convert.ToString(strbody).Trim() + "</td></tr>");
            }
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            //strbuild.Append("<tr><td style='height:10px'><a href='" + redirectURL + "' target='_blank'> Click here to take action</td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is a system generated mail, Please do not reply.</td></tr>");
            strbuild.Append("</table>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), FileName, cc_email);
        }
        catch (Exception ex)
        {

        }
    }
    public DataTable Get_Retention_ID(string Qtype, string EmpCode, int RetentionID)
    {
        var parameters = new[]
        {
            new SqlParameter("@Qtype", Qtype),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@RetentionID", RetentionID)
        };
        return ExecuteDataTable("Get_Retention_ID", "SP_Employee_Retention_Details", Qtype, parameters);
    }
    public DataTable Get_Dept_Retention_Detail(string Qtype, string EmpCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@Qtype", Qtype),
            new SqlParameter("@EmpCode", EmpCode)
        };
        return ExecuteDataTable("Get_Dept_Retention_Detail", "SP_Employee_Retention_Details", Qtype, parameters);
    }
    public DataTable Insert_Retention_Employee(string Qtype, int RetentionID, string AppEmpCode, string EmpCode, int RetentionTypeID, string WithEffectFrom, DateTime FromDate, DateTime ToDate, string Remarks, string Moderation_Code, string multiplefilenameadd, int IsException, int StatusID)
    {
        var parameters = new[]
        {
            new SqlParameter("@Qtype", Qtype),
            new SqlParameter("@RetentionID", RetentionID),
            new SqlParameter("@EmpCode", EmpCode),
            new SqlParameter("@RetentionTypeID", RetentionTypeID),
            new SqlParameter("@WithEffectFrom", WithEffectFrom),
            new SqlParameter("@FromDate", FromDate),
            new SqlParameter("@ToDate", ToDate),
            new SqlParameter("@Remarks", Remarks),
            new SqlParameter("@multiplefilenameadd", multiplefilenameadd),
            new SqlParameter("@Moderation_Code", Moderation_Code),
            new SqlParameter("@Flag", IsException),
            new SqlParameter("@AppEmpCode", AppEmpCode),
            new SqlParameter("@StatusID", StatusID)
        };
        return ExecuteDataTable("Insert_Retention_Employee", "SP_Employee_Retention_Details", Qtype, parameters);
    }
    public DataTable Update_Retention_Employee(string Qtype, int RetentionID, string AppEmpCode, string EmpCode, string Remarks, string multiplefilenameadd, int StatusID)
    {
        var parameters = new[]
       {
        new SqlParameter("@Qtype", Qtype),
        new SqlParameter("@RetentionID", RetentionID),
        new SqlParameter("@EmpCode", EmpCode),
        new SqlParameter("@Remarks", Remarks),
        new SqlParameter("@multiplefilenameadd", multiplefilenameadd),
        new SqlParameter("@AppEmpCode", AppEmpCode),
        new SqlParameter("@StatusID", StatusID)
        };
        return ExecuteDataTable("Update_Retention_Employee", "SP_Employee_Retention_Details", Qtype, parameters);
    }
    #endregion

    #region New Change CV Update 22-12-22
    public object InsertDegreeAndStream(string qtype, string emp_code, string name, bool isActive)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", 0),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@DegreeName", name),
            new SqlParameter("@IsActive", isActive)
        };
        return ExecuteScalar("InsertDegreeAndStream", "SP_CV_EMP_DETAILS", qtype, parameters);
    }    
    public object InsertOrganationName(int id, string emp_code, string name, bool isActive)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", "INSERTOrganisationNameText"),
            new SqlParameter("@Id", id),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@OrganisationName", name),
            new SqlParameter("@IsActive", isActive)
        };
        return ExecuteScalar("InsertOrganationName", "SP_CV_EMP_DETAILS", "INSERTOrganisationNameText", parameters);
    }
    #endregion

    #region New CV Update Changes
    public DataTable getEmployeeCVReviewInbox(string qtype, string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@EmpCode", empCode)
        };
        return ExecuteDataTable("getEmployeeCVReviewInbox", "SP_CV_EMP_Profile_Update", qtype, parameters);
    }
    public void send_mailto_Employee_Submit_Profile(string EmployeeName, string HR_Name, string toMailIDs, string strsubject, string tRemarks, string ccmailid, string strURL)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
                strbuild.Append("</td></tr>");
                //strbuild.Append("<tr><td>TO:"+ toMailIDs + "</td></tr>");
                //strbuild.Append("<tr><td>CC:"+ccmailid+"</td></tr>");
                strbuild.Append("<tr><td style='height:10px'></td></tr>");
                strbuild.Append("<tr><td> Dear " + HR_Name + ",</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>This is to inform you that " + EmployeeName + " has submitted CV Details. Please verify the details & update the status accordingly.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'>Please Click <a href='" + strURL + "'> here </a> to open the link.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
                strbuild.Append("</table>");
            }

            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);


        }
        catch (Exception ex)
        {

        }
    }
    public bool InsertUpdateCVReview(string qtype, string emp_code, string Action_By, string Remark, string Action)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@EmpCode", emp_code),
            new SqlParameter("@Action_By", Action_By),
            new SqlParameter("@Action_Remark", Remark),
            new SqlParameter("@Action", Action)
        };
        var status = ExecuteNonQuery("InsertUpdateCVReview", "SP_CV_EMP_Profile_Update", qtype, parameters);

        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public void send_mailto_Employee_Re_Submit_Profile(string EmployeeName, string HR_Name, string toMailIDs, string strsubject, string tRemarks, string ccmailid, string strURL)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();
            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
            strbuild.Append("</td></tr>");
            //strbuild.Append("<tr><td>TO:"+ toMailIDs + "</td></tr>");
            //strbuild.Append("<tr><td>CC:"+ccmailid+"</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td> Dear " + EmployeeName + ",</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>This is to inform you that " + HR_Name + " has sent back your CV for correction with following remarks. Do the corrections as directed and re-submit the CV on immediate priority.</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>HR Correction Remarks:- " + tRemarks + "</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'> Click <a href='" + strURL + "'> here </a> to go CV Update Form</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>"); strbuild.Append("</table>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    //public DataTable getEmployeeExpComp(string qtype, string empCode)
    //{
    //    DataTable ds = new DataTable();
    //    try
    //    {
    //        scon = new SqlConnection(ConfigurationManager.ConnectionStrings["sqlconnection"].ToString());
    //        if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
    //            scon.Open();
    //        sCommand = new SqlCommand();
    //        sCommand.Connection = scon;
    //        sCommand.CommandTimeout = 0;
    //        sCommand.CommandText = "SP_Exp_EMP_Mapping";
    //        sCommand.CommandType = CommandType.StoredProcedure;
    //        sCommand.Parameters.AddWithValue("@qtype", qtype);
    //        sCommand.Parameters.AddWithValue("@EmpCode", empCode);
    //        sadp = new SqlDataAdapter();
    //        sadp.SelectCommand = sCommand;
    //        sadp.Fill(ds);
    //    }
    //    catch (Exception ex)
    //    {
    //    }
    //    finally
    //    {
    //        scon.Close();
    //    }
    //    return ds;
    //}
    public DataTable getEmployeeExpComp(string qtype, string empCode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@EmpCode", empCode)
        };
        return ExecuteDataTable("getEmployeeExpComp", "SP_Exp_EMP_Mapping", qtype, parameters);
    }
    public DataTable getEmployeeExpCompSearch(string qtype, string empCode, string comp_code, string Exp_Id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Exp_Ids", Exp_Id),
            new SqlParameter("@Comp_Codes", comp_code),
            new SqlParameter("@Emp_Codes", empCode)
        };
        return ExecuteDataTable("getEmployeeExpCompSearch", "SP_Exp_EMP_Mapping", qtype, parameters);
    }

    //public bool InsertUpdateExpEmpMapping(string qtype, string emp_code, string project_Code, string exp_Ids, string CreatedBy)
    //{
    //    try
    //    {
    //        scon = new SqlConnection(ConfigurationManager.ConnectionStrings["sqlconnection"].ToString());
    //        if (scon.State == ConnectionState.Closed || scon.State == ConnectionState.Broken)
    //            scon.Open();
    //        sCommand = new SqlCommand();
    //        sCommand.Connection = scon;
    //        sCommand.CommandText = "[SP_Exp_EMP_Mapping]";
    //        sCommand.CommandType = CommandType.StoredProcedure;
    //        sCommand.Parameters.AddWithValue("@qtype", qtype);
    //        sCommand.Parameters.AddWithValue("@Comp_Codes", project_Code);
    //        sCommand.Parameters.AddWithValue("@Emp_Codes", emp_code);
    //        sCommand.Parameters.AddWithValue("@Exp_Ids", exp_Ids);
    //        sCommand.Parameters.AddWithValue("@Created_By", CreatedBy);
    //        var status = sCommand.ExecuteNonQuery();
    //        if (status > 0)
    //        {
    //            return true;
    //        }
    //        else
    //        {
    //            return false;
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        return false;
    //    }
    //    finally
    //    {
    //        scon.Close();
    //    }
    //}

    public bool InsertUpdateExpEmpMapping(string qtype, string emp_code, string project_Code, double exp_Id, string CreatedBy)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Comp_Codes", project_Code),
            new SqlParameter("@Emp_Codes", emp_code),
            new SqlParameter("@Exp_Id", exp_Id),
            new SqlParameter("@Created_By", CreatedBy)
        };
        var status = ExecuteNonQuery("InsertUpdateExpEmpMapping", "SP_Exp_EMP_Mapping", qtype, parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public bool ActiveInActiveExpEmpMapping(string qtype, double exp_Ids, string CreatedBy, bool IsActive)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", exp_Ids),
            new SqlParameter("@IsActive", IsActive),
            new SqlParameter("@Created_By", CreatedBy)
        };
        var status = ExecuteNonQuery("ActiveInActiveExpEmpMapping", "SP_Exp_EMP_Mapping", qtype, parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public void send_mailto_Employee_Approved_Profile(string EmployeeName, string HR_Name, string toMailIDs, string strsubject, string tRemarks, string ccmailid, string strURL)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            strbuild = new StringBuilder();
            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
            strbuild.Append("</td></tr>");
            //strbuild.Append("<tr><td>TO:"+ toMailIDs + "</td></tr>");
            //strbuild.Append("<tr><td>CC:"+ccmailid+"</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td> Dear " + EmployeeName + ",</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>This is to inform you that " + HR_Name + " has reviewed and approved your CV details.</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>HR Remarks:- " + tRemarks + "</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            //  strbuild.Append("<tr><td style='height:20px'> Click <a href='" + strURL + "'> here </a> to go CV Update Form</td></tr>");
            strbuild.Append("</table>");
            sendMail(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region Code for Bench Approval
    public object InsertEmployeeTransferRequestAppr(string qtype, string emp_code, string Status, string Appr_Emp_Code, int id, string RMName)
    {
        var parameters = new List<SqlParameter>
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Emp_Code", emp_code),
            new SqlParameter("@status", Status),
            new SqlParameter("@Appr_Emp_Code", Appr_Emp_Code),
            new SqlParameter("@Id", id)
        };
        if (Convert.ToString(RMName).Trim() != "")
            parameters.Add(new SqlParameter("@RM", RMName));

        return ExecuteScalar("InsertEmployeeTransferRequestAppr", "SP_EmployeeTransferRequest", qtype, parameters.ToArray());
    }
    public void SendEmailForDMTransferAppr(DataTable dataTable, string subject, string toEmail, string a_Name, string CreatedName, string link)
    {
        try
        {
            if (dataTable != null)
            {
                var ccEmails = "";
                StringBuilder strbuild = new StringBuilder();

                // Start of email body
                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;width:100%;table-layout:fixed;'>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Dear " + a_Name + ",</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>&nbsp;</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>" + CreatedName + " has created a transfer request as per the details below. Request your approval, please. </td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>&nbsp;</td></tr>");
                strbuild.Append("</table>");

                // Add the employee details table
                if (dataTable.Rows.Count > 0)
                {
                    strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;width:100%;table-layout:fixed;border-collapse: collapse;'>");
                    strbuild.Append("<tr style='height:20px;'><td colspan='4'>Details of the transfer request:</td></tr>");
                    strbuild.Append("<tr style='height:20px;'><td colspan='4'>&nbsp;</td></tr>");
                    strbuild.Append("<tr style='text-align:left;border: 1px solid black;'>");
                    strbuild.Append("<th style='border: 1px solid black;padding: 5px;'>Employee Name</th>");
                    strbuild.Append("<th style='border: 1px solid black;padding: 5px;'>Band</th>");
                    strbuild.Append("<th style='border: 1px solid black;padding: 5px;'>Designation</th>");
                    strbuild.Append("<th style='border: 1px solid black;padding: 5px;'>Project/Location</th>");
                    strbuild.Append("</tr>");

                    foreach (DataRow rows in dataTable.Rows)
                    {
                        strbuild.Append("<tr style='text-align:left;border: 1px solid black;'>");
                        strbuild.Append("<td style='border: 1px solid black;padding: 5px;'>" + Convert.ToString(rows["Emp_Name"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;padding: 5px;'>" + Convert.ToString(rows["BAND"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;padding: 5px;'>" + Convert.ToString(rows["Designation"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;padding: 5px;'>" + Convert.ToString(rows["emp_projectName"]).Trim() + "</td>");
                        strbuild.Append("</tr>");
                    }

                    strbuild.Append("</table>");
                }

                // Add action link
                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;width:100%;'>");
                strbuild.Append("<tr><td style='height:20px;'>&nbsp;</td></tr>");
                strbuild.Append("<tr><td><a href='" + link + "' style='color:blue;text-decoration:underline;'>Click here to take action</a></td></tr>");
                strbuild.Append("<tr><td style='height:20px;'>&nbsp;</td></tr>");
                strbuild.Append("</table>");

                strbuild.Append("<br><br><p style='color:#000000;font-size:9pt;font-family:Trebuchet MS;'>This is an auto generated email, please do not reply!</p>");

                // Send the email
                sendMailServiceRequest(toEmail, subject, Convert.ToString(strbuild).Trim(), "", ccEmails);
            }
        }
        catch (Exception ex)
        {
            // Handle exception
            throw;
        }
    }
    public DataTable Get_TransferRequestDetails(string Qtype, string a_emp_Code, string RequestId)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", Qtype),
            new SqlParameter("@Appr_Emp_Code", a_emp_Code),
            new SqlParameter("@ETRequestId", RequestId)
        };
        return ExecuteDataTable("Get_TransferRequestDetails", "SP_EmployeeTransferRequest", Qtype, parameters);
    }
    public void SendEmailForPRMTransferAppr(DataTable dataTable, string subject, string toEmail, string a_Name, string CreatedName, string link)
    {
        try
        {
            if (dataTable != null)
            {
                var ccEmails = "";

                StringBuilder strbuild = new StringBuilder();
                strbuild.Length = 0;
                strbuild.Clear();
                strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Dear " + a_Name + ",</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>This is to inform you that " + CreatedName + " has rejected your transfer request for the following employees. </td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("</table>");

                if (dataTable.Rows.Count > 0)
                {
                    strbuild.Append("<table width='100%' style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;border-collapse: collapse !important;'><tr><td></td><td></td><td></td><td></td></tr>");

                    strbuild.Append("<tr style='height:20px'><td></td><td></td><td></td><td></td></tr>");
                    strbuild.Append("<tr style='text-align:left !important;height:20px;border: 1px solid black;'><th style='border: 1px solid black;'>Employee Name</th><th style='border: 1px solid black;'>Band</th><th style='border: 1px solid black;'>Designation</th><th style='border: 1px solid black;'>Project/Location</th></tr>");
                    foreach (DataRow rows in dataTable.Rows)
                    {
                        strbuild.Append("<tr style='text-align:left !important;border: 1px solid black;'>");
                        strbuild.Append("<td style='border: 1px solid black;'>" + Convert.ToString(rows["Emp_Name"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;'>" + Convert.ToString(rows["BAND"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;'>" + Convert.ToString(rows["Designation"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;'>" + Convert.ToString(rows["emp_projectName"]).Trim() + "</td>");
                        strbuild.Append("</tr>");
                    }
                    strbuild.Append("</table>");
                }
                //strbuild.Append("<table><tr><td style='height:20px'></td></tr>");
                //strbuild.Append("<tr><td style='height:20px'><a href='" + link + "'> Please click here to take action </a></td></tr>");
                //strbuild.Append("</table>");
                sendMailServiceRequest(toEmail, subject, Convert.ToString(strbuild).Trim(), "", ccEmails);
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    #endregion

    #region Read data from Uploaded Excel File
    public DataTable ReadXCLFileOpenXl(string strfileNamepath)
    {
        DataTable dtCsv = new DataTable();
        //Create a new DataTable.
        DataTable dt = new DataTable();

        string read = System.IO.Path.GetFullPath(strfileNamepath);

        //Open the Excel file using ClosedXML.
        using (XLWorkbook workBook = new XLWorkbook(read))
        {
            //Read the first Sheet from Excel file.
            IXLWorksheet workSheet = workBook.Worksheet(1);
            //Loop through the Worksheet rows.
            bool firstRow = true;
            foreach (IXLRow row in workSheet.Rows())
            {
                //Use the first row to add columns to DataTable.
                if (firstRow)
                {
                    foreach (IXLCell cell in row.Cells())
                    {
                        dt.Columns.Add(cell.Value.ToString());
                    }
                    firstRow = false;
                }
                else
                {
                    //Add rows to DataTable.
                    dt.Rows.Add();
                    int i = 0;
                    foreach (IXLCell cell in row.Cells())
                    {
                        dt.Rows[dt.Rows.Count - 1][i] = cell.Value.ToString();
                        i++;
                    }
                }
            }

        }
        return dt;
    }
    #endregion
    
    #region ABAP Object Completion Sheet
    public void SendEmailForABAPToApprover(DataSet ds, string StartDate, string EndDate, string subject, string stremp_name, string urlApproval)
    {
        try
        {
            if (ds != null)
            {
                var toEmails = Convert.ToString(ds.Tables[1].Rows[0]["PMEmailaddressTo"]);
                var getToEmp_Name = Convert.ToString(ds.Tables[1].Rows[0]["PMEmpNameTo"]);
                var ccEmails = "";

                StringBuilder strbuild = new StringBuilder();
                strbuild.Length = 0;
                strbuild.Clear();
                strbuild.Append("<table width='100%'  cellpadding='0' cellspacing='0' style='border-collapse: collapse;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Dear " + getToEmp_Name + ",</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'></td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>" + stremp_name + " has submitted object completion sheet for week start date - <b>" + StartDate + "</b> and End Date - <b>" + EndDate + "</b>. Please check the below object detail and take action. </td></tr>");
                strbuild.Append("<tr style='height:30px;'><td colspan='5'></td></tr>");
                strbuild.Append("</table>");

                if (ds.Tables[1].Rows.Count > 0)
                {
                    strbuild.Append("<table width='80%' cellpadding='0' cellspacing='0' style='border-collapse: collapse;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;border-collapse: collapse !important;'>");

                    strbuild.Append("<tr style='text-align:left !important;height:20px;border: 1px solid black;'>");
                    strbuild.Append("<th style='border: 1px solid black;'>Project Name </th>");
                    strbuild.Append("<th style='border: 1px solid black;'>Is Completed </th>");
                    strbuild.Append("<th style='border: 1px solid black;'>Object Name (TCode)</th>");
                    strbuild.Append("<th style='border: 1px solid black;'>Object Type</th>");
                    strbuild.Append("<th style='border: 1px solid black;'>Object Description</th>");
                    strbuild.Append("</tr>");
                    foreach (DataRow rows in ds.Tables[1].Rows)
                    {
                        strbuild.Append("<tr style='text-align:left !important;border: 1px solid black;'>");
                        strbuild.Append("<td style='border: 1px solid black;margin-left: 5px'>" + Convert.ToString(rows["LocationCode"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;margin-left: 5px'>" + Convert.ToString(rows["IsCompleted"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;margin-left: 5px'>" + Convert.ToString(rows["ObjectCode"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;margin-left: 5px'>" + Convert.ToString(rows["Object_TypeName"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;margin-left: 5px'>" + Convert.ToString(rows["ObjectDescription"]).Trim() + "</td>");

                        strbuild.Append("</tr>");
                    }
                    strbuild.Append("</table>");
                }

                strbuild.Append("<br/><br/><p><a href=" + urlApproval + ">Please click here to view ABAP Object Completion.</a></p>");



                strbuild.Append("<br><br>This is an auto generated email, please do not reply!");



                sendMailServiceRequest(toEmails, subject, Convert.ToString(strbuild).Trim(), "", ccEmails);
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    public void SendEmailForApproverToABAP(DataSet ds, string StartDate, string EndDate, string subject, string sApproverName)
    {
        try
        {
            if (ds != null)
            {
                var toEmails = Convert.ToString(ds.Tables[0].Rows[0]["ToEmp_Emailaddress"]);
                var getToEmp_Name = Convert.ToString(ds.Tables[0].Rows[0]["ToEmpName"]);
                var ccEmails = "";

                StringBuilder strbuild = new StringBuilder();
                strbuild.Length = 0;
                strbuild.Clear();
                strbuild.Append("<table width='100%' cellpadding='0' cellspacing='0' style='border-collapse: collapse;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>Dear " + getToEmp_Name + ",</td></tr>");
                strbuild.Append("<tr style='height:20px;'><td></td><td></td><td></td><td></td><td></td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'>" + sApproverName + " has taken action on your object detail for week - <b>" + StartDate + "</b> - <b>" + EndDate + ".</b> </td></tr>");
                strbuild.Append("<tr style='height:20px;'><td colspan='5'></td></tr>");

                strbuild.Append("</table>");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    strbuild.Append("<table width='100%' cellpadding='0' cellspacing='0' style='border-collapse: collapse;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;border-collapse: collapse !important;'>");
                    // strbuild.Append("</td></tr>");
                    strbuild.Append("<tr><td colspan='5'></td></tr>");

                    strbuild.Append("<tr style='text-align:left !important;height:20px;border: 1px solid black;'>");
                    strbuild.Append("<th style='border: 1px solid black;'>Project Name </th>");
                    strbuild.Append("<th style='border: 1px solid black;'>Is Completed </th>");
                    strbuild.Append("<th style='border: 1px solid black;'>Object Name (TCode)</th>");
                    strbuild.Append("<th style='border: 1px solid black;'>Object Type</th>");
                    strbuild.Append("<th style='border: 1px solid black;'>Object Description</th>");
                    strbuild.Append("<th style='border: 1px solid black;'>Approver Status</th>");
                    strbuild.Append("<th style='border: 1px solid black;'>Approver Description</th>");
                    strbuild.Append("</tr>");
                    foreach (DataRow rows in ds.Tables[0].Rows)
                    {
                        strbuild.Append("<tr style='text-align:left !important;border: 1px solid black;'>");
                        strbuild.Append("<td style='border: 1px solid black;margin-left: 5px'>" + Convert.ToString(rows["LocationCode"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;margin-left: 5px'>" + Convert.ToString(rows["IsCompleted"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;margin-left: 5px'>" + Convert.ToString(rows["ObjectCode"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;margin-left: 5px'>" + Convert.ToString(rows["ObjectTypeName"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;margin-left: 5px'>" + Convert.ToString(rows["ObjectDescription"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;margin-left: 5px'>" + Convert.ToString(rows["Appr_Status"]).Trim() + "</td>");
                        strbuild.Append("<td style='border: 1px solid black;margin-left: 5px'>" + Convert.ToString(rows["Appr_Remakrs"]).Trim() + "</td>");
                        strbuild.Append("</tr>");
                    }
                    strbuild.Append("</table>");
                }

                strbuild.Append("<br><br>This is an auto generated email, please do not reply!");

                sendMailServiceRequest(toEmails, subject, Convert.ToString(strbuild).Trim(), "", ccEmails);
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    #endregion
    
    #region Customer Service Request
    public DataTable GetCustomerServiceRequestById(int id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "GETCustomerSERVICEDETAILBYID_ID"),
            new SqlParameter("@id", id)
        };
        return ExecuteDataTable("GetCustomerServiceRequestById", "SP_INSERTSERVICE_REQUEST", "GETCustomerSERVICEDETAILBYID_ID", parameters);
    }
    public void CustomerServiceRequest_send_mailto_ActionToEmployee_ServiceClosed(string employeeName, string serviceRequestno, string actionName, string actionBy, string createdDate, string requestDescription, string stoemail, string ccmailid)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "CUSTOMERFIRST :- Approval for Closure of Service Request - " + serviceRequestno;
        try
        {
            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear " + employeeName + ",</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");

            strbuild.Append("<tr><td>I hope you're doing well. I would like to inform you that Customer Success has approved the closure of the following service request.</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");

            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Service Request No: </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken: </td><td width='75%'>" + actionName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken By: </td><td width='75%'>" + actionBy + "</td></tr>");

            strbuild.Append("<tr><td width='25%'>Created On: </td><td width='75%'> " + createdDate + "</td></tr>");

            strbuild.Append("<tr><td width='25%'>Reply: </td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");

            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");

            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is an automatically generated email. Please do not reply.</td></tr>");
            strbuild.Append("</table>");

            Custs_sendMailServiceRequest(stoemail, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void CustomerServiceRequest_send_mailto_ActionToEmployee(int IsExceletd, string serviceRequestno, string toMailIDs, string actionName, string actionBy, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription, string customerName)
    {
        var strsubject = "";
        if (IsExceletd == 0)
        {
            //strsubject = "CustomerFIRST: Service Closure Request for Approval of "+ department + " ("+ serviceRequestno + ")";
            strsubject = "CUSTOMERFIRST :- Closure of Your Service Request - " + serviceRequestno;
        }
        else
        {
            // strsubject = "CustomerFIRST: Service Closure Request for Approval of " + department + " (" + serviceRequestno + ")";
            strsubject = "CUSTOMERFIRST :- Closure of Your Service Request - " + serviceRequestno;
        }

        try
        {

            #region old code 
            /*
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear " + customerName + ",</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");

            //strbuild.Append("<tr><td>Please be informed that Mr.Sanjay Abhiman Patil has closed Service Request "+ serviceRequestno + ".Kindly take appropriate action.</td></tr>");
            strbuild.Append("<tr><td>We are pleased to inform you that your service request (" + serviceRequestno + ") has been successfully resolved.Our team has taken necessary actions to address the concerns raised.</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>If you have any further questions or require additional assistance, please do not hesitate to reach out to us. We're always here to support you.</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Thank you for choosing Highbar Technocrat.We appreciate your trust in our services.</td></tr>");

            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to View Service Request</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is an automatically generated email. Please do not reply.</td></tr>");
            strbuild.Append("</table>");*/

            #endregion

            string responsePageURL = ConfigurationManager.AppSettings["CustomerService_Req_App_Cust"];
            string newurl = responsePageURL;

            //Fetching Settings from WEB.CONFIG file. 
            string FilePath = @"D:\HRMS\hrms\Email_Template\Email_Template_ServiceRequest_Closure.html";
            StreamReader str = new StreamReader(FilePath);
            string Mailbody = str.ReadToEnd();
            str.Close();
            Mailbody = Mailbody.Replace("{ClientName}", customerName);
            Mailbody = Mailbody.Replace("{urlnew}", newurl);
            Mailbody = Mailbody.Replace("{ServiceRequestNo}", serviceRequestno);

            Custs_sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(Mailbody).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void CustomerServiceRequest_send_mailto_ActionToEmployee_old(int IsExceletd, string serviceRequestno, string toMailIDs, string actionName, string actionBy, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription, string employeeName, string customerName)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "";
        if (IsExceletd == 0)
        {
            //strsubject = "CustomerFIRST: Service Closure Request for Approval of "+ department + " ("+ serviceRequestno + ")";
            strsubject = "CustomerFIRST :- Closure of Your Service Request - " + serviceRequestno;
        }
        else
        {
            // strsubject = "CustomerFIRST: Service Closure Request for Approval of " + department + " (" + serviceRequestno + ")";
            strsubject = "CustomerFIRST :- Closure of Your Service Request - " + serviceRequestno;
        }

        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear " + customerName + ",</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");

            //strbuild.Append("<tr><td>Please be informed that Mr.Sanjay Abhiman Patil has closed Service Request "+ serviceRequestno + ".Kindly take appropriate action.</td></tr>");
            strbuild.Append("<tr><td>We are pleased to inform you that your service request (" + serviceRequestno + ") has been successfully resolved and is now closed. Our team has taken all the necessary actions to address the concerns raised, and we trust the issue has been fully resolved to your satisfaction.</td></tr>");

            strbuild.Append("<tr><td>If you have any further questions or require additional assistance, please do not hesitate to reach out to us. We're always here to help.</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Thank you for choosing Highbar Technocrat.We appreciate your trust in our services.</td></tr>");

            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Service Request No: </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken: </td><td width='75%'>" + actionName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken By: </td><td width='75%'>" + actionBy + "</td></tr>");
            //strbuild.Append("<tr><td>Assigned To : </td><td >" + assgineTo + "</td></tr>");            
            strbuild.Append("<tr><td width='25%'>Created On: </td><td width='75%'> " + createdDate + "</td></tr>");
            //strbuild.Append("<tr><td width='25%'>Created For Department :</td><td width='75%'>" + department + "</td></tr>");
            if (IsExceletd == 0)
            {
                strbuild.Append("<tr><td width='25%'>Reply :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td width='25%'>Reply: </td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            }

            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            if (IsExceletd == 0)
            {
                // strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to View/Esclate Service Request</td></tr>");
            }
            else if (IsExceletd == 1)
            {
                strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to View Service Request</td></tr>");
            }
            else if (IsExceletd == 2)
            {
                strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to View Service Request</td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to View Service Request</td></tr>");
            }
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is an automatically generated email. Please do not reply.</td></tr>");
            strbuild.Append("</table>");

            Custs_sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void CustomerServiceRequest_send_mailto_AssignToEmployee(int IsExceletd, string serviceRequestno, string toMailIDs, string actionName, string actionBy, string assgineTo, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "";
        if (IsExceletd == 0)
        {
            strsubject = "Action update on your Customer Service Request " + serviceRequestno + "";
        }
        else
        {
            strsubject = "Action update on your escalated Customer Service Request " + serviceRequestno + "";
        }

        //var strsubject = "Action update on your Service Request "+ serviceRequestno + "";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            strbuild.Append("<tr><td>This is to inform you that following action has been taken on your Customer Service Request " + serviceRequestno + ".</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Action Taken : </td><td width='75%'>" + actionName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken By : </td><td width='75%'>" + actionBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Assigned To : </td><td width='75%'>" + assgineTo + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Service Request No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Project/ Location :</td><td width='75%'>" + department + "</td></tr>");
            if (IsExceletd == 0)
            {
                strbuild.Append("<tr><td width='25%'>Latest Comments :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td width='25%'>Latest Comments</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            }
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to view Service Request</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is an automatically generated email. Please do not reply.</td></tr>");
            strbuild.Append("</table>");

            Custs_sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void CustomerServiceRequest_send_mailto_AssignedAgent(int isEscalated, string serviceRequestno, string toMailIDs, string employeeName, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "";
        if (isEscalated == 1)
        {
            strsubject = "Escalated Customer Service Request " + serviceRequestno + " is assigned to you, your action is required ";
        }
        else
        {
            strsubject = "Customer Service Request " + serviceRequestno + " is assigned to you, your action is required";
        }

        try
        {
            strbuild = new StringBuilder();
            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            if (isEscalated == 1)
            {
                strbuild.Append("<tr><td> This is to inform you that escalated Customer Service Request of " + employeeName + " with following details is assigned to you. Please take appropriate action</td></tr>");

            }
            else
            {
                strbuild.Append("<tr><td> This is to inform you that " + employeeName + " has created new Customer Service Request with following details.Please take appropriate action</td></tr>");

            }
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Service Request No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Customer Name : </td><td width='75%'>" + employeeName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Project/ Location :</td><td width='75%'>" + department + "</td></tr>");
            if (isEscalated == 1)
            {
                strbuild.Append("<tr><td width='25%'>Latest Comments:</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td width='25%'>Latest Comments :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");

            }
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'>Please click here to take action on Service Request</a></td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is an automatically generated email. Please do not reply.</td></tr>");
            strbuild.Append("</table>");

            Custs_sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void CustomerServiceRequest_send_mailto_HeadOrCEOToSPOC(int IsCEO, string serviceRequestno, string toMailIDs, string employeeName, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription, string actiondate, string actionBy)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "Sent Back Of Customer Service Request " + serviceRequestno + "";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            if (IsCEO == 1)
            {
                strbuild.Append("<tr><td>This is to inform you that CEO has forwarded escalated request of " + employeeName + " to you. Please take appropriate action</td></tr>");
            }
            else if (IsCEO == 0)
            {
                strbuild.Append("<tr><td>This is to inform you that " + department + " head has forwarded escalated request of " + employeeName + " to you. Please take appropriate action</td></tr>");

            }
            else
            {
                strbuild.Append("<tr><td>This is to inform you that " + actionBy + "  has forwarded customer service request of " + employeeName + " to you. Please take appropriate action</td></tr>");

            }
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");

            strbuild.Append("<tr><td width='25%'>Service Request No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Creation Date : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Project/ Location :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Date :</td><td width='75%'>" + actiondate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action By :</td><td width='75%'>" + actionBy + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Latest Comments :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to take action on Service Request </td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is an automatically generated email. Please do not reply.</td></tr>");
            strbuild.Append("</table>");

            Custs_sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public DataTable CustomerService_GETHISTORYBYID(int id)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "CustomerService_GETSERVICEHISTORY"),
            new SqlParameter("@id", id)
       };
        return ExecuteDataTable("CustomerService_GETHISTORYBYID", "SP_INSERTSERVICE_REQUEST", "CustomerService_GETSERVICEHISTORY", parameters);
    }
    public void CustomerServiceRequest_send_mailto_EscalationHeadOrCEO(int IsCEO, string serviceRequestno, string toMailIDs, string employeeName, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription, string actiondate)
    {
        StringBuilder strbuild = new StringBuilder();
        //var strsubject = "Escalation of Customer Service Request " + serviceRequestno + "";
        var strsubject = "CUSTOMERFIRST: -Escalation of Customer Service Request Created for " + department + " by " + employeeName + " (" + serviceRequestno + ")";
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            if (IsCEO == 1)
            {
                strbuild.Append("<tr><td>Dear Sir,</td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            }

            strbuild.Append("<tr><td>This is to inform you that " + employeeName + " has escalated Customer Service Request with following details to you. Please take appropriate action</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Project/ Location :</td><td width='75%'>" + department + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Service Request No : </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Created On : </td><td width='75%'> " + createdDate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Date :</td><td width='75%'>" + actiondate + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action By :</td><td width='75%'>" + employeeName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Service Request. Description :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to take action on Service Request</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is an automatically generated email. Please do not reply.</td></tr>");
            strbuild.Append("</table>");

            Custs_sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void AssgineServiceRequestDetails(string emp_code, string ServicesDescripation, string qtype, string FilePath, string AssignedTo, char Is_Escalated, int ServiceDepartment, int Status, int ActionStatus, string Actionby, char Escalation_Type, int id, int CategoryId, int escalatedId)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", id),
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@ServicesDescripation", ServicesDescripation),
            new SqlParameter("@FilePath", FilePath),
            new SqlParameter("@AssignedTo", AssignedTo),
            new SqlParameter("@Is_Escalated", Is_Escalated),
            new SqlParameter("@ServiceDepartment", ServiceDepartment),
            new SqlParameter("@Status", Status),
            new SqlParameter("@ActionStatus", ActionStatus),
            new SqlParameter("@ActionBy", Actionby),
            new SqlParameter("@Escalation_Type", Escalation_Type),
            new SqlParameter("@CategoryId", CategoryId),
            new SqlParameter("@EscalatedId", escalatedId)
        };
        ExecuteNonQuery("AssgineServiceRequestDetails", "SP_INSERTSERVICE_REQUEST", qtype, parameters);
    }
    public DataTable get_CustomerService_Escaltions(int id, int iescalatedid)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "CustomerService_Empcode_Escalation"),
            new SqlParameter("@EscalatedId", iescalatedid),
            new SqlParameter("@id", id)
        };
        return ExecuteDataTable("get_CustomerService_Escaltions", "SP_INSERTSERVICE_REQUEST", "CustomerService_Empcode_Escalation", parameters);
    }
    public DataTable CustomerService_GetInboxServiceRequestRCH(string assgimentTo, string fromdate, string todate)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "CustomerService_GETEMPSERVICELISTARC"),
            new SqlParameter("@AssignedTo", assgimentTo),
            new SqlParameter("@fromDate", fromdate),
            new SqlParameter("@toDate", todate)
        };
        return ExecuteDataTable("CustomerService_GetInboxServiceRequestRCH", "SP_INSERTSERVICE_REQUEST", "CustomerService_GETEMPSERVICELISTARC", parameters);
    }
    public DataSet InsertCustomerServiceRequestDetails(string emp_code, string ServicesDescripation, string qtype, string FilePath, string AssignedTo, char Is_Escalated, int ServiceDepartment, int Status, int ActionStatus, string Actionby, char Escalation_Type, int idCategory)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@ServicesDescripation", ServicesDescripation),
            new SqlParameter("@FilePath", FilePath),
            new SqlParameter("@AssignedTo", AssignedTo),
            new SqlParameter("@Is_Escalated", Is_Escalated),
            new SqlParameter("@ServiceDepartment", ServiceDepartment),
            new SqlParameter("@Status", Status),
            new SqlParameter("@ActionStatus", ActionStatus),
            new SqlParameter("@ActionBy", Actionby),
            new SqlParameter("@Escalation_Type", Escalation_Type),
            new SqlParameter("@CategoryId", idCategory)
        };
        return ExecuteDataSet("InsertCustomerServiceRequestDetails", "SP_INSERTSERVICE_REQUEST", qtype, parameters);
    }
    public DataSet AssgineCustomerServiceRequestDetails(string emp_code, string ServicesDescripation, string qtype, string FilePath, string AssignedTo, char Is_Escalated, int ServiceDepartment, int Status, int ActionStatus, string Actionby, char Escalation_Type, int id, int CategoryId)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", id),
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@ServicesDescripation", ServicesDescripation),
            new SqlParameter("@FilePath", FilePath),
            new SqlParameter("@AssignedTo", AssignedTo),
            new SqlParameter("@Is_Escalated", Is_Escalated),
            new SqlParameter("@ServiceDepartment", ServiceDepartment),
            new SqlParameter("@Status", Status),
            new SqlParameter("@ActionStatus", ActionStatus),
            new SqlParameter("@ActionBy", Actionby),
            new SqlParameter("@Escalation_Type", Escalation_Type),
            new SqlParameter("@CategoryId", CategoryId)
        };
        return ExecuteDataSet("AssgineCustomerServiceRequestDetails", "SP_INSERTSERVICE_REQUEST", qtype, parameters);
    }
    public DataSet AssgineCustomerServiceRequestDetails(string emp_code, string ServicesDescripation, string qtype, string FilePath, string AssignedTo, char Is_Escalated, int ServiceDepartment, int Status, int ActionStatus, string Actionby, char Escalation_Type, int id, int CategoryId, int escalatedId)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", id),
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@ServicesDescripation", ServicesDescripation),
            new SqlParameter("@FilePath", FilePath),
            new SqlParameter("@AssignedTo", AssignedTo),
            new SqlParameter("@Is_Escalated", Is_Escalated),
            new SqlParameter("@ServiceDepartment", ServiceDepartment),
            new SqlParameter("@Status", Status),
            new SqlParameter("@ActionStatus", ActionStatus),
            new SqlParameter("@ActionBy", Actionby),
            new SqlParameter("@Escalation_Type", Escalation_Type),
            new SqlParameter("@CategoryId", CategoryId),
            new SqlParameter("@EscalatedId", escalatedId)
        };
        return ExecuteDataSet("AssgineCustomerServiceRequestDetails", "SP_INSERTSERVICE_REQUEST", qtype, parameters);
    }
    public DataSet AssgineCustomerServiceRequestDetails(string emp_code, string ServicesDescripation, string qtype, string FilePath, string AssignedTo, char Is_Escalated, int ServiceDepartment, int Status, int ActionStatus, string Actionby, char Escalation_Type, int id, int CategoryId, string newtargetDate, string CompCode, string systemtargetdate, string StrApprovercomment)
    {
        var parameters = new[]
       {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", id),
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@ServicesDescripation", ServicesDescripation),
            new SqlParameter("@FilePath", FilePath),
            new SqlParameter("@AssignedTo", AssignedTo),
            new SqlParameter("@Is_Escalated", Is_Escalated),
            new SqlParameter("@ServiceDepartment", ServiceDepartment),
            new SqlParameter("@Status", Status),
            new SqlParameter("@ActionStatus", ActionStatus),
            new SqlParameter("@ActionBy", Actionby),
            new SqlParameter("@Escalation_Type", Escalation_Type),
            new SqlParameter("@CategoryId", CategoryId),
            new SqlParameter("@newTargetDate", newtargetDate),
            new SqlParameter("@CompCode", CompCode),
            new SqlParameter("@systemTargetDate", systemtargetdate),
            new SqlParameter("@ApproverComment", StrApprovercomment)
        };
        return ExecuteDataSet("AssgineCustomerServiceRequestDetails", "SP_INSERTSERVICE_REQUEST", qtype, parameters);
    }
    public DataSet ServiceRequestnewTargetDate(string qtype, int id, string newtargetDate)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", qtype),
            new SqlParameter("@Id", id),
            new SqlParameter("@newTargetDate", newtargetDate)
        };
        return ExecuteDataSet("ServiceRequestnewTargetDate", "SP_INSERTSERVICE_REQUEST", qtype, parameters);
    }
    public void CustomerServiceRequest_send_NotificationCustomerSucessHOD(string serviceRequestno, string toMailIDs, string createdDate, string CustomerSucessHOD, string loginname, string CurrentTargetDate, string redirectURL, string sccmails, string sprojectName, string sCustomerName, string serviceRequestDescription, string NewTargetdate)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            StringBuilder strbuildAcknowledgment = new StringBuilder();

            var strsubjectAcknowledgment = "CUSTOMERFIRST:- Request to Change Target Date for Customer Service Request: " + serviceRequestno;

            strbuildAcknowledgment = new StringBuilder();
            strbuildAcknowledgment.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuildAcknowledgment.Append("</td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px;'></td></tr>");
            strbuildAcknowledgment.Append("<tr><td>Dear " + CustomerSucessHOD + ",</td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:10px;'></td></tr>");
            //strbuildAcknowledgment.Append("<tr><td>This is inform you to that " + loginname + " has been request a change in the target date for the customer service request " + serviceRequestno + ".</td></tr>");
            strbuildAcknowledgment.Append("<tr><td></td>This is to inform you that " + loginname + " has requested a change in the target date for Customer Service Request " + serviceRequestno + ".The newly proposed target date is " + NewTargetdate + ".</tr>");


            strbuildAcknowledgment.Append("<tr><td>");
            strbuildAcknowledgment.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuildAcknowledgment.Append("<tr><td>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'></td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:10px;'>Customer Service Request Details:</td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'></td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Project/ Location Name:  </td><td width='75%'>" + sprojectName + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Service Request No.: </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Created By: </td><td width='75%'>" + sCustomerName + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Created On: </td><td width='75%'>" + createdDate + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Service Request Description: </td><td width='75%'>" + serviceRequestDescription + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Current Target Date: </td><td width='75%'>" + CurrentTargetDate + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>New Target Date : </td><td width='75%'>" + NewTargetdate + "</td></tr>");

            strbuildAcknowledgment.Append("</table>");
            strbuildAcknowledgment.Append("</td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'></td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to view Service Request</td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'></td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'>This is an automatically generated email. Please do not reply.</td></tr>");
            strbuildAcknowledgment.Append("</table>");

            Custs_sendMailServiceRequest(toMailIDs, strsubjectAcknowledgment, Convert.ToString(strbuildAcknowledgment).Trim(), "", sccmails);
        }
        catch (Exception ex)
        {

        }
    }
    public void CustomerServiceRequest_send_mailto_ActionToEmployeePRM(int IsExceletd, string serviceRequestno, string toMailIDs, string actionName, string actionBy, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription, string employeeName)
    {
        StringBuilder strbuild = new StringBuilder();

        var strsubject = "";
        if (IsExceletd == 0)
        {
            //strsubject = "Action update on your Service Request " + serviceRequestno + "";
            //            strsubject = "CustomerFIRST :-Action Update on Service Request Created for " + department + " by " + employeeName + " (" + serviceRequestno + ")";
            strsubject = "CUSTOMERFIRST: Service Closure Request for Approval of " + department + " (" + serviceRequestno + ")";

        }
        else
        {
            //   strsubject = "CUSTOMERFIRST :-Action Update on escalated Service Request Created for " + department + " by " + employeeName + " (" + serviceRequestno + ")";
            strsubject = "CUSTOMERFIRST: Service Closure Request for Approval of " + department + " (" + serviceRequestno + ")";
        }

        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear Sir/Madam,</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            //strbuild.Append("<tr><td>This is to inform you that " + actionBy + " has been taken action on following Service Request " + serviceRequestno + ".</td></tr>");
            strbuild.Append("<tr><td>Please be informed that " + actionBy + " has closed Service Request " + serviceRequestno + ".Kindly take appropriate action.</td></tr>");

            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Service Request No: </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken: </td><td width='75%'>" + actionName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken By: </td><td width='75%'>" + actionBy + "</td></tr>");
            //strbuild.Append("<tr><td>Assigned To : </td><td >" + assgineTo + "</td></tr>");            
            strbuild.Append("<tr><td width='25%'>Created On: </td><td width='75%'> " + createdDate + "</td></tr>");
            //strbuild.Append("<tr><td width='25%'>Created For Department :</td><td width='75%'>" + department + "</td></tr>");
            if (IsExceletd == 0)
            {
                strbuild.Append("<tr><td width='25%'>Reply :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td width='25%'>Reply: </td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            }

            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");

            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to take action on Service Request</td></tr>");

            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is an automatically generated email. Please do not reply.</td></tr>");
            strbuild.Append("</table>");

            Custs_sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public void CustomerServiceRequest_send_mailto_ActionToEmployeePRM_Reopen(int IsExceletd, string serviceRequestno, string toMailIDs, string actionName, string actionBy, string createdDate, string department, string ccmailid, string redirectURL, string requestDescription, string customeName, string employeeName)
    {
        StringBuilder strbuild = new StringBuilder();
        var strsubject = "";
        if (IsExceletd == 0)
        {
            //strsubject = "Action update on your Service Request " + serviceRequestno + "";
            //            strsubject = "CUSTOMERFIRST :-Action Update on Service Request Created for " + department + " by " + employeeName + " (" + serviceRequestno + ")";
            strsubject = "CUSTOMERFIRST:- Re-opened Service Request - " + serviceRequestno;

        }
        else
        {
            //   strsubject = "CUSTOMERFIRST :-Action Update on escalated Service Request Created for " + department + " by " + employeeName + " (" + serviceRequestno + ")";
            strsubject = "CUSTOMERFIRST:- Re-opened Service Request - " + serviceRequestno;
        }

        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear " + actionBy + ",</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            //strbuild.Append("<tr><td>This is to inform you that " + actionBy + " has been taken action on following Service Request " + serviceRequestno + ".</td></tr>");
            strbuild.Append("<tr><td>I hope this message finds you well. I would like to inform you that Customer Success has re-opened the following service request: " + serviceRequestno + ". The request was previously marked as closed, but the customer success has raised further concerns that require additional action.</td></tr>");

            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td>Could you please review the details and take the necessary steps to address the customer’s concerns? Kindly ensure the team is aware of the re-opening and any necessary follow-up is carried out promptly.</td></tr>");
            strbuild.Append("<tr><td style='height:10px'></td></tr>");
            strbuild.Append("<tr><td>If you need any additional information or clarification, feel free to reach out.</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>");
            strbuild.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuild.Append("<tr><td width='25%'>Service Request No: </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken: </td><td width='75%'>" + actionName + "</td></tr>");
            strbuild.Append("<tr><td width='25%'>Action Taken By: </td><td width='75%'>" + employeeName + "</td></tr>");
            //strbuild.Append("<tr><td>Assigned To : </td><td >" + assgineTo + "</td></tr>");            
            strbuild.Append("<tr><td width='25%'>Created On: </td><td width='75%'> " + createdDate + "</td></tr>");
            //strbuild.Append("<tr><td width='25%'>Created For Department :</td><td width='75%'>" + department + "</td></tr>");
            if (IsExceletd == 0)
            {
                strbuild.Append("<tr><td width='25%'>Reply :</td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            }
            else
            {
                strbuild.Append("<tr><td width='25%'>Reply: </td><td width='75%' style='text-align:left !important;'>" + requestDescription + "</td></tr>");
            }

            strbuild.Append("</table>");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");

            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to take action on Service Request</td></tr>");

            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is an automatically generated email. Please do not reply.</td></tr>");
            strbuild.Append("</table>");

            Custs_sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", ccmailid);
        }
        catch (Exception ex)
        {

        }
    }
    public DataTable CustomerService_GetInboxAllServiceRequest(string assgimentTo, string fromdate, string todate)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "CustomerService_AllServiceRequest"),
            new SqlParameter("@AssignedTo", assgimentTo),
            new SqlParameter("@fromDate", fromdate),
            new SqlParameter("@toDate", todate)
        };
        return ExecuteDataTable("CustomerService_GetInboxAllServiceRequest", "SP_INSERTSERVICE_REQUEST", "CustomerService_AllServiceRequest", parameters);
    }
    public DataSet CustomerService_GetCCEmails(string emailid, string scompcode)
    {
        var parameters = new[]
        {
            new SqlParameter("@qtype", "CustomerService_getEmails_CC"),
            new SqlParameter("@emailaddress", emailid),
            new SqlParameter("@CompCode", scompcode)
        };
        return ExecuteDataSet("CustomerService_GetCCEmails", "SP_INSERTSERVICE_REQUEST", "CustomerService_getEmails_CC", parameters);
    }
    public void CustomerServiceRequest_send_NewTargetDateApproved(string serviceRequestno, string toMailIDs, string createdDate, string CustomerSucessHOD, string loginname, string CurrentTargetDate, string redirectURL, string sccmails, string sprojectName, string sCustomerName, string serviceRequestDescription, string NewTargetdate)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            StringBuilder strbuildAcknowledgment = new StringBuilder();

            var strsubjectAcknowledgment = "CUSTOMERFIRST:- Approved New Target Date for Customer Service Request: " + serviceRequestno;

            strbuildAcknowledgment = new StringBuilder();
            strbuildAcknowledgment.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuildAcknowledgment.Append("</td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px;'></td></tr>");
            strbuildAcknowledgment.Append("<tr><td>Dear " + CustomerSucessHOD + ",</td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:10px;'></td></tr>");
            //strbuildAcknowledgment.Append("<tr><td>This is inform you to that " + loginname + " has been request a change in the target date for the customer service request " + serviceRequestno + ".</td></tr>");
            strbuildAcknowledgment.Append("<tr><td></td>This is to inform you that " + loginname + " has Approved New target date for Customer Service Request " + serviceRequestno + ".</tr>");


            strbuildAcknowledgment.Append("<tr><td>");
            strbuildAcknowledgment.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuildAcknowledgment.Append("<tr><td>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'></td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:10px;'>Customer Service Request Details:</td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'></td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Project/ Location Name:  </td><td width='75%'>" + sprojectName + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Service Request No.: </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Created By: </td><td width='75%'>" + sCustomerName + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Created On: </td><td width='75%'>" + createdDate + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Approver Comment: </td><td width='75%'>" + serviceRequestDescription + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Current Target Date: </td><td width='75%'>" + CurrentTargetDate + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>New Target Date : </td><td width='75%'>" + NewTargetdate + "</td></tr>");

            strbuildAcknowledgment.Append("</table>");
            strbuildAcknowledgment.Append("</td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'></td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to view Service Request</td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'></td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'>This is an automatically generated email. Please do not reply.</td></tr>");
            strbuildAcknowledgment.Append("</table>");

            Custs_sendMailServiceRequest(toMailIDs, strsubjectAcknowledgment, Convert.ToString(strbuildAcknowledgment).Trim(), "", sccmails);

        }
        catch (Exception ex)
        {

        }
    }
    public void CustomerServiceRequest_send_NewTargetDateReject(string serviceRequestno, string toMailIDs, string createdDate, string CustomerSucessHOD, string loginname, string CurrentTargetDate, string redirectURL, string sccmails, string sprojectName, string sCustomerName, string serviceRequestDescription, string NewTargetdate)
    {
        StringBuilder strbuild = new StringBuilder();
        try
        {
            StringBuilder strbuildAcknowledgment = new StringBuilder();

            var strsubjectAcknowledgment = "CUSTOMERFIRST:- Reject New Target Date for Customer Service Request: " + serviceRequestno;

            strbuildAcknowledgment = new StringBuilder();
            strbuildAcknowledgment.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%;table-layout:fixed;'><tr><td>   ");
            strbuildAcknowledgment.Append("</td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px;'></td></tr>");
            strbuildAcknowledgment.Append("<tr><td>Dear " + CustomerSucessHOD + ",</td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:10px;'></td></tr>");
            //strbuildAcknowledgment.Append("<tr><td>This is inform you to that " + loginname + " has been request a change in the target date for the customer service request " + serviceRequestno + ".</td></tr>");
            strbuildAcknowledgment.Append("<tr><td></td>This is to inform you that " + loginname + " has Rejected New target date for Customer Service Request " + serviceRequestno + ".</tr>");


            strbuildAcknowledgment.Append("<tr><td>");
            strbuildAcknowledgment.Append("<table style='width:80%;color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;table-layout:fixed;'>");
            strbuildAcknowledgment.Append("<tr><td>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'></td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:10px;'>Customer Service Request Details:</td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'></td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Project/ Location Name:  </td><td width='75%'>" + sprojectName + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Service Request No.: </td><td width='75%'>" + serviceRequestno + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Created By: </td><td width='75%'>" + sCustomerName + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Created On: </td><td width='75%'>" + createdDate + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Approver Comment: </td><td width='75%'>" + serviceRequestDescription + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>Current Target Date: </td><td width='75%'>" + CurrentTargetDate + "</td></tr>");
            strbuildAcknowledgment.Append("<tr><td width='25%'>New Target Date : </td><td width='75%'>" + NewTargetdate + "</td></tr>");

            strbuildAcknowledgment.Append("</table>");
            strbuildAcknowledgment.Append("</td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'></td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'> Please click here to view Service Request</td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'></td></tr>");
            strbuildAcknowledgment.Append("<tr><td style='height:20px'>This is an automatically generated email. Please do not reply.</td></tr>");
            strbuildAcknowledgment.Append("</table>");

            Custs_sendMailServiceRequest(toMailIDs, strsubjectAcknowledgment, Convert.ToString(strbuildAcknowledgment).Trim(), "", sccmails);

        }
        catch (Exception ex)
        {

        }
    }

    #endregion
    
    #region update photo in onehr
    public DataSet Insert_update_photho(string empCode, string strinsertdelete, string emp_name, string dep, string des, string strfilename, string strfiletype)
    {
        var parameters = new[]
        {
           new SqlParameter("@QUERYMODE", strinsertdelete),
           new SqlParameter("@emp_code", empCode),
           new SqlParameter("@Emp_Name", emp_name),
           new SqlParameter("@Department", dep),
           new SqlParameter("@Designation", des),
           new SqlParameter("@FileName", strfilename),
           new SqlParameter("@filetype", strfiletype)
        };
        return ExecuteDataSet("Insert_update_photho", "SP_Update_Photo", strinsertdelete, parameters);
    }
    public void send_mailto_HR_Approver(string Emp_Name, string HRName, string toMailIDs, string strsubject, string redirectURL)
    {
        StringBuilder strbuild = new StringBuilder();
        strsubject = strsubject + Emp_Name;
        try
        {
            strbuild = new StringBuilder();
            if (loginUserid == "1")
            {
                strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'>");
                strbuild.Append("<tr><td>Dear " + HRName + ",</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>This is to inform you that " + Emp_Name + " has uploaded a photo in the OneHR. Kindly review and approve the photo.</td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td><a href='" + redirectURL + "' target='_blank'>Please click here to take action</a></td></tr>");
                strbuild.Append("<tr><td style='height:20px'></td></tr>");
                strbuild.Append("<tr><td>This is a system-generated email. Please do not reply.</td></tr>");
                strbuild.Append("</table>");
            }
            sendMailServiceRequest(toMailIDs, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }
    public DataTable GetPendinglist_forhr(string app_Code)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", "Get_pending_approvel_forhr"),
            new SqlParameter("@sr_no", app_Code)
        };
        return ExecuteDataTable("GetPendinglist_forhr", "SP_Update_Photo", "Get_pending_approvel_forhr", parameters);
    }
    public DataTable getemployeeupdatephoto(string srno)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", "employee_data"),
            new SqlParameter("@sr_no", srno)
        };
        return ExecuteDataTable("getemployeeupdatephoto", "SP_Update_Photo", "employee_data", parameters);

    }
    public bool insertapprover_remarks(string qtype, string emp_code, string Reason)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", qtype),
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@Remarks", Reason)
        };
        var status = ExecuteNonQuery("insertapprover_remarks", "SP_Update_Photo", qtype, parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public void send_mailto_Approved_photo(string toMail, string emp_name, string loginEmp_Name, string Reamrk, string strsubject)
    {
        StringBuilder strbuild = new StringBuilder();
        //var strsubject = strsubject;
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear " + emp_name + ",</td></tr>");
            strbuild.Append("<tr><td></td></tr>");
            strbuild.Append("<tr><td>this is to inform you " + loginEmp_Name + " has approved your uploaded photo in OneHR.</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");
            sendMailServiceRequest(toMail, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }
    public bool insertcorrection_remarks(string qtype, string emp_code, string Reason)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", qtype),
            new SqlParameter("@emp_code", emp_code),
            new SqlParameter("@Remarks", Reason)
        };
        var status = ExecuteNonQuery("insertcorrection_remarks", "SP_Update_Photo", qtype, parameters);
        if (status > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public void send_mailto_correction_photo(string toMail, string emp_name, string loginEmp_Name, string Reamrk, string strsubject, string redirectURL)
    {
        StringBuilder strbuild = new StringBuilder();
        //var strsubject = strsubject;
        try
        {
            strbuild = new StringBuilder();

            strbuild.Append("<table style='color:#000000;font-size:11pt;font-family:Trebuchet MS;font-style:Regular;width:100%'><tr><td>   ");
            strbuild.Append("</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td>Dear " + emp_name + ",</td></tr>");
            strbuild.Append("<tr><td></td></tr>");
            strbuild.Append("<tr><td>This is to inform you that, " + loginEmp_Name + " has reviewed your uploaded photo in OneHR and identified the need for corrections. We kindly request you to upload a passport-size photo in the standard format as per the system requirements at your earliest convenience.</td></tr>");
            //strbuild.Append("<tr><td>We kindly request you to upload a passport-size photo in the standard format as per the system requirements at your earliest convenience.</td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'><a href='" + redirectURL + "' target='_blank'>Please click here to Upload Photo</a></td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'></td></tr>");
            strbuild.Append("<tr><td style='height:20px'>This is system generated mail, please do not reply.</td></tr>");
            strbuild.Append("</table>");

            sendMailServiceRequest(toMail, strsubject, Convert.ToString(strbuild).Trim(), "", "");
        }
        catch (Exception ex)
        {

        }
    }
    #endregion
    
    #region uplode Gallery / Banner images
    public DataSet insert_gallery_banner_images(string strinsertdelete, string image_tooltip, string filename, string image_url, string image_category)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", strinsertdelete),
            new SqlParameter("@Image_Des", image_tooltip),
            new SqlParameter("@Image_Name", filename),
            new SqlParameter("@Image_URL", image_url),
            new SqlParameter("@Category_id", image_category)
        };
        return ExecuteDataSet("insert_gallery_banner_images", "SP_Gallery", strinsertdelete, parameters);
    }
    public DataTable Getgallery_banner_images_list(string QUERYMODE)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", QUERYMODE)
        };
        return ExecuteDataTable("Getgallery_banner_images_list", "SP_Gallery", QUERYMODE, parameters);
    }
    public DataTable Getgallery_banner_images_list(string QUERYMODE, string icategory)
    {
        var parameters = new[]
        {
            new SqlParameter("@QUERYMODE", QUERYMODE),
            new SqlParameter("@Category_id", icategory)
        };
        return ExecuteDataTable("Getgallery_banner_images_list", "SP_Gallery", QUERYMODE, parameters);
    }
    public DataTable getedit_gellery_bannerimage(double id)
    {
        var parameters = new[]
       {
            new SqlParameter("@QUERYMODE", "getedit_image"),
            new SqlParameter("@id", id)
        };
        return ExecuteDataTable("getedit_gellery_bannerimage", "SP_Gallery", "getedit_image", parameters);
    }

    #endregion
}