(function (e) { if (typeof define === "function" && define.amd) define(["jquery"], e); else e(jQuery) })(function (e) { var t, n, r; r = function (e, t) { return function () { return e.apply(t, arguments) } }; n = { align: "center", autoResize: false, comparator: null, container: e("body"), ignoreInactiveItems: true, itemWidth: 0, fillEmptySpace: false, flexibleWidth: 0, direction: undefined, offset: 2, onLayoutChanged: undefined, outerOffset: 0, resizeDelay: 50 }; t = function () { function t(t, i) { this.handler = t; this.columns = this.containerWidth = this.resizeTimer = null; this.activeItemCount = 0; this.itemHeightsDirty = true; this.placeholders = []; e.extend(true, this, n, i); this.update = r(this.update, this); this.onResize = r(this.onResize, this); this.onRefresh = r(this.onRefresh, this); this.getItemWidth = r(this.getItemWidth, this); this.layout = r(this.layout, this); this.layoutFull = r(this.layoutFull, this); this.layoutColumns = r(this.layoutColumns, this); this.filter = r(this.filter, this); this.clear = r(this.clear, this); this.getActiveItems = r(this.getActiveItems, this); this.refreshPlaceholders = r(this.refreshPlaceholders, this); this.sortElements = r(this.sortElements, this); var s = 0, o = 0, u = {}, a, f, l; for (; s < t.length; s++) { f = t.eq(s); a = f.data("filterClass"); if (typeof a == "object" && a.length > 0) { for (o = 0; o < a.length; o++) { l = e.trim(a[o]).toLowerCase(); if (!(l in u)) { u[l] = [] } u[l].push(f[0]) } } } this.filterClasses = u; if (this.autoResize) e(window).bind("resize.wookmark", this.onResize); this.container.bind("refreshWookmark", this.onRefresh) } t.prototype.update = function (t) { this.itemHeightsDirty = true; e.extend(true, this, t) }; t.prototype.onResize = function () { clearTimeout(this.resizeTimer); this.itemHeightsDirty = this.flexibleWidth !== 0; this.resizeTimer = setTimeout(this.layout, this.resizeDelay) }; t.prototype.onRefresh = function () { this.itemHeightsDirty = true; this.layout() }; t.prototype.filter = function (t, n) { var r = [], i, s = e(), o, u, a, f; t = t || []; n = n || "or"; if (t.length) { for (o = 0; o < t.length; o++) { f = e.trim(t[o].toLowerCase()); if (f in this.filterClasses) { r.push(this.filterClasses[f]) } } i = r.length; if (n == "or" || i == 1) { for (o = 0; o < i; o++) { s = s.add(r[o]) } } else if (n == "and") { var l = r[0], c = true, h, p, d; for (o = 1; o < i; o++) { if (r[o].length < l.length) { l = r[o] } } for (o = 0; o < l.length; o++) { p = l[o]; c = true; for (u = 0; u < r.length && c; u++) { d = r[u]; if (l == d) continue; for (a = 0, h = false; a < d.length && !h; a++) { h = d[a] == p } c &= h } if (c) s.push(l[o]) } } this.handler.not(s).addClass("inactive") } else { s = this.handler } s.removeClass("inactive"); this.columns = null; this.layout() }; t.prototype.refreshPlaceholders = function (t, n) { var r = this.placeholders.length, i, s, o = this.columns.length, u, a, f, l, c = this.container.innerHeight(); for (; r < o; r++) { i = e('<div class="wookmark-placeholder"/>').appendTo(this.container); this.placeholders.push(i) } l = this.offset + parseInt(this.placeholders[0].css("borderWidth"), 10) * 2; for (r = 0; r < this.placeholders.length; r++) { i = this.placeholders[r]; u = this.columns[r]; if (r >= o || !u[u.length - 1]) { i.css("display", "none") } else { s = u[u.length - 1]; if (!s) continue; f = s.data("wookmark-top") + s.data("wookmark-height") + this.offset; a = c - f - l; i.css({ position: "absolute", display: a > 0 ? "block" : "none", left: r * t + n, top: f, width: t - l, height: a }) } } }; t.prototype.getActiveItems = function () { return this.ignoreInactiveItems ? this.handler.not(".inactive") : this.handler }; t.prototype.getItemWidth = function () { var e = this.itemWidth, t = this.container.width() - 2 * this.outerOffset, n = this.handler.eq(0), r = this.flexibleWidth; if (this.itemWidth === undefined || this.itemWidth === 0 && !this.flexibleWidth) { e = n.outerWidth() } else if (typeof this.itemWidth == "string" && this.itemWidth.indexOf("%") >= 0) { e = parseFloat(this.itemWidth) / 100 * t } if (r) { if (typeof r == "string" && r.indexOf("%") >= 0) { r = parseFloat(r) / 100 * t } var i = ~ ~(.5 + (t + this.offset) / (r + this.offset)), s = Math.min(r, ~ ~((t - (i - 1) * this.offset) / i)); e = Math.max(e, s); this.handler.css("width", e) } return e }; t.prototype.layout = function (e) { if (!this.container.is(":visible")) return; var t = this.getItemWidth() + this.offset, n = this.container.width(), r = n - 2 * this.outerOffset, i = ~ ~((r + this.offset) / t), s = 0, o = 0, u = 0, a = this.getActiveItems(), f = a.length, l; if (this.itemHeightsDirty) { for (; u < f; u++) { l = a.eq(u); l.data("wookmark-height", l.outerHeight()) } this.itemHeightsDirty = false } i = Math.max(1, Math.min(i, f)); s = this.outerOffset; if (this.align == "center") { s += ~ ~(.5 + (r - (i * t - this.offset)) >> 1) } this.direction = this.direction || (this.align == "right" ? "right" : "left"); if (!e && this.columns !== null && this.columns.length == i && this.activeItemCount == f) { o = this.layoutColumns(t, s) } else { o = this.layoutFull(t, i, s) } this.activeItemCount = f; this.container.css("height", o); if (this.fillEmptySpace) { this.refreshPlaceholders(t, s) } if (this.onLayoutChanged !== undefined && typeof this.onLayoutChanged === "function") { this.onLayoutChanged() } }; t.prototype.sortElements = function (e) { return typeof this.comparator === "function" ? e.sort(this.comparator) : e }; t.prototype.layoutFull = function (t, n, r) { var i, s = 0, o = 0, u = e.makeArray(this.getActiveItems()), a = u.length, f = null, l = null, c = { position: "absolute" }, h, p = [], d = this.align == "left" ? true : false; this.columns = []; u = this.sortElements(u); while (p.length < n) { p.push(this.outerOffset); this.columns.push([]) } for (; s < a; s++) { i = e(u[s]); f = p[0]; l = 0; for (o = 0; o < n; o++) { if (p[o] < f) { f = p[o]; l = o } } h = r; if (l > 0 || !d) h += l * t; c[this.direction] = h; c.top = f; i.css(c).data("wookmark-top", f); p[l] += i.data("wookmark-height") + this.offset; this.columns[l].push(i) } return Math.max.apply(Math, p) }; t.prototype.layoutColumns = function (e, t) { var n = [], r = 0, i = 0, s, o, u, a, f; for (; r < this.columns.length; r++) { n.push(this.outerOffset); o = this.columns[r]; f = r * e + t; s = n[r]; for (i = 0; i < o.length; i++) { u = o[i]; a = { top: s }; a[this.direction] = f; u.css(a).data("wookmark-top", s); s += u.data("wookmark-height") + this.offset } n[r] = s } return Math.max.apply(Math, n) }; t.prototype.clear = function () { clearTimeout(this.resizeTimer); e(window).unbind("resize.wookmark", this.onResize); this.container.unbind("refreshWookmark", this.onRefresh) }; return t } (); e.fn.wookmark = function (e) { if (!this.wookmarkInstance) { this.wookmarkInstance = new t(this, e || {}) } else { this.wookmarkInstance.update(e || {}) } this.wookmarkInstance.layout(true); return this.show() } })